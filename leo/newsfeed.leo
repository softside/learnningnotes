<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet ekr_test?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="newlife.20110215113939.1354"><vh>文档</vh></v>
<v t="newlife.20110211142831.1267"><vh>新鲜事平台</vh>
<v t="newlife.20110211142831.1268" a="E"><vh>前期准备</vh>
<v t="newlife.20110211142831.1269"><vh>需要处理的平台信息</vh></v>
<v t="newlife.20110211142831.1271" a="E"><vh>当前流程</vh>
<v t="newlife.20110211142831.1285"><vh>baidu</vh></v>
<v t="newlife.20110212113018.1282"><vh>sohu</vh></v>
<v t="newlife.20110221101214.1418" a="E"><vh>163</vh>
<v t="newlife.20110221101214.1419"><vh>/paopaoyu/apps/sns/sns_msg_163.py</vh>
<v t="newlife.20110221101214.1420"><vh>sns_msg_163 declarations</vh></v>
<v t="newlife.20110221101214.1421"><vh>send_rank_feed</vh></v>
<v t="newlife.20110221101214.1422"><vh>send_troll_feed</vh></v>
<v t="newlife.20110221101214.1423"><vh>send_submarine_feed</vh></v>
<v t="newlife.20110221101214.1424"><vh>send_catchfish_feed</vh></v>
<v t="newlife.20110221101214.1425"><vh>send_steal_notif</vh></v>
<v t="newlife.20110221101214.1426"><vh>send_shock_notif</vh></v>
<v t="newlife.20110221101214.1427"><vh>send_openStage_feed</vh></v>
</v>
<v t="newlife.20110221101214.1429"><vh>/paopaoyu/apps/sns/sns_api_163.py</vh>
<v t="newlife.20110221101214.1430"><vh>sns_api_163 declarations</vh></v>
<v t="newlife.20110221101214.1431"><vh>_generate_wangyi_base_params</vh></v>
<v t="newlife.20110221101214.1432"><vh>_resolve__wangyisession_key</vh></v>
<v t="newlife.20110221101214.1433"><vh>get_container</vh></v>
<v t="newlife.20110221101214.1434"><vh>get_sns_id</vh></v>
<v t="newlife.20110221101214.1435"><vh>get_sns_user</vh></v>
<v t="newlife.20110221101214.1436"><vh>get_app_friends</vh></v>
<v t="newlife.20110221101214.1437"><vh>get_are_friends</vh></v>
<v t="newlife.20110221101214.1438"><vh>send_app_feed</vh></v>
<v t="newlife.20110221101214.1439"><vh>send_app_notif</vh></v>
<v t="newlife.20110221101214.1440"><vh>fetch_ebaccount_request</vh></v>
<v t="newlife.20110221101214.1441"><vh>pay_reg_order</vh></v>
<v t="newlife.20110221101214.1442"><vh>pay_is_complete</vh></v>
<v t="newlife.20110221101214.1443"><vh>add_friends</vh></v>
<v t="newlife.20110221101214.1444"><vh>fetch_app_order_record_request</vh></v>
<v t="newlife.20110221101214.1445"><vh>fetch_libaryItemStatus_request</vh></v>
<v t="newlife.20110221101214.1446"><vh>fetch_checkUserName_request</vh></v>
<v t="newlife.20110221101214.1447"><vh>fetch_checkContent_request</vh></v>
<v t="newlife.20110221101214.1448"><vh>fetch_neteaseGroups_request</vh></v>
<v t="newlife.20110221101214.1449"><vh>fetch_neteaseGroups_withId</vh></v>
</v>
</v>
<v t="newlife.20110221101214.1450" a="E"><vh>盛大sdo</vh>
<v t="newlife.20110221101214.1451"><vh>/paopaoyu/apps/sns/sns_msg_sdo.py</vh>
<v t="newlife.20110221101214.1452"><vh>sns_msg_sdo declarations</vh></v>
<v t="newlife.20110221101214.1453"><vh>send_troll_feed</vh></v>
<v t="newlife.20110221101214.1454"><vh>send_submarine_feed</vh></v>
<v t="newlife.20110221101214.1455"><vh>send_catchfish_feed</vh></v>
<v t="newlife.20110221101214.1456"><vh>send_openStage_feed</vh></v>
<v t="newlife.20110221101214.1457"><vh>send_feed_auto</vh></v>
<v t="newlife.20110221101214.1458"><vh>send_steal_notif</vh></v>
<v t="newlife.20110221101214.1459"><vh>send_shock_notif</vh></v>
</v>
<v t="newlife.20110221101214.1460"><vh>/paopaoyu/apps/sns/sns_api_sdo.py</vh>
<v t="newlife.20110221101214.1461"><vh>sns_api_sdo declarations</vh></v>
<v t="newlife.20110221101214.1462"><vh>_generate_base_params</vh></v>
<v t="newlife.20110221101214.1463"><vh>_generate_sig</vh></v>
<v t="newlife.20110221101214.1464"><vh>_post_api_request</vh></v>
<v t="newlife.20110221101214.1465"><vh>get_sns_id</vh></v>
<v t="newlife.20110221101214.1466"><vh>get_sns_user</vh></v>
<v t="newlife.20110221101214.1467"><vh>get_app_friends</vh></v>
<v t="newlife.20110221101214.1468"><vh>get_are_friends</vh></v>
<v t="newlife.20110221101214.1469"><vh>get_site_info</vh></v>
<v t="newlife.20110221101214.1470"><vh>send_app_feed</vh></v>
<v t="newlife.20110221101214.1471"><vh>send_app_notif</vh></v>
<v t="newlife.20110221101214.1472"><vh>pay_reg_order</vh></v>
<v t="newlife.20110221101214.1473"><vh>pay_is_complete</vh></v>
<v t="newlife.20110221101214.1474"><vh>send_is_invitation</vh></v>
<v t="newlife.20110221101214.1475"><vh>create_os_invitation</vh></v>
<v t="newlife.20110221101214.1476"><vh>check_user_medal</vh></v>
</v>
</v>
<v t="newlife.20110221101214.1477"><vh>4399</vh></v>
</v>
<v t="newlife.20110214113902.1345"><vh>分析</vh></v>
<v t="newlife.20110221101214.1428"><vh>send_feed_auto</vh></v>
</v>
<v t="newlife.20110212113018.1285" a="E"><vh>优先</vh>
<v t="newlife.20110211142831.1270" a="E"><vh>sina微博</vh>
<v t="newlife.20110211142831.1274"><vh>get_member_bindblog_info</vh></v>
<v t="newlife.20110211142831.1278" a="M"><vh>is_send_feed</vh></v>
</v>
<v t="newlife.20110212113018.1284"><vh>kaixin</vh></v>
<v t="newlife.20110212113018.1283" a="E"><vh>renren</vh>
<v t="newlife.20110212113018.1286" a="O"><vh>/bubblefish/paopaoyu/apps/sns/sns_api_renren.py</vh>
<v t="newlife.20110212113018.1287"><vh>sns_api_renren declarations</vh></v>
<v t="newlife.20110212113018.1288"><vh>_generate_base_params</vh></v>
<v t="newlife.20110212113018.1289"><vh>_generate_sig</vh></v>
<v t="newlife.20110212113018.1290"><vh>_post_api_request</vh></v>
<v t="newlife.20110212113018.1291"><vh>get_sns_id</vh></v>
<v t="newlife.20110212113018.1292"><vh>get_sns_user</vh></v>
<v t="newlife.20110212113018.1293"><vh>get_app_friends</vh></v>
<v t="newlife.20110212113018.1294"><vh>get_are_friends</vh></v>
<v t="newlife.20110212113018.1295"><vh>send_app_feed</vh></v>
<v t="newlife.20110212113018.1296"><vh>send_app_notif</vh></v>
<v t="newlife.20110212113018.1297"><vh>pay_reg_order</vh></v>
<v t="newlife.20110212113018.1298"><vh>pay_is_complete</vh></v>
<v t="newlife.20110212113018.1299"><vh>check_vip_user</vh></v>
<v t="newlife.20110212113018.1300"><vh>check_user_score</vh></v>
<v t="newlife.20110212113018.1301"><vh>check_is_fan</vh></v>
</v>
<v t="newlife.20110212113018.1302" a="O"><vh>/bubblefish/paopaoyu/apps/sns/sns_msg_renren.py</vh>
<v t="newlife.20110212113018.1303"><vh>sns_msg_renren declarations</vh></v>
<v t="newlife.20110212113018.1304"><vh>send_rank_feed</vh></v>
<v t="newlife.20110212113018.1305"><vh>send_troll_feed</vh></v>
<v t="newlife.20110212113018.1306"><vh>send_submarine_feed</vh></v>
<v t="newlife.20110212113018.1307"><vh>send_catchfish_feed</vh></v>
<v t="newlife.20110212113018.1308"><vh>send_steal_notif</vh></v>
<v t="newlife.20110212113018.1309"><vh>send_shock_notif</vh></v>
<v t="newlife.20110212113018.1310"><vh>send_openStage_feed</vh></v>
<v t="newlife.20110212113018.1311"><vh>send_feed_auto</vh></v>
</v>
<v t="newlife.20110216113034.1366"><vh>@file /home/newlife/bubblefish/paopaoyu/templates/sns/renren.html</vh>
<v t="newlife.20110216113034.1367"><vh>renren declarations</vh></v>
<v t="newlife.20110216113034.1368"><vh>html</vh>
<v t="newlife.20110216113034.1369"><vh>head</vh></v>
<v t="newlife.20110216113034.1370"><vh>body</vh>
<v t="newlife.20110216113034.1371"><vh>div</vh>
<v t="newlife.20110216113034.1372"><vh>div</vh></v>
</v>
<v t="newlife.20110216113034.1373"><vh>div</vh></v>
<v t="newlife.20110216113034.1374"><vh>div</vh></v>
<v t="newlife.20110216113034.1375"><vh>div</vh></v>
<v t="newlife.20110216113034.1376"><vh>div</vh></v>
<v t="newlife.20110216113034.1377"><vh>div</vh></v>
<v t="newlife.20110216113034.1378"><vh>div</vh></v>
<v t="newlife.20110216113034.1379"><vh>div</vh></v>
<v t="newlife.20110216113034.1380"><vh>div</vh></v>
<v t="newlife.20110216113034.1381"><vh>div</vh>
<v t="newlife.20110216113034.1382"><vh>div</vh></v>
</v>
<v t="newlife.20110216113034.1383"><vh>div</vh></v>
</v>
</v>
</v>
<v t="newlife.20110214113902.1342" a="E"><vh>/bubblefish/paopaoyu/templates/sns/renren_feeds.js</vh>
<v t="newlife.20110214113902.1343"><vh>renren_feeds declarations</vh></v>
<v t="newlife.20110214113902.1344"><vh>feedCallback</vh></v>
<v t="newlife.20110217105337.1405"><vh>分析feedCallback</vh></v>
</v>
</v>
</v>
<v t="newlife.20110214113902.1347"><vh>问题</vh></v>
<v t="newlife.20110218115009.1409" a="E"><vh>model</vh>
<v t="newlife.20110214113902.1346" a="E"><vh>分析model</vh>
<v t="newlife.20110215113939.1357"><vh>关于奖励</vh></v>
<v t="newlife.20110215113939.1359"><vh>链接目标</vh></v>
<v t="newlife.20110215113939.1361"><vh>点击处理</vh></v>
<v t="newlife.20110215113939.1360" a="M"><vh>结论</vh></v>
</v>
<v t="newlife.20110215113939.1358"><vh>需要沟通的需求</vh></v>
<v t="newlife.20110217105337.1402"><vh>更改</vh></v>
<v t="newlife.20110217105337.1406"><vh>md5</vh></v>
<v t="newlife.20110218115009.1408"><vh>链接分析</vh></v>
</v>
<v t="newlife.20110218115009.1410" a="E"><vh>结论</vh>
<v t="newlife.20110218115009.1411"><vh>新鲜事的发送</vh></v>
<v t="newlife.20110218115009.1412"><vh>新鲜事的处理</vh></v>
</v>
</v>
<v t="newlife.20110315153515.1540"><vh>shell_to_pearls</vh></v>
</vnodes>
<tnodes>
<t tx="newlife.20110211142831.1267">看上去很美
</t>
<t tx="newlife.20110211142831.1268"></t>
<t tx="newlife.20110211142831.1269">所有新鲜事的平台：
sina微博、

baidu

sohu、

4399、

sdo、

163、

renren


注册开发者帐号查看说明文档</t>
<t tx="newlife.20110211142831.1270">发布新鲜事的形式

新鲜事接口：

sina微博:
    这个仅在官网有，用户通过sina微博登录，记录是否将信息同步到微博，
    具体的字段就是BindBlog这个model中的allowed字段，
    当然还有blog_type判断是否是sina用户因为还有开心用户和本地注册的用户
</t>
<t tx="newlife.20110211142831.1271"></t>
<t tx="newlife.20110211142831.1274">def get_member_bindblog_info(sns_id):
    key = CACHE_SINA_USER_INFO % (sns_id)
    bb = cache.get(key)

    if bb is None:
        bbs = BindBlog.objects.filter(user_id=sns_id)
        if bbs:
            bb = bbs[0]
            cache.set(key, bb)
        else:
            return None

    return bb

@doc
不得不说，这都是谁写的啊，就为了这么东西，写这么函数，类不累啊。，。
一个值得注意的地方，就是解除对各个表之间的外键约束。将所有的ForeignkeyField转化为IntegerField</t>
<t tx="newlife.20110211142831.1278">def is_send_feed(sns_id):
    bbinfo = get_member_bindblog_info(sns_id)

    if not bbinfo:
        return False
    if bbinfo.blog_type != 'sina':
        return False
    if bbinfo.allowed:
        return True
    else:
        return False

##############################################################
虽然我不是一个有代码洁癖的人，但是看到这种我还是忍不住

def is_send_feed(sns_id):
    bbinfo = get_member_bindblog_info(sns_id)
    
    if bbinfo.blog_type == 'sina' and bbinfo.allowed:
        return True
    else:
        return False
</t>
<t tx="newlife.20110211142831.1285">百度没有。</t>
<t tx="newlife.20110212113018.1282">搜狐这个新鲜啊，</t>
<t tx="newlife.20110212113018.1283">方针：尽量使用以前的方式，减少工作量/

这个流程ms是这样的：
   #调用的接口位于paopaoyu/apps/sns/sns_api_renren.py中的send_app_feed()，然后正常的时候返回一个_post_api_request()这个函数返回的结果。
   这个东西是各个平台不同的，各个单独处理的，而且是单独放各个平台的，
   现在要做一个新鲜事系统，现在的问题是这个系统要放到什么地方来做这个事情。
   其实新浪和人人的都再官网，这个其实问题不大，
   所以新鲜事要处理的可以分为2类，一类是官网
   
需求：
    要求发布的新鲜内容可以增删查改，所以要建表存储这些新鲜事的内容。
    然后就是如何建立接口传递数据，
    首先，官网，就是新浪，
        这个是通过js调用写的，这个其实是可以的，就是变量放到js里
    然后，就是各个应用平台，就是人人呗，
        构建新鲜事的源，     


申请人人开发者，</t>
<t tx="newlife.20110212113018.1284">没有</t>
<t tx="newlife.20110212113018.1285"></t>
<t tx="newlife.20110212113018.1286">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20110212113018.1287"># -*- coding: utf-8 -*-
from datetime import datetime
from django.utils import simplejson
from django.conf import settings
import urllib, urllib2
import hashlib


</t>
<t tx="newlife.20110212113018.1288">def _generate_base_params():
    params = {}
    params['api_key'] = settings.SNS_API_KEY
    params['call_id'] = datetime.now().microsecond
    params['v'] = 1.0
    params['format'] = 'JSON'

    return params


</t>
<t tx="newlife.20110212113018.1289">def _generate_sig(params, secret_key=settings.SNS_SECRET_KEY):
    hasher = hashlib.md5(''.join(['%s=%s' % (x, params[x]) for x in sorted(params.keys())]))
    hasher.update(secret_key)
    return hasher.hexdigest()


</t>
<t tx="newlife.20110212113018.1290">def _post_api_request(params):
    data = urllib.urlencode(params)
    req = urllib2.Request(settings.SNS_API_REST_SERVER)
    response = urllib2.urlopen(req, data)
    result = response.read()
    result = simplejson.loads(result)

    return result


</t>
<t tx="newlife.20110212113018.1291">def get_sns_id(session_key):
    """
    Return sns id of user from the session key.
    See http://wiki.dev.renren.com/wiki/Users.getLoggedInUser
    Example:
    &gt;&gt;&gt; get_sns_id('2.d05591750139050e06ac76eeaf802302.3600.1264568400-288243096')
    288243096
    """
    try:
        params = _generate_base_params()
        params['method'] = 'xiaonei.users.getLoggedInUser'
        params['session_key'] = session_key
        params['sig'] = _generate_sig(params)
        result = _post_api_request(params)
        return result['uid']
    except:
        return 'SNS_API_ERROR'


</t>
<t tx="newlife.20110212113018.1292">def get_sns_user(session_key, sns_id, fields='name,headurl'):
    """
    Return a dictionary, the keys are all the elements of fields parameter.
    See http://wiki.dev.renren.com/wiki/Users.getInfo
    Example:
    &gt;&gt;&gt; get_sns_user('288243096')
    {u'uid': 288243096, u'headurl': u'http://hdn.xnimg.cn/photos/hdn511/20090827/1340/head_r82j_7787k204234.jpg', u'name': u'李响'}
    """
    try:
        params = _generate_base_params()
        params['method'] = 'xiaonei.users.getInfo'
        params['uids'] = sns_id
        params['session_key'] = session_key
        params['fields'] = fields
        params['sig'] = _generate_sig(params)
        result = _post_api_request(params)
        # The result is a list
        return result[0]['name'], result[0]['headurl']
    except:
        return 'SNS_API_ERROR'


</t>
<t tx="newlife.20110212113018.1293">def get_app_friends(session_key):
    """
    Return friends list of current user.
    See http://wiki.dev.renren.com/wiki/Friends.getFriends
    Example:
    &gt;&gt;&gt; get_app_friends('2.d05591750139050e06ac76eeaf802302.3600.1264568400-288243096')
    [{u'id': 247592008, u'headurl': u'http://hdn.xnimg.cn/photos/hdn201/20081223/08/15/head_w6YQ_29630m198107.jpg', u'name': u'金辉KinWii'}, ... , ]
    """
    try:
        params = _generate_base_params()
        params['method'] = 'xiaonei.friends.getAppFriends'
        params['session_key'] = session_key
        params['sig'] = _generate_sig(params)
        result = _post_api_request(params)
        # The result is a friend list
        return result
    except:
        return 'SNS_API_ERROR'


</t>
<t tx="newlife.20110212113018.1294">def get_are_friends(session_key, uids1, uids2):
    """
    Return 1 when given uids1 and uids2 are friends, else return 0.
    See http://wiki.dev.renren.com/wiki/Friends.areFriends
    Example:
    &gt;&gt;&gt; get_are_friends('2.f97e3a1e5a8700d7e85c760953a4976f.3600.1264575600-288243096', '288243096', '55258592')
    1
    &gt;&gt;&gt; get_are_friends('2.f97e3a1e5a8700d7e85c760953a4976f.3600.1264575600-288243096', '288243096', '256500065')
    0
    """
    try:
        params = _generate_base_params()
        params['method'] = 'xiaonei.friends.areFriends'
        params['session_key'] = session_key
        params['uids1'] = uids1
        params['uids2'] = uids2
        params['sig'] = _generate_sig(params)
        result = _post_api_request(params)
        if result[0]['uid1'] and result[0]['uid2'] and result[0].has_key('are_friends'):
            return result[0]['are_friends']
    except:
        return 'SNS_API_ERROR'

</t>
<t tx="newlife.20110212113018.1295">def send_app_feed(session_key, template_id, title_data, body_data):
    """
    Return 1 if successful send.
    See http://wiki.dev.renren.com/wiki/Feed.publishTemplatizedAction
    Example:
    &gt;&gt;&gt; send_app_feed('2.f97e3a1e5a8700d7e85c760953a4976f.3600.1264575600-288243096', '1', '{"feedtype":"&lt;a href=\'http://apps.renren.com/paopaoyu\'&gt;神秘海域&lt;/a&gt;"}', '{"content":"&lt;a href=\'http://apps.renren.com/paopaoyu\'&gt;也来吐个泡泡!&lt;/a&gt;"}')
    1
    """
    try:
        params = _generate_base_params()
        params['method'] = 'xiaonei.feed.publishTemplatizedAction'
        params['session_key'] = session_key
        params['template_id'] = template_id
        params['title_data'] = title_data
        params['body_data'] = body_data
        params['sig'] = _generate_sig(params)
        result = _post_api_request(params)
        if result.has_key('result'):
            return result['result']
        else:
            return 'SNS_API_ERROR'
    except:
        return 'SNS_API_ERROR'


</t>
<t tx="newlife.20110212113018.1296">def send_app_notif(session_key, to_ids, notification):
    """
    Return 1 if successful send.
    See http://wiki.dev.renren.com/wiki/Notifications.send
    Example:
    &gt;&gt;&gt; send_app_notif('2.f97e3a1e5a8700d7e85c760953a4976f.3600.1264575600-288243096', '288243096', '你的朋友&lt;xn:name uid="288243096" linked="true"/&gt;趁你不在悄悄捞走了你的鱼，坏笑着溜走了。&lt;a href="http://apps.renren.com/paopaoyu"&gt;去TA家收鱼！&lt;/a&gt;')
    1
    """
    try:
        params = _generate_base_params()
        params['method'] = 'xiaonei.notifications.send'
        params['session_key'] = session_key
        params['to_ids'] = to_ids
        params['notification'] = notification
        params['sig'] = _generate_sig(params)
        result = _post_api_request(params)
        if result.has_key('result'):
            return result['result']
        else:
            return 'SNS_API_ERROR'
    except:
        return 'SNS_API_ERROR'


</t>
<t tx="newlife.20110212113018.1297">def pay_reg_order(session_key, order_id, amount, desc):
    try:
        params = _generate_base_params()
        params['method'] = 'xiaonei.pay.regOrder'
        params['session_key'] = session_key
        params['order_id'] = order_id
        params['amount'] = amount
        params['desc'] = desc
        params['sig'] = _generate_sig(params)
        result = _post_api_request(params)
        if result['token']:
            return result['token']
    except:
        return 'SNS_API_ERROR'


</t>
<t tx="newlife.20110212113018.1298">def pay_is_complete(order_id):
    try:
        params = _generate_base_params()
        params['method'] = 'xiaonei.pay.isCompleted'
        params['order_id'] = order_id
        params['sig'] = _generate_sig(params)
        result = _post_api_request(params)
        if result['result'] == 1:
            return result
    except:
        return ''


</t>
<t tx="newlife.20110212113018.1299">def check_vip_user(session_key, sns_id):
    try:
        params = _generate_base_params()
        params['method'] = 'xiaonei.users.getInfo'
        params['uids'] = sns_id
        params['session_key'] = session_key
        params['fields'] = 'zidou'
        params['sig'] = _generate_sig(params)
        result = _post_api_request(params)
        # The result is a list
        if result[0]['zidou']:
            return True
        else:
            return False
    except:
        return False
</t>
<t tx="newlife.20110212113018.1300"># comment:
#       -1 : 参数错误 
#       其它 : 积分值
def check_user_score(session_key, sns_id):
    try:
        security_key = 'rrmntelunsupopofish'
        pwdpp = '%s%s' % (security_key, sns_id)
        hasher = hashlib.md5(pwdpp)
        pwdpp_security = hasher.hexdigest()

        params = {}
        params['userid'] = sns_id
        params['pwdpp'] =  pwdpp_security

        data = urllib.urlencode(params)
        req = urllib2.Request(settings.SNS_SCORE_CALLURL)
        response = urllib2.urlopen(req, data)
        result = response.read()
        result = simplejson.loads(result)

        return result
    except:
        return 0

</t>
<t tx="newlife.20110212113018.1301">def check_is_fan(sns_id):
    try:
        params = _generate_base_params()
        params['method'] = 'pages.isFan'
        params['uid'] = sns_id
        params['sig'] = _generate_sig(params)
        result = _post_api_request(params)
        # The result is a list
        if result['result']:
            return True
        else:
            return False
    except:
        return 0
</t>
<t tx="newlife.20110212113018.1302">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20110212113018.1303"># -*- coding: utf-8 -*-
from sns_api import send_app_feed, send_app_notif
import random

</t>
<t tx="newlife.20110212113018.1304">def send_rank_feed(session_key, rank):
    try:
        template_id = '2'
        title_data = ''
        body_data = '{"rank":"%s"}' % rank

        return send_app_feed(session_key, template_id, title_data, body_data)
    except:
        pass


</t>
<t tx="newlife.20110212113018.1305">def send_troll_feed(session_key, owner_id, price, fishname):
    try:
        fishname = fishname.encode('utf8')
        template_id = '3'
        title_data = '{"price":"%s","owner":"&lt;xn:name uid=\'%s\' linked=\'true\'/&gt;","fishname":"%s"}' % (int(price), owner_id, fishname)
        body_data = ''

        return send_app_feed(session_key, template_id, title_data, body_data)
    except:
        pass


</t>
<t tx="newlife.20110212113018.1306">def send_submarine_feed(session_key, fishname):
    try:
        fishname = fishname.encode('utf8')
        template_id = '4'
        title_data = ''
        body_data = '{"fishname":"%s"}' % fishname

        return send_app_feed(session_key, template_id, title_data, body_data)
    except:
        pass


</t>
<t tx="newlife.20110212113018.1307">def send_catchfish_feed(session_key, fishname):
    try:
        fishname = fishname.encode('utf8')
        template_id = '5'
        title_data = '{"fishname":"%s"}' % fishname
        body_data = ''

        return send_app_feed(session_key, template_id, title_data, body_data)
    except:
        pass


</t>
<t tx="newlife.20110212113018.1308">def send_steal_notif(session_key, thief_id, owner_id, sns_url):
    try:
        notification = '你的朋友&lt;xn:name uid="%s" linked="true"/&gt;趁你不在悄悄捞走了你的鱼，坏笑着溜走了。&lt;a href="%s"&gt;去TA家收鱼！&lt;/a&gt;' % (thief_id, sns_url)
        to_ids = '%s' % owner_id
        return send_app_notif(session_key, to_ids, notification)
    except:
        pass


</t>
<t tx="newlife.20110212113018.1309">def send_shock_notif(session_key, thief_id, owner_id, sns_url):
    try:
        notification = '&lt;xn:name uid="%s" linked="true"/&gt;不怀好意地“电”了你精心饲养的鱼，心满意足地拿着贝壳跑了。&lt;a href="%s"&gt;登门报复！&lt;/a&gt;' % (thief_id, sns_url)
        to_ids = '%s' % owner_id
        return send_app_notif(session_key, to_ids, notification)
    except:
        pass


</t>
<t tx="newlife.20110212113018.1310">def send_openStage_feed(session_key, stage=5):
    try:
        template_id = '10'
        title_data = ''
        body_data = ''

        return send_app_feed(session_key, template_id, title_data, body_data)
    except:
        pass

</t>
<t tx="newlife.20110212113018.1311">def send_feed_auto(session_key, type, val='1'):
    pass


</t>
<t tx="newlife.20110214113902.1342">@language javascript
@tabwidth -4
@others
@ignore

function sendUserFeed(feedType, sns_id, style, val){
    var feedSettings;
    var images = [{"src":"{{ media_url }}images/newfeed/login.gif",
        "href":"{{ sns_url }}"}];
    var content;
    var title_name = ["", ""];
    var body_data = "";

    if(feedType == "login") {
        var contentArray = [["","带着精良的装备和战斗小队顺着神秘的泡泡海洋漩涡，潜入了那片远古归墟。", "", "", "尾随进去……"], 
                            ["泡泡海洋的温暖麻木了", "的战斗神经，突然一阵洋流袭来，潘多拉海域的斗士危险了！", "", "", "前去增援！"], 
                            ["全球变暖使极地冰川地区海平面急速上升，", "的使命—保护即将灭绝的鱼儿。", "", "", "加入战斗……"], 
                            ["","潜入泡泡鱼海洋，终于在暗黑的海底见识到了剧毒海怪石头鱼！", "", "", "我想看看……"], 
                            ["一条褐色的长长的东西从海底洞穴里撞了出来，嗖一下把","卷走了！", "", "", "那是什么……"], 
                            ["","一头扎进了海里，蹬了一下腿，嗖，没影了……", "", "", "潜入深海……"], 
                            ["巨大的章鱼那双小眼睛在泡泡鱼海底环顾了一圈，盯上了正在潜水的","……", "", "", "前去帮忙……"], 
                            ["","背着先进的潜水设备开始了深海冒险，身后的模糊的巨大黑影紧紧地跟着TA……", "", "", "跟着游进去……"]
                           ];

        var index = Math.floor(Math.random()*10)%8;
        title_name = ["", "进入了泡泡鱼游戏，玩的不亦乐乎。"];
        content = contentArray[index];
        body_data = "&lt;a href='{{ sns_url }}'&gt;"+content[4]+"&lt;/a&gt;";
        images = [{"src":"{{ media_url }}images/newfeed/login.gif", "href":"{{ sns_url }}"}];
    } else if(feedType == "uplevel") { 
        title_name = ["", "，恭喜你华丽的升级了！"];
        content = ["","华丽丽的升级了！开启更多游戏奖励！","","","快去TA那看看"];
        body_data = "&lt;a href='{{ sns_url }}'&gt;"+content[4]+"&lt;/a&gt;";
        images = [{"src":"{{ media_url }}images/newfeed/uplevel.gif", "href":"{{ sns_url }}"}];
    } else if(feedType == "singlefish") {
        title_name = ["", "图鉴打开了！"];
        content = ["","打开了",val,"的图鉴，获得经验值！","看看我还缺什么。"];
        body_data = "&lt;a href='{{ sns_url }}'&gt;"+content[4]+"&lt;/a&gt;";
        images = [{"src":"{{ media_url }}images/newfeed/"+style+".gif", "href":"{{ sns_url }}"}];
    } else if(feedType == "upfish") {
        title_name = ["", "开启一枚"+val+"收藏图鉴！"];
        content = ["","",val,"的图鉴收藏又增加了!","什么图鉴?"];
        body_data = "&lt;a href='{{ sns_url }}'&gt;"+content[4]+"&lt;/a&gt;";
        images = [{"src":"{{ media_url }}images/newfeed/"+style+".gif", "href":"{{ sns_url }}"}];
    } else if(feedType == "allalmanac") {
        title_name = ["", "全部图鉴打开了！"];
        content = ["","开启了",val,"的全部图鉴，经验值加倍奖励，值得嘉奖哦！","我的哪些全开了。"];
        body_data = "&lt;a href='{{ sns_url }}'&gt;"+content[4]+"&lt;/a&gt;";
        images = [{"src":"{{ media_url }}images/newfeed/"+style+".gif", "href":"{{ sns_url }}"}];
    } else if(feedType == "synthesis") {
        title_name = ["合成开始了，", "需要大家的帮助！"];
        content = ["","的开始合成",val, "！成功率貌似不太高哦。","大家来帮忙！"];
        body_data = "&lt;a href='{{ sns_url }}?sns_id="+sns_id+"'&gt;"+content[4]+"&lt;/a&gt;";
        images = [{"src":"{{ media_url }}images/newfeed/"+style+".gif", "href":"{{ sns_url }}?sns_id="+sns_id}];
    } else if(feedType == "trollfish") {
        title_name = ["", "的鱼缸开钓啦！"];
        content = ["","的鱼缸新鲜开钓，快点快点，先到先得哦！","","","我要去钓！"];
        body_data = "&lt;a href='{{ sns_url }}?sns_id="+sns_id+"'&gt;"+content[4]+"&lt;/a&gt;";
        images = [{"src":"{{ media_url }}images/newfeed/trollfish.gif", "href":"{{ sns_url }}?sns_id="+sns_id}];
    } else if(feedType == "wtb") {
        title_name = ["", "下求购单，悬赏金额诱人哦！"];
        content = ["","重金求鱼，有意者速速联络！过期不候哦……","","","我要卖鱼！"];
        body_data = "&lt;a href='{{ sns_url }}?sns_id="+sns_id+"'&gt;"+content[4]+"&lt;/a&gt;";
        images = [{"src":"{{ media_url }}images/newfeed/"+style+".gif", "href":"{{ sns_url }}?sns_id="+sns_id}];
    } else if(feedType == "catchfish") {
        title_name = ["", "捉到"+val+"了！"];
        content = ["","不辞辛苦地捉到一条",val,"鱼，满心欢喜的带回小窝了。","捉的什么，我要看看！"];
        body_data = "&lt;a href='{{ sns_url }}'&gt;"+content[4]+"&lt;/a&gt;";
        images = [{"src":"{{ media_url }}images/newfeed/"+style+".gif", "href":"{{ sns_url }}"}];
    } else if(feedType == "play") {
        var title_array = {"2":["","成功闯出泡泡鱼“雌雄双煞”关卡！","1"], "3":["","成功闯出泡泡鱼“杜姆之巢”关卡！","2"], "4":["","成功闯出泡泡鱼“极地冰川”关卡！", "3"], "5":["","成功闯出泡泡鱼“潘多拉之森”关卡！", "4"], "6":["","成功闯出泡泡鱼“火海熔城”关卡！", "5"], "7":["","成功闯出泡泡鱼“下水管公主”关卡！", "6"], "1001":["","成功闯出泡泡鱼“PK嘉年华”关卡！", "1001"]};
        var contentArray= {"2":["打败野心澎湃的红皇后、胆小懦弱的绿国王，昔日皇族没落了。","踏着它们的躯体直入“杜牧之巢”。","","", "扫除障碍长驱直入！"], "3":["妄想统治海洋的笨蛋杜姆，指挥喽啰兵在洞穴操练。","趁其不备躲过喽啰擒住贼王，毫不费力闯出关卡！","","", "看看杜姆的蠢样子……"], "4":["那是寒冷的海底冰川，传说中可以自我分裂的影鲨住在哪里。为了验证传说，","勇闯极地冰川，终于……","","", "看到了影鲨的真面目……"], "5":["海底学校驻扎在这片色彩斑斓的海域，校长刺甲龙与往日温和的样子有着很大的不同，", "闯入森林深处打败恶魔，很快发现了真相……","","", "那不是一个人！"], "6":["火域萨麦尔的火焰内丹，将海域变成了火海。烈焰燃烧着，熔岩蔓延在周围，慢慢鱼儿变成了钢筋铁骨。","找到了制服萨麦尔的方法！","","", "悄悄地向它靠近……"], "7":["桃子公主闷闷不乐，期盼着帅气的水管工再次出现！可身体逐渐庞大卡在水管里再也出不来了！","灵机一动想到解救桃子公主的办法！","","","闯出下水管迷宫！"], "1001":["","的在PK嘉年华里转了一圈又一圈，抱着一大堆前所未见的稀有收藏鱼欢乐的回家了！","","","进嘉年华看看！"]};
        title_name = title_array[val];
        content = contentArray[val];
        img_val = title_name[2];
        body_data = "&lt;a href='{{ sns_url }}'&gt;"+content[4]+"&lt;/a&gt;";
        images = [{"src":"{{ media_url }}images/newfeed/boss_"+img_val+".gif", "href":"{{ sns_url }}"}];
    } else if(feedType == "open") {
        var title_array = {"1":["","打开了泡泡鱼“雌雄双煞”的关卡。"], "2":["","找到了泡泡鱼“杜牧之姆”的洞穴大门。"], "3":["","开启了泡泡鱼“极地冰川”的极寒海底世界。"], "4":["","推开了泡泡鱼“潘多拉之森”的远古大门。"], "5":["","打开了泡泡鱼新关卡“火海熔城”的海眼入口。"], "6":["","打开了泡泡鱼新关卡“下水管公主”的入口。"]};
        var contentArray= {"1":["一对落魄的夫妻，满腹重振皇族的野心。要强的红皇后，懦弱的绿国王……结局怎样？","","","","深海探秘第一关开启了。"], "2":["不管怎样的家伙都有梦想！笨蛋杜姆和忠心耿耿的喽啰兵每天都在洞穴操练，妄想一举进攻拿下海洋控制权，更名为杜姆海洋！嘘，它们操练了……","","","","去洞穴看看。"], "3":["多年前，鱼儿游进了一片陌生的极寒海域，目睹一条鲨鱼突然分身！吓的拔腿就跑。此后，那里成了神秘地带，鱼儿们都不敢靠近那里，关于那里的传说也越来越多……","","","","游进去看个究竟。"], "4":["海洋学校就建立在这片幽暗的森林深处，偶有洋流通过。鱼宝宝很害怕走这条路。若干年前，海洋学校的校长是条很和蔼的鱼，突然某一天一切都改变了！","","","","究竟发生了什么?"], "5":["火域之主萨麦尔的魔爪控制着一切，火焰内丹使这里熔岩蔓延，鱼儿的身体变成铜筋铁骨，海底的温度直线上升,末日到了……","","","","救世主在哪里……"], "6":["缺爱的桃子公主误闯了狭窄的海底下水管，一个帅气的水管工拯救了险些被碾碎的她，从此桃子公主待在那久久不愿离去……","","","","进入下水管迷宫！"]};
        title_name = title_array[val];
        content = contentArray[val];
        body_data = "&lt;a href='{{ sns_url }}'&gt;"+content[4]+"&lt;/a&gt;";
        images = [{"src":"{{ media_url }}images/newfeed/boss_"+val+".gif", "href":"{{ sns_url }}"}];
    } else {
        return;
    }
# 以上确定的变量有：title_name,content,body_data,images

只有在合成，开放钓鱼，求购的时候有title_1,title_2,content_1,content_2,content_3,content_4

    if(feedType=="synthesis" || feedType=="trollfish" || feedType=="wtb") {
        title_1 = "&lt;a href='{{ sns_url }}?sns_id="+sns_id+"'&gt;"+title_name[0]+"&lt;/a&gt;";
        title_2 = "&lt;a href='{{ sns_url }}?sns_id="+sns_id+"'&gt;"+title_name[1]+"&lt;/a&gt;";
        content_1 = "&lt;a href='{{ sns_url }}?sns_id="+sns_id+"'&gt;"+content[0]+"&lt;/a&gt;";
        content_2 = "&lt;a href='{{ sns_url }}?sns_id="+sns_id+"'&gt;"+content[1]+"&lt;/a&gt;";
        content_3 = "&lt;a href='{{ sns_url }}?sns_id="+sns_id+"'&gt;"+content[2]+"&lt;/a&gt;";
        content_4 = "&lt;a href='{{ sns_url }}?sns_id="+sns_id+"'&gt;"+content[3]+"&lt;/a&gt;";
    } else {
        title_1 = "&lt;a href='{{ sns_url }}'&gt;"+title_name[0]+"&lt;/a&gt;";
        title_2 = "&lt;a href='{{ sns_url }}'&gt;"+title_name[1]+"&lt;/a&gt;";
        content_1 = "&lt;a href='{{ sns_url }}'&gt;"+content[0]+"&lt;/a&gt;";
        content_2 = "&lt;a href='{{ sns_url }}'&gt;"+content[1]+"&lt;/a&gt;";
        content_3 = "&lt;a href='{{ sns_url }}'&gt;"+content[2]+"&lt;/a&gt;";
        content_4 = "&lt;a href='{{ sns_url }}'&gt;"+content[3]+"&lt;/a&gt;";
    }
    feedSettings= {"template_bundle_id":"1",
        "template_data":{
            "images":images,
            "t1":title_1,
            "t2":title_2,
            "c1":content_1,
            "c2":content_2,
            "c3":content_3,
            "c4":content_4
        },
    "body_general":body_data,
    "callback": feedCallback,
    "user_message_prompt": "随便写点什么吧"
    };
    &lt;!--
    以上就是人人的接口的问题，
    //--&gt;

    XN.Connect.showFeedDialog(feedSettings);
};
//--&gt;
&lt;/script&gt;
</t>
<t tx="newlife.20110214113902.1343">
&lt;script type="text/javascript"&gt;
&lt;!--
</t>
<t tx="newlife.20110214113902.1344">function feedCallback(val) {}
</t>
<t tx="newlife.20110214113902.1345">现在的情况是这样的，</t>
<t tx="newlife.20110214113902.1346">目标：目前处理的都是前台js发送信息的（这个是由对应的平台决定的）
     一个发布新鲜事的model
     最后决定是一定是生成js，原因你知道的。

问题：如何生成最后的链接：
     链接所需的数据：地址,参数，类型，
     随机新鲜事，
model:
    content
    title
    pic
    link
    sort --------&gt;这个分类是必须有的，分类决定啥？？
    date --------&gt;表明链接有效时间 
 
业务场景：
    
    登录：这个最简单了，没有啥，标准的内容，链接，
    士气：好友点击链接，降低估计对手的能力，这个可就复杂了，这个链接需要表明对手，记录点击次数，
    卡牌：
    龙窝位：好友点击链接，增加计数，到达一定数量，开启龙窝位，这个链接需要表明是这个任务，记录点击数。
    新手任务：依然要表明
    清理：这个好像是借东西用的。表明是什么任务，还要计数。  
    
    其他：
        求助,类似   士气.
        邀请，新手任务？？

        


更换新鲜事内容:

关于奖励限制:


</t>
<t tx="newlife.20110214113902.1347">目前最大的问题就是新鲜事的定义。
从统计学的角度描述就是新鲜事的类型不够，不能明确的定义这个东西。
以前的新鲜事里的链接相对比较简单，最多就是一个简单的地址，指向官网或者平台的游戏，
现在的问题，就是需要更加复杂的链接，这个链接的参数要由程序提供。

比如说，我需要发布一个新鲜事，需要好友为我加油（这个类似于开心的停车位那个游戏），
       这个时候我需要这个用户的id（这个ms需要去对方平台里找），这个时候还要判断这个用户是否开通这个游戏，
       </t>
<t tx="newlife.20110215113939.1354">新鲜事
1、 官网：玩家帐号如果与其他平台的帐号绑定或使用connect方式登录，在各新鲜事触发点会弹出发新鲜事的js窗口，用户点击后发到相应平台。

    其他平台，目前就是sina，未来的qq微博。
    这个connect是啥方式。

2、 平台：在各新鲜事触发点会弹出发新鲜事的js窗口，用户点击后发到相应平台（登录新鲜事为后台调用restAPI直接发送）。


3、 所有点击新鲜事接受奖励或帮助朋友的事件，
    同一条新鲜事每个用户只能触发一次，
    超过3天的新鲜事链接失效,
    

4、 每个用户每天作为新鲜事点击者获得奖励最多10次，----
    作为新鲜事发出者获得奖励最多5次。   


5、 用户点击新鲜事或接受好友帮助获得的奖励直接放入【礼物包】中。
    这个奖励的机制是怎么确定？？比如点击几次发礼物，接受帮助几次发礼物，发啥？？

6、 所有新鲜事见表19。</t>
<t tx="newlife.20110215113939.1357">用户点击链接，

实际的业务处理流程：
    1，在lgoin中执行;
    2，完成操作，
    3，判断条件，发奖励。

处理操作，
这个流程ms比想象的要复杂：或许要放到view实现。


结论：
    点击新鲜事者奖励可以放到model中记录，、
    发出新鲜事者，需要在view中实现


</t>
<t tx="newlife.20110215113939.1358">	任务新鲜事1	点击相关任务的【求助】按钮				发出新鲜事小窝的好友互助面板	
	任务新鲜事2	点击相关任务的【求助】按钮				发出新鲜事小窝的好友互助面板	
q:这个是做啥的？？
   这个和任务系统相关，待定， 
q:最后的新鲜事标记为灰色是什么意思？？
   正在完善中，未完成


q：链接有效期，求购，出售，这个应该是一直有效的。</t>
<t tx="newlife.20110215113939.1359">最终的链接:
链接是个复杂的事情，
   时效这个东西是后期处理的，要看这个属性放到什么地方。目前看来，链接这个东西要单独做个表，ms要放到链接上比较合适。
   
   现在就有一个问题了，这个平台的主题是啥，新鲜事？链接？   
   
必须拆出一个表来描述是谁点击了这个链接，所以这个操作必须在用户登录完成所做的操作，所以表19中所描述的发出者获得奖励所需条件



这个需要和前台沟通，传递参数，建立接口

</t>
<t tx="newlife.20110215113939.1360">#触发条件不做为属性放到model中，
class NewsFeed(models.Model):
    user  ----&gt;新鲜事发送者
    sort -----&gt;新鲜事分类(外键 Feed_Sort)    
    count_click -----&gt;这个数据来自于Click_Count中的数据统计，本来可以计算得出，计算方便
    date_created ------&gt;记录发布日期，计算有效期，
    valued ----&gt;  判断链接有效，判断基于事件的新鲜事，比如通关等等。
    num_reward -----&gt;  user获取奖励所需次数，和count_click做比较，发送奖励后设置is_valued为false，
    
    def is_valued(self):
        if self.value == True and now()- date_created &lt; 3day:
            return True
        else:
            return False
    def is_send(self):
        if valued == True and count_click&gt;num_reward:
            return True      




记录用户点击次数的model,Click_Count：

class Click_Count(models.Model):
    user----&gt;   哪个用户点击新鲜事链接。
    newsfeed-----&gt;   哪个新鲜事，
    date_created ------&gt;
    

    class Meta:
        unique_together = ("user","newsfeed")


class  Feed_Sort(models.Model):
    kind ----&gt;就是消息分类
    content1 ----&gt; 消息内容
    link1
    content2
    link2
    content2
    link3
    content3
    content4    
    pic----&gt;
    click_reward -------&gt; 点击用户获取的奖励
    send_reward ------&gt;发布新鲜事用户获取奖励


</t>
<t tx="newlife.20110215113939.1361">处理，伪码描述
   #处理点击用户奖励
   if Click_Count.get(user=user,feed=feed):
       pass
   else:
       send_click_reward(feed,user)
   #处理发送用户奖励
   if  feed.is_send():
       send_send_reward()
       feed.valued = False



</t>
<t tx="newlife.20110216113034.1366">@language xml
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20110216113034.1367">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
</t>
<t tx="newlife.20110216113034.1368">&lt;html xmlns="http://www.w3.org/1999/xhtml" xmlns:xn="http://www.renren.com/2009/xnml"&gt;
@others
&lt;/html&gt;
</t>
<t tx="newlife.20110216113034.1369">&lt;head&gt;
&lt;style&gt;
.menuxn0{ width:790px; height:42px; overflow:hidden;padding-top:5px; font-size:12px; padding-left:13px; }
.menuxn0 img{margin:0px 0px 0px 0px; border: medium none;}
.menuxn0 div{margin:4px 11px 4px 4px; overflow:hidden;}
.menuxn1{ float:left; height:33px; overflow:hidden; width:79px; padding-right:3px;}
.menuxn2{ float:left;  height:33px; overflow:hidden; width:79px; padding-right:3px;}
.menuxn3{ float:left;  height:33px; overflow:hidden; width:79px; padding-right:3px;}
.menuxn4{ float:left; height:33px; width:79px; background:url({{ media_url }}images/xinxi.gif) no-repeat ; overflow:hidden;}
.menuxn5{ float:left; height:33px; overflow:hidden; width:87px; padding-right:3px;}
.menuxn6{ float:left; height:33px; overflow:hidden; width:79px; padding-right:3px;}
.menuxn7{ float:left; height:33px; overflow:hidden; width:79px; padding-right:3px;}
.menuxn8{ float:left; height:33px; overflow:hidden; width:79px; padding-right:3px;}
.menuxn9{ float:left; height:33px; overflow:hidden; width:79px; padding-right:3px;}
.menuxn210{ padding-left:8px; padding-top:8px;}
.menuxn213{ padding-left:5px; padding-top:8px;}
.menuxn214{padding-left:21px; padding-top:8px;}
#scrollBox { float:left; width:405px; height:20px; line-height:20px; overflow:hidden; margin-left:0px;  padding-left:10px;margin-top:5px; }
&lt;/style&gt;

&lt;script type="text/javascript" src="http://static.connect.renren.com/js/v1.0/FeatureLoader.jsp"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
  XN_RequireFeatures(["EXNML"], function()
  {
    XN.Main.init("51632e54302f4796aa4eb73236e39b6f", "http://xiaonei.paopaoyu.cn/xd_receiver.html");
  });
&lt;/script&gt;

&lt;/head&gt;
</t>
<t tx="newlife.20110216113034.1370">&lt;body&gt;
@others
&lt;iframe scrolling="no" frameborder="0" src="http://www.connect.renren.com/widget/liveWidget?api_key=51632e54302f4796aa4eb73236e39b6f&amp;xid=default&amp;desp=%E5%A4%A7%E5%AE%B6%E6%9D%A5%E8%AE%A8%E8%AE%BA" style="width: 760px;height: 400px;"&gt;&lt;/iframe&gt;
&lt;/div&gt;

{% include "sns/renren_feeds.js" %}

&lt;/body&gt;
</t>
<t tx="newlife.20110216113034.1371">&lt;div class="menuxn0"&gt;
    @others
</t>
<t tx="newlife.20110216113034.1372">&lt;div class="menuxn3"&gt;
    &lt;a href="{{ sns_url }}/recharge/" target="_blank" &gt;
        &lt;img src="{{ media_url }}images/chzh-small.jpg" onmouseover="this.src='{{ media_url }}images/chzh.jpg'" onmouseout="this.src='{{ media_url }}images/chzh-small.jpg'" /&gt;
    &lt;/a&gt;
&lt;/div&gt;
</t>
<t tx="newlife.20110216113034.1373">&lt;div class="menuxn6"&gt;
    &lt;a href="http://page.renren.com/paopaoyu" target="_blank" &gt;
        &lt;img src="{{ media_url }}images/fx-small.jpg" onmouseover="this.src='{{ media_url }}images/fx.jpg'" onmouseout="this.src='{{ media_url }}images/fx-small.jpg'" /&gt;
    &lt;/a&gt;
&lt;/div&gt;
</t>
<t tx="newlife.20110216113034.1374">&lt;div class="menuxn2"&gt;
    &lt;a href="{{ sns_url }}/invite/isinfo/" target="_blank" &gt;
        &lt;img src="{{ media_url }}images/yq-small.jpg" onmouseover="this.src='{{ media_url }}images/yq.jpg'" onmouseout="this.src='{{ media_url }}images/yq-small.jpg'" /&gt;
      &lt;/a&gt;
  &lt;/div&gt;
</t>
<t tx="newlife.20110216113034.1375">&lt;div class="menuxn8"&gt;
    &lt;a href="{{sns_url}}/lucky/" target="_blank" &gt;
        &lt;img src="{{ media_url }}images/jf-small.jpg" onmouseover="this.src='{{ media_url }}images/jf.jpg'" onmouseout="this.src='{{ media_url }}images/jf-small.jpg'" /&gt;
    &lt;/a&gt;
&lt;/div&gt;
</t>
<t tx="newlife.20110216113034.1376">&lt;div class="menuxn1"&gt;
    &lt;a href="http://group.renren.com/GetTribe.do?id=283371586" target="_blank"&gt;
        &lt;img src="{{ media_url }}images/lt-small.jpg" onmouseover="this.src='{{ media_url }}images/lt.jpg'" onmouseout="this.src='{{ media_url }}images/lt-small.jpg'" /&gt;
    &lt;/a&gt;
&lt;/div&gt;
</t>
<t tx="newlife.20110216113034.1377">&lt;div class="menuxn5"&gt;
    &lt;a href="http://group.renren.com/GetThread.do?id=330586086&amp;parentpage=0&amp;curpage=0&amp;label=&amp;tribeId=283371586" target="_blank" &gt;
        &lt;img src="{{ media_url }}images/shjb-small.jpg" onmouseover="this.src='{{ media_url }}images/shjb.jpg'" onmouseout="this.src='{{ media_url }}images/shjb-small.jpg'" /&gt;
    &lt;/a&gt;
&lt;/div&gt;
</t>
<t tx="newlife.20110216113034.1378">&lt;div class="menuxn9"&gt;
    &lt;a href="{{sns_url}}/fansgift/?xn_sig_session_key={{ skey }}" target="_blank" &gt;
        &lt;img src="{{ media_url }}images/fans-small.jpg" onmouseover="this.src='{{ media_url }}images/fans.jpg'" onmouseout="this.src='{{ media_url }}images/fans-small.jpg'" /&gt;
    &lt;/a&gt;
&lt;/div&gt;
</t>
<t tx="newlife.20110216113034.1379">&lt;div class="menuxn7"&gt;
    &lt;a href="http://kf.raytoon.cn/maine.htm" target="_blank" &gt;
        &lt;img src="{{ media_url }}images/bzh-small.jpg" onmouseover="this.src='{{ media_url }}images/bzh.jpg'" onmouseout="this.src='{{ media_url }}images/bzh-small.jpg'" /&gt;
    &lt;/a&gt;
&lt;/div&gt;
</t>
<t tx="newlife.20110216113034.1380">&lt;/div&gt;

&lt;div id="flash_div" style="margin:0 auto; width:756px;"&gt;
  &lt;object id='forIE' classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=7,0,19,0" width="756" height="640"&gt;
      &lt;param name="movie" value="{{ media_url }}swf/v20/gameMain.swf"/&gt;
      &lt;param name="flashVars" value="skey={{ skey }}&amp;sns=renren&amp;feed_fun=sendUserFeed&amp;snsid={{ sns_id }}"/&gt;
      &lt;param name="wmode" value="window" /&gt;
      &lt;param name="quality" value="high" /&gt;
      &lt;param name="allowScriptAccess" value="always" /&gt;
      &lt;embed name="forIE" src="{{ media_url }}swf/v20/gameMain.swf" width="756" height="640" quality="high" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" wmode="window" flashVars="skey={{ skey }}&amp;sns=renren&amp;feed_fun=sendUserFeed&amp;snsid={{ sns_id }}" allowScriptAccess="always" &gt;&lt;/embed&gt;
  &lt;/object&gt;
&lt;/div&gt;
</t>
<t tx="newlife.20110216113034.1381">&lt;!--
&lt;DIV style=" width:791px; height:100px; margin:auto; margin-top:10PX;"&gt;
&lt;DIV style="width:591px; height:100px;  float:left;"&gt;&lt;a  href="http://kf.raytoon.cn/" target="_blank" &gt;&lt;img class="star" src="{{ media_url }}images/forth_stage.gif" /&gt;&lt;/a&gt;&lt;/DIV&gt;
&lt;DIV style="width:200px; height:100px;  float:left;"&gt;&lt;a  href="http://group.renren.com/GetThread.do?id=329592190&amp;parentpage=&amp;curpage=0&amp;label=758397&amp;tribeId=283371586" target="_blank" &gt;&lt;img class="star" src="{{ media_url }}images/zhaopin02.jpg" /&gt;&lt;/a&gt;&lt;/DIV&gt;
&lt;/DIV&gt;

&lt;DIV style=" width:800px; height:100px; margin:auto; margin-top:10PX;"&gt;
    &lt;DIV style="width:800px; height:100px; float:left;"&gt;
        &lt;a href="http://track.yx.renren.com/statmop/dfa1?dfaid=4751" target="_blank" &gt;
            &lt;img class="star" src="http://60.29.241.40/xiaonei_media/images/mengniu_ads.jpg" /&gt;
        &lt;/a&gt;
    &lt;/DIV&gt;
&lt;/DIV&gt;
--&gt;
&lt;div style="width:760px; height:580px; padding-top:7px; overflow:hidden; margin:auto; "&gt;
  @others
</t>
<t tx="newlife.20110216113034.1382">&lt;div style="float:left"&gt;
  &lt;a href="http://page.renren.com/699025049/note/708402900?ref=minifeed&amp;sfet=2012&amp;fin=0&amp;ff_id=699025049&amp;feed=page_blog&amp;tagid=708402900" target="_blank"&gt;
    &lt;img src="http://60.29.241.40/xiaonei_media/images/gg04.jpg" border="0" width="620" height="90" /&gt;
  &lt;/a&gt;
&lt;/div&gt;
</t>
<t tx="newlife.20110216113034.1383">&lt;div style="float:left"&gt;
  &lt;a href="http://page.renren.com/paopaoyu/index" target="_blank"&gt;
    &lt;img src="http://60.29.241.40/xiaonei_media/images/gg03.jpg" border="0" width="140" height="90" /&gt;
  &lt;/a&gt;
&lt;/div&gt;
</t>
<t tx="newlife.20110217105337.1402">一切都是为了性能。
这个东西要看悟性啊，

充分利用url的优势，减少数据库操作。
@##寻找新鲜事各个field的最大值##，
组建model


用一个表来描述新鲜事，
日志文件：
    记录谁click，
    md5值作为key，
    新鲜事
    uid
    
    
核心的问题####

人人字段；

title_1,title_2,content_1,content_2,content_3,content_4

生成的链接参数包括：
uid：新鲜事的发送者，
time_stamp:时间戳，
feed_type新鲜事种类，表明返回后如何处理，就是确定callback，
sig_code,根据以上值生成的验证码，防止fake url


新鲜事的发送者，作为url的一部分传递，



</t>
<t tx="newlife.20110217105337.1405">下面强势分析这个文件，分析出其中的模板需要的字段：
</t>
<t tx="newlife.20110217105337.1406">md5的使用：

根据字段生成md5值作为记录的key，而且这个值是放缓存里的。


减少数据库操作。</t>
<t tx="newlife.20110218115009.1408">&lt;p style="margin-left:0px;"&gt;

&lt;a href="http://www.connect.renren.com/redirect?type=originStatis&amp;app_id=25049&amp;origin=3421&amp;url=http%3A%2F%2Fapps.renren.com%2Fpaopaoyu" target="_blank"&gt;巨大的章鱼那双小眼睛在泡泡鱼海底环顾了一圈，盯上了正在潜水的&lt;/a&gt;
&lt;a href="http://www.connect.renren.com/redirect?type=originStatis&amp;app_id=25049&amp;origin=3421&amp;url=http%3A%2F%2Fwww.renren.com%2Fprofile.do%3Fid%3D32531172" target="_blank"&gt;张磊&lt;/a&gt;
&lt;a href="http://www.connect.renren.com/redirect?type=originStatis&amp;app_id=25049&amp;origin=3421&amp;url=http%3A%2F%2Fapps.renren.com%2Fpaopaoyu" target="_blank"&gt;&amp;hellip;&amp;hellip;&lt;/a&gt;
&lt;a href="http://www.connect.renren.com/redirect?type=originStatis&amp;app_id=25049&amp;origin=3421&amp;url=http%3A%2F%2Fapps.renren.com%2Fpaopaoyu" target="_blank"&gt;&lt;/a&gt;
&lt;a href="http://www.connect.renren.com/redirect?type=originStatis&amp;app_id=25049&amp;origin=3421&amp;url=http%3A%2F%2Fapps.renren.com%2Fpaopaoyu" target="_blank"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.connect.renren.com/redirect?type=originStatis&amp;app_id=25049&amp;origin=3421&amp;url=http%3A%2F%2Fapps.renren.com%2Fpaopaoyu" target="_blank"&gt;前去帮忙&lt;/a&gt;

&lt;/p&gt;

&lt;p style="color:#515151;margin:0 0 5px 0px;"&gt;
&lt;a href="http://www.connect.renren.com/redirect?type=originStatis&amp;app_id=25049&amp;origin=3420&amp;url=http%3A%2F%2Fapps.renren.com%2Fpaopaoyu" target="_blank"&gt;&lt;/a&gt;
&lt;a href="http://www.connect.renren.com/redirect?type=originStatis&amp;app_id=25049&amp;origin=3420&amp;url=http%3A%2F%2Fwww.renren.com%2Fprofile.do%3Fid%3D32531172" target="_blank"&gt;张磊&lt;/a&gt;
&lt;a href="http://www.connect.renren.com/redirect?type=originStatis&amp;app_id=25049&amp;origin=3420&amp;url=http%3A%2F%2Fapps.renren.com%2Fpaopaoyu" target="_blank"&gt;进入了泡泡鱼游戏，玩的不亦乐乎。&lt;/a&gt;&lt;img src="http://app.renren.com/statistics/feedStatistics/?appId=25049&amp;type=connect_custom" height="1" width="1"&gt;&lt;/p&gt;

</t>
<t tx="newlife.20110218115009.1409"></t>
<t tx="newlife.20110218115009.1410">#! /usr/bin/env python
#coding=utf-8

from django.db import models
 
class FeedLog(models.Model):
    feed = models.ForeignKey('Feed')
    sender = models.IntegerField()
    clicker = models.IntegerField()
    num_reward = models.IntegerField()
    valued = models.BooleanField()
    date_created = models.DateTimeField()
    date_click = models.DateTimeField(auto_now=True)    
    

FEED_TYPE = (
        (1,u'召唤清理'),
        (1,u'开图鉴'),
        (1,u'开全套图鉴'),
        (1,u'闯过第一大关'),
        (1,u'升级'),
        (1,u'请求派遣帮助'),
        (1,u'登录'),
        (1,u'请求削弱BOSS的道具牌'),
        (1,u'请求强力扫帚'),
        (1,u'请求战斗号角'),
        (1,u'邀请好友'),
    )    
class Feed(models.Model):
    kind = models.CharField(max_length = 50,choice = FEED_TYPE)#新鲜事分类
    content1 = models.CharField(max_length = 200)
    content4 = models.CharField(max_length = 200)
    content4 = models.CharField(max_length = 200)
    content4 = models.CharField(max_length = 200)
    link1 = models.CharField(max_length = 200)
    link2 = models.CharField(max_length = 200)
    pic = models.ImageField(uploade_to = "")
    click_reward = models.CharField(max_length = 100)
    send_reward = models.CharField(max_length = 200)
    num_reward = models.IntegerField()
    
    
    
    
    
</t>
<t tx="newlife.20110218115009.1411">相信自己可以做出来的。
用户发送

关于新鲜事分类：
    第一类，用户控制，主动发送，比如求助，
    第二类，系统控制，检测发送，比如登录，


这个用户发送新鲜事如何限制；

当满足发送新鲜事的条件时，调用接口，

接口是啥样的？？


诶鸭，，，，我迷茫了，，，
要一个统一的接口，

我要发送，发送的内容要确定，从feedCategory中来，但是官网和人人的就有问题了，现在这俩还是主要的，







    
    

</t>
<t tx="newlife.20110218115009.1412">定义的新鲜是的链接：

http://paopaoyu.com/handle_feed/?feed=3423&amp;sig=hjkhfjkhjkhjkh


接受的参数：

用户点击新鲜事：

这个应该有单独的函数处理：
    首先登录，获取用户id，
    获取新鲜事，
    判断点击是否有效，
    进行相应处理，具体就是：
        1，计数，
        2，给点击者发奖励，
        3，判断发送者奖励，
        4，返回游戏首页，弹出提示信息。    






</t>
<t tx="newlife.20110221101214.1418"></t>
<t tx="newlife.20110221101214.1419"></t>
<t tx="newlife.20110221101214.1420"># -*- coding: utf-8 -*-
from sns_api import *
from apps.members.cache import *
from apps.sns.constants import FEED_LOGIN_163, FEED_PLAY_163, FEED_STAGE_163
import random

</t>
<t tx="newlife.20110221101214.1421">def send_rank_feed(session_key, rank):
    try:
        template_id = '49002'
        body_data = {"REF_JXB.SRC":"http://dream.163.com/home#apppaopaoyu",
                     "REF_JXB.TXT":u"极限榜","rank":rank}

        return send_app_feed(session_key, template_id, body_data)
    except:
        pass


</t>
<t tx="newlife.20110221101214.1422">def send_troll_feed(session_key, owner_id, price, fishname):
    try:
        fishname = fishname.encode('utf-8')
        template_id = '49003'
        body_data = {"price":int(price),"owner_id":owner_id,"fishname":fishname,
                     "REF_PPY.SRC":"http://dream.163.com/home#apppaopaoyu",
                     "REF_PPY.TXT":u"去泡泡鱼看热闹!"}

        return send_app_feed(session_key, template_id, body_data)
    except:
        pass


</t>
<t tx="newlife.20110221101214.1423">def send_submarine_feed(session_key, fishname):
    try:
        fishname = fishname.encode('utf-8')
        template_id = '49004'
        body_data = {"REF_KQK.SRC":"http://dream.163.com/home#apppaopaoyu",
                     "REF_KQK.TXT":u"快去看看","fishname":fishname} 

        return send_app_feed(session_key, template_id, body_data)
    except:
        pass


</t>
<t tx="newlife.20110221101214.1424">def send_catchfish_feed(session_key, fishname):
    try:
        fishname = fishname.encode('utf-8')
        template_id = '49005'
        body_data = {"fishname":fishname}

        return send_app_feed(session_key, template_id, body_data)
    except:
        pass


</t>
<t tx="newlife.20110221101214.1425">def send_steal_notif(session_key, thief_id, owner_id, sns_url):
    try:
        notification = '你的朋友&lt;ms:name uid="%s" linked="true"/&gt;趁你不在悄悄捞走了你的鱼，坏笑着溜走了。&lt;a href="%s"&gt;去TA家收鱼！&lt;/a&gt;' % (thief_id, sns_url)
        to_ids = '%s' % owner_id
        return send_app_notif(session_key, to_ids, notification)
    except:
        pass


</t>
<t tx="newlife.20110221101214.1426">def send_shock_notif(session_key, thief_id, owner_id, sns_url):
    try:
        notification = '&lt;ms:name uid="%s" linked="true"/&gt;不怀好意地“电”了你精心饲养的鱼，心满意足地拿着贝壳跑了。&lt;a href="%s"&gt;登门报复！&lt;/a&gt;' % (thief_id, sns_url)
        to_ids = '%s' % owner_id
        return send_app_notif(session_key, to_ids, notification)
    except:
        pass


</t>
<t tx="newlife.20110221101214.1427">def send_openStage_feed(session_key, stage=5):
    try:
        template_id = '52002'

        body_data = {"title":FEED_STAGE_163[stage][0],"content":FEED_STAGE_163[stage][1],
                     "REF_PPY.SRC":"http://dream.163.com/home#apppaopaoyu",
                     "REF_PPY.TXT":FEED_STAGE_163[stage][2]}

        return send_app_feed(session_key, template_id, body_data)
    except:
        pass


</t>
<t tx="newlife.20110221101214.1428">#这个是发自动信息的，就是用户登录的时候发的。
#注意参数：body_data（dict）包含：t1,t2,c1,c2,REF_PPY.SRC,REF_PPY.TXT,
#
def send_feed_auto(session_key, type, val='1'):
    try:
        template_id = '53001'
        if type == 'append':            
            body_data = {"t1":"", "t2":u"加入了泡泡海洋族群！", "c1":u"好奇心鼓动着", "c2":u"开始了泡泡海洋之旅，新手入海，热烈欢迎！",
                         "REF_PPY.SRC":"http://dream.163.com/home#apppaopaoyu",
                         "REF_PPY.TXT":u"前去支持一下！"}
        if type == 'login':
            rd = random.randint(0, 7)
            body_data = {"t1":"", "t2":u"进入了泡泡鱼游戏，玩的不亦乐乎。", "c1":FEED_LOGIN_163[rd][0], "c2":FEED_LOGIN_163[rd][1], 
                         "REF_PPY.SRC":"http://dream.163.com/home#apppaopaoyu","REF_PPY.TXT":FEED_LOGIN_163[rd][2]}
        if type == 'play':
            body_data = {"t1":"", "t2":FEED_PLAY_163[val][0], "c1":FEED_PLAY_163[val][1],"c2":FEED_PLAY_163[val][2],
                         "REF_PPY.SRC":"http://dream.163.com/home#apppaopaoyu","REF_PPY.TXT":FEED_LOGIN_163[val][3]}

        return send_app_feed(session_key, template_id, body_data)
    except:
        pass    


</t>
<t tx="newlife.20110221101214.1429"></t>
<t tx="newlife.20110221101214.1430"># -*- coding: utf-8 -*-
from datetime import datetime
from django.utils import simplejson
from django.conf import settings

import hashlib
import logging
from opensocial import *
from django.utils import simplejson

#import settings_163


SESSION_KEY_WY = '*-*'

</t>
<t tx="newlife.20110221101214.1431">def _generate_wangyi_base_params():
    params = {}
    params['oauth_consumer_key'] = settings.SNS_API_KEY
    params['server_rest_base'] = settings.SNS_API_REST_SERVER
    params['server_rpc_base'] = settings.SERVER_RPC_BASE
    params['oauth_consumer_secret'] = settings.SNS_SECRET_KEY
    return params

</t>
<t tx="newlife.20110221101214.1432">def _resolve__wangyisession_key(session_key):
    params_list = session_key.split(SESSION_KEY_WY)
    security_token = params_list[0]
    viewerId = params_list[1]

    return security_token, viewerId


</t>
<t tx="newlife.20110221101214.1433">#建立连接：
#cviewId是当前登陆客户的访问ID,
def get_container(security_token,viewerId):
        # 设置API Key和secret Key
        params = _generate_wangyi_base_params()
        config = ContainerConfig(oauth_consumer_key=params['oauth_consumer_key'],
        oauth_consumer_secret=params['oauth_consumer_secret'],
#       rpc是js客户端发的请求，  rest是服务端接口 
        server_rest_base= params['server_rest_base'],
        server_rpc_base= params['server_rpc_base'],
#        应用上线时由平台传入token，开发人员直接从request.Parameter("st")获得由get方式获得
        security_token=security_token,
#        viewerId  应用上线时由平台传入登录用户ID 
        viewerId=viewerId)
        return ContainerContext(config)


</t>
<t tx="newlife.20110221101214.1434">def get_sns_id(session_key): 
#    try:
         security_token, viewerId=_resolve__wangyisession_key(session_key)
         user_id=viewerId
         container = get_container(security_token,viewerId)
         batch = RequestBatch()
         batch.add_request('yanzheng', request.FetchPersonRequest(user_id))
         batch.send(container)
         friends = batch.get('yanzheng')
         if friends==-1:
             return -1
         else:
             return user_id 
</t>
<t tx="newlife.20110221101214.1435">#    except:
#         return 'SNS_API_ERROR'


# 获取个人信息
def get_sns_user(session_key, sns_id, fields='name,headurl'):
#    try:
        security_token, viewerId=_resolve__wangyisession_key(session_key)
        container = get_container(security_token,viewerId)
        batch = RequestBatch()
        user_id=sns_id
        batch.add_request('accountInfo', request.FetchPersonRequest(user_id))
        batch.send(container)
        accountInfo = batch.get('accountInfo') 
    #   包含的信息。 
    #displayName,addresses ,avatarUrl,gender,age,autopageUrl,photos,birthday,accounts,thumbnailUrl,id ,name 
    #返回的结果是个字典，键是用户的属性，值是用户信息
        return accountInfo.get_field('displayName'), accountInfo.get_field('thumbnailUrl')
</t>
<t tx="newlife.20110221101214.1436">#    except:
#        return 'SNS_API_ERROR'




#获取好友列表信息
def get_app_friends(session_key):
#    try:
         security_token, viewerId=_resolve__wangyisession_key(session_key)
         container = get_container(security_token,viewerId)
         batch = RequestBatch()

         batch.add_request('friends', request.FetchPeopleRequest(viewerId, '@friends',fields='id'))
         batch.send(container)
         friends = batch.get('friends')
         result=[]
         if  friends.totalResults == 0:
             pass
         else:
             for ff in friends:
                 result.append(ff.get_field('id'))
# {"startIndex":0,"totalResults":2,"status":"ok","entry":[{"age":0,"hasApp":false,"utcOffset":0,"id":"1216039",
#"thumbnailUrl":"http://blog.163.com/style/common/user_default_small.gif",
#"name":{"familyName":"拖鞋妹","givenName":"qatest12"},
#"accounts":[{"username":"qatest12","userId":"1216039","domain":"163.com"}],
#"urls":[{"type":"profile"}],"photos":[{"value":"http://blog.163.com/style/common/user_default_small.gif","type":"thumbnail"}],
#"displayName":"拖鞋妹"},{"age":0,"hasApp":false,"utcOffset":0,"id":"970865",
#"thumbnailUrl":"http://blog.163.com/style/common/user_default_small.gif",
#"name":{"familyName":"qatest6","givenName":"qatest6"},
#"accounts":[{"username":"qatest6","userId":"970865","domain":"163.com"}],
#"urls":[{"type":"profile"}],
#"photos":[{"value":"http://blog.163.com/style/common/user_default_small.gif",
#"type":"thumbnail"}],"displayName":"qatest6"}]}

         return result
</t>
<t tx="newlife.20110221101214.1437">#    except:
#         'SNS_API_ERROR'
#         
#判断是否是好友关系
def get_are_friends(session_key, uids1, uids2): 
    try:   
        security_token, viewerId=_resolve__wangyisession_key(session_key)
        container = get_container(security_token,viewerId)
        batch = RequestBatch()
    #   data为自定义的消息，json格式 
    #   Pairs 好友关系对   判断两个人是不是好友 
        data = {"pairs":[{"first":uids1,"second":uids2}]}
        batch.add_request('arefriends', request.FetchRelationshipRequest(viewerId,'@self/@app',body=data))
        batch.send(container) 
        arefriends = batch.get('arefriends')
    #   返回结果 {"startIndex":0,"totalResults":2,"status":"ok","entry":[0,1]}
    #   0不是好友，1是好友
    #   fields 是得到返回结果entry，它是个list。 
        fields = arefriends['entry']
        if fields[0]==1:
                return True
        else:
                return False
    except:
       return False

</t>
<t tx="newlife.20110221101214.1438">#发送好友新鲜事
def send_app_feed(session_key, template_id, body_data):
    try:
        security_token, viewerId=_resolve__wangyisession_key(session_key)
        container = get_container(security_token,viewerId)
        batch = RequestBatch()
    #  消息体内的模板参数值templateParams
    #   data为自定义的消息，json格式 
    #   模板ID和变量game必须设置
        data ={"titleId":template_id,"templateParams":body_data}
    #   指定新鲜事接收人的发送示例
    #   data = {"titleId":1001,"templateParams":{"game":decode("来玩泡泡鱼")},"receiverIds":["776266","14032"]}
        batch.add_request('activity', request.FetchActivityRequest(viewerId,'@self/@app',body=data))
    #  发送成功是true，失败是false 
        batch.send(container)
        activity = batch.get('activity') 
        if  activity['status']=='ok':
            return 1
        else:
            return -1
    except:
        return 'SNS_API_ERROR'


</t>
<t tx="newlife.20110221101214.1439">#  发送组件消息也就是创建应用通知 
#  在使用本接口时请先为应用创建消息模板 ,并在此处设置消息模板的id，titleId就是为应用创建的消息模板的模板id，目前消息接口仅支持Notification（通知）类型的消息。
def send_app_notif(session_key, to_ids, notification):
#    try:
        security_token, viewerId=_resolve__wangyisession_key(session_key)
        container = get_container(security_token,viewerId)
        batch = RequestBatch()
    #    Create a message titleId必须和bodyId相同
        data = {"templateParams":{"game":notification},"id" : "gsgs","recipients" : [to_ids],"sender" : { "id" : viewerId},"titleId" : "41003","bodyId" : "41003","type" : "notification"}
    #  JSON格式的请求体
    #{"id" : "http://example.org/inbox/message/msgid",
    #"recipients" : ["776266", "14032"],
    #"sender" : { "id" : "776266" },
    #"titleId" : "66008",
    #"type" : "notification",
    #"appUrl" : "100",
    #"templateParams" : {"game":"你好吗"}}
        batch.add_request('messages', request.FetchMessagesRequest(viewerId,'@outbox',body=data))
        batch.send(container) 
        messagess = batch.get('messages')
#        return messagess
        if messagess==-1:
            return 'SNS_API_ERROR'
        fields = messagess['status']
        if fields=='ok':
            return 1
        else:
            return -1
</t>
<t tx="newlife.20110221101214.1440">#    except:
#        return 'SNS_API_ERROR'


#支付平台账户余额   
def fetch_ebaccount_request(session_key):    
    security_token, viewerId=_resolve__wangyisession_key(session_key)
    container = get_container(security_token,viewerId)
    batch = RequestBatch() 
#    data参数类型 type 请求类型
#    data采用json格式的请求类型 type ： 是否为正式接口调用，true表示调用正式接口，false表示调用测试接口 
    data = {'type':'true'}
    batch.add_request('getEbAccount', request.FetchEbAccountRequest(viewerId,body=data))
    batch.send(container) 
    getEbaccount = batch.get('getEbAccount') 
#   返回结果  {"status":"ok","entry":1.0} 
    return getEbaccount['entry']




</t>
<t tx="newlife.20110221101214.1441">def pay_reg_order(session_key, order_id, amount, desc):
    pass


</t>
<t tx="newlife.20110221101214.1442">def pay_is_complete(order_id):
    pass

</t>
<t tx="newlife.20110221101214.1443">#加好友请求
#我查找好友的时候能不能把我邮箱里的好友给列出来，然后邀请他们
#sailor 说:
# 可以的，你的应用加个参数跳转到http://dream.163.com/home/#invite%3F_tjfrom=1这个页面后，再发送就可以了 
def add_friends(user_id,friends_id,data):
    container = get_container()
    batch = RequestBatch()
#   friends_id是字符串 
#    data={"body":"hello".decode("utf-8")}
    #添加请求，并设置返回数据并用的字段
    batch.add_request('me', request.FetchCreateRelationRequest(user_id,'@friends',friends_id,body=data))

    batch.send(container) 
    #获取结果数据
    me = batch.get('me')
    return me

</t>
<t tx="newlife.20110221101214.1444">#查询应用订单
def fetch_app_order_record_request (user_id,data):   
     container = get_container()
     batch = RequestBatch()
#    data参数类型 type 请求类型,开始时间，结束时间 
#    data采用json格式的请求类型 type ： 是否为正式接口调用，true表示调用正式接口，false表示调用测试接口 
#    data = {'beginTime':'201004','endTime':'201005','type':'true'}
#    FetchAppOrderRecordRequest 调用方法
     batch.add_request('appOrderRecord', request.FetchAppOrderRecordRequest(user_id,body=data))
     batch.send(container) 
     appOrderRecord = batch.get('appOrderRecord')
#返回结果 {"status":"ok","entry":"\u003c?xml version=\"1.0\" encoding=\"GBK\"?cuserName\u003elov3-mm\u003c/userName\u003e\r\n\t\t\t\u003cdetails\u003e购买了1 个 芙蓉之吻 “}
     return appOrderRecord['entry']




</t>
<t tx="newlife.20110221101214.1445">#得到道具列表    
def  fetch_libaryItemStatus_request (user_id,data):
    container = get_container()
    batch = RequestBatch() 
#    data采用json格式的请求类型 type ： 是否为正式接口调用，true表示调用正式接口，false表示调用测试接口 
#    data = {'type':'true'}
    batch.add_request('libaryItem', request.FetchLibaryItemStatusRequest(user_id,body=data))
    batch.send(container) 
    getlibaryItem = batch.get('libaryItem') 
#   返回结果  {"status":"ok","entry":1.0} 
    return getlibaryItem ['entry']


</t>
<t tx="newlife.20110221101214.1446">#用户名关键词检查 
def fetch_checkUserName_request(user_id,data):
    container = get_container()
    batch = RequestBatch()

#    data = {"content":"小黑"}
    batch.add_request('checkUserName', request.FetchNeteaseCheckUserNameRequest(user_id,body=data))
    batch.send(container) 
    checkUserName = batch.get('checkUserName')
#   {"status":"ok","entry":false}
#   entry内的值为false表示提交的用户名称包含非法关键词，true表示提交的用户名称通过了关键词校验
    return  checkUserName

</t>
<t tx="newlife.20110221101214.1447">#内容关键词检查
def fetch_checkContent_request(user_id,data):
    container = get_container()
    batch = RequestBatch()

#   参数格式 data = {"content":'小黑'}
    batch.add_request('checkContnet', request.FetchNeteaseCheckContentRequest(user_id,body=data))
    batch.send(container) 
    checkContnet = batch.get('checkContnet')
#   {"status":"ok","entry":false}
#   entry内的值为false表示提交的用户名称包含非法关键词，true表示提交的用户名称通过了关键词校验
    return  checkContnet

</t>
<t tx="newlife.20110221101214.1448"># 所有用户组列表
def fetch_neteaseGroups_request(user_id):
    container =get_container()
    batch = RequestBatch()
    batch.add_request('getGroups', request.FetchNeteaseGroupsRequest(user_id))
    batch.send(container) 
    getGroups = batch.get('getGroups')
#   返回结果是json： {"startIndex":0,"totalResults":2,"status":"ok","entry":[{"id":{"groupId":"xxxx","type":"groupId"},"title":"未分组"},{"id":{"groupId":"xxxx","type":"groupId"},"title":"同事"}]} 
    return getGroups['entry']

</t>
<t tx="newlife.20110221101214.1449"># 得到指定的用户组列表
def fetch_neteaseGroups_withId(user_id,group_id):
    container = get_container()
    batch = RequestBatch()
    batch.add_request('getGroupsWithId', request.FetchNeteaseGroupsRequest(user_id,group_id=group_id))
    batch.send(container) 
    getGroupsWithId = batch.get('getGroupsWithId')
#    getGroupsWithId ='[{"startIndex":0,"totalResults":2,"status":"ok"},{"entry":[{"id":{"groupId":"xxxx","type":"groupId"},"title":"未分组"},{"id":{"groupId":"xxxx","type":"groupId"},"title":"同事"}]}]'
#    ll= batch.process_json(getGroupsWithId)
#   返回结果是json： {"startIndex":0,"totalResults":2,"status":"ok","entry":[{"id":{"groupId":"xxxx","type":"groupId"},"title":"未分组"},{"id":{"groupId":"xxxx","type":"groupId"},"title":"同事"}]} 
    return getGroupsWithId  

</t>
<t tx="newlife.20110221101214.1450">以发登录新鲜事为例描述发布流程：

用户登录：
    send_feed_auto(session_key, 'login')
    
def send_feed_auto(session_key, type, val='1'):
    try:
        template_id = '2000000821289394497'
        if type == 'append':
            body_data = {"c1":"好奇心鼓动着", "c2":"开始了泡泡海洋之旅，新手入海，热烈欢迎！", 
                         "link":"前去支持一下！"}
        if type == 'login':
            rd = random.randint(0, 7)
            body_data = {"c1":FEED_LOGIN_SDO[rd][0], "c2":FEED_LOGIN_SDO[rd][1], 
                         "link":FEED_LOGIN_SDO[rd][2]}
        if type == 'play':
            body_data = {"cl":FEED_PLAY_SDO[val][0], "c2":FEED_PLAY_SDO[val][1],
                         "link":FEED_PLAY_SDO[val][2]}

        return send_app_feed(session_key, template_id, body_data)
    except:
        pass

#template_id，预测应该是盛大设定的，不是我们系统指定的，
#body_data(dict) 所含参数：c1,c2,link,l2,

下面描述send_app_feed()：
    这个就是2个函数：_post_api_request,（发送请求，）
                   _generate_base_params,(生成请求的参数)
                   _generate_sig,（生成验证码）
                   
                   
    
    </t>
<t tx="newlife.20110221101214.1451"></t>
<t tx="newlife.20110221101214.1452"># -*- coding: utf-8 -*-
from sns_api import *
from apps.members.cache import *
from apps.sns.constants import FEED_LOGIN_SDO, FEED_PLAY_SDO, FEED_STAGE_SDO
import random

</t>
<t tx="newlife.20110221101214.1453">def send_troll_feed(session_key, owner_id, price, fishname):
    try:
        fishname = fishname.encode('utf8')
        template_id = 3
        sns_id = get_sns_id(session_key)
        actor = get_member_by_sns_id(sns_id).nickname
        owner = get_member_by_sns_id(owner_id).nickname
        body_data = '{"actor":"%s","price":"%s","owner":"%s","fishname":"%s"}' % (actor, int(price), owner, fishname)

        return send_app_feed(session_key, template_id, body_data)
    except:
        pass


</t>
<t tx="newlife.20110221101214.1454">def send_submarine_feed(session_key, fishname):
    try:
        fishname = fishname.encode('utf8')
        template_id = 4
        sns_id = get_sns_id(session_key)
        actor = get_member_by_sns_id(sns_id).nickname
        body_data = '{"actor":"%s","fishname":"%s"}' % (actor, fishname)

        return send_app_feed(session_key, template_id, body_data)
    except:
        pass


</t>
<t tx="newlife.20110221101214.1455">def send_catchfish_feed(session_key, fishname):
    try:
        fishname = fishname.encode('utf8')
        template_id = 5
        sns_id = get_sns_id(session_key)
        actor = get_member_by_sns_id(sns_id).nickname
        body_data = '{"actor":"%s","fishname":"%s"}' % (actor, fishname)

        return send_app_feed(session_key, template_id, body_data)
    except:
        pass

</t>
<t tx="newlife.20110221101214.1456">def send_openStage_feed(session_key, stage=5):
    try:
        template_id = '2000000821289394494'
        body_data = {"c1":"","c2":"打开了泡泡鱼新关卡",
                     "link":"%s", "l2":"%s"} % (FEED_STAGE_SDO[stage][0], FEED_STAGE_SDO[stage][1])

        return send_app_feed(session_key, template_id, body_data)
    except:
        pass

</t>
<t tx="newlife.20110221101214.1457">def send_feed_auto(session_key, type, val='1'):
    try:
        template_id = '2000000821289394497'
        if type == 'append':
            body_data = {"c1":"好奇心鼓动着", "c2":"开始了泡泡海洋之旅，新手入海，热烈欢迎！", 
                         "link":"前去支持一下！"}
        if type == 'login':
            rd = random.randint(0, 7)
            body_data = {"c1":FEED_LOGIN_SDO[rd][0], "c2":FEED_LOGIN_SDO[rd][1], 
                         "link":FEED_LOGIN_SDO[rd][2]}
        if type == 'play':
            body_data = {"cl":FEED_PLAY_SDO[val][0], "c2":FEED_PLAY_SDO[val][1],
                         "link":FEED_PLAY_SDO[val][2]}

        return send_app_feed(session_key, template_id, body_data)
    except:
        pass

</t>
<t tx="newlife.20110221101214.1458">def send_steal_notif(session_key, thief_id, owner_id, sns_url):
    pass


</t>
<t tx="newlife.20110221101214.1459">def send_shock_notif(session_key, thief_id, owner_id, sns_url):
    pass</t>
<t tx="newlife.20110221101214.1460"></t>
<t tx="newlife.20110221101214.1461"># -*- coding: utf-8 -*-
import time
from django.utils import simplejson
from django.conf import settings
import urllib, urllib2
import hashlib


</t>
<t tx="newlife.20110221101214.1462">def _generate_base_params():
    params = {}
    params['api_key'] = settings.SNS_API_KEY
    params['call_id'] = int(time.time())
    params['v'] = '1.0'
    params['format'] = 'JSON'

    return params


</t>
<t tx="newlife.20110221101214.1463">def _generate_sig(params, secret_key=settings.SNS_SECRET_KEY):
    hasher = hashlib.md5(''.join(['%s=%s' % (x, params[x]) for x in sorted(params.keys())]))
    hasher.update(secret_key)
    return hasher.hexdigest()


</t>
<t tx="newlife.20110221101214.1464">def _post_api_request(params):
    data = urllib.urlencode(params)
    req = urllib2.Request(settings.SNS_API_REST_SERVER)
    response = urllib2.urlopen(req, data)
    result = response.read()
    result = simplejson.loads(result)
    return result


</t>
<t tx="newlife.20110221101214.1465">def get_sns_id(session_key):
    """
    Return sns id of user from the session key.
    See http://test.wiki.dev.sdo.com/index.php?title=Users.getLoggedInUser
    Example:
    &gt;&gt;&gt; get_sns_id('2.d05591750139050e06ac76eeaf802302.3600.1264568400-288243096')
    288243096
    """
    try:
        params = _generate_base_params()
        params['method'] = 'users.getLoggedInUser'
        params['session_key'] = session_key
        params['sig'] = _generate_sig(params)
        result = _post_api_request(params)
        return result['uid']
    except:
        return 'SNS_API_ERROR'


</t>
<t tx="newlife.20110221101214.1466">def get_sns_user(session_key, sns_id, fields='name,headurl'):
    """
    Return a dictionary, the keys are all the elements of fields parameter.
    See http://test.wiki.dev.sdo.com/index.php?title=Users.getInfo
    Example:
    &gt;&gt;&gt; get_sns_user('288243096')
    {u'uid': 288243096, u'headurl': u'http://hdn.xnimg.cn/photos/hdn511/20090827/1340/head_r82j_7787k204234.jpg', u'name': u'李响'}
    """
    try:
        params = _generate_base_params()
        params['method'] = 'users.getInfo'
        params['uids'] = sns_id
        params['session_key'] = session_key
        params['fields'] = fields
        params['sig'] = _generate_sig(params)
        result = _post_api_request(params)
        # The result is a list
        return result['name'], result['headurl']
    except:
        return 'SNS_API_ERROR'


</t>
<t tx="newlife.20110221101214.1467">def get_app_friends(session_key):
    """
    Return friends list of current user.
    See http://test.wiki.dev.sdo.com/index.php?title=Friends.getAppFriends
    Example:
    &gt;&gt;&gt; get_app_friends('2.d05591750139050e06ac76eeaf802302.3600.1264568400-288243096')
    [{u'id': 247592008, u'headurl': u'http://hdn.xnimg.cn/photos/hdn201/20081223/08/15/head_w6YQ_29630m198107.jpg', u'name': u'金辉KinWii'}, ... , ]
    """
    try:
        params = _generate_base_params()
        params['method'] = 'friends.getAppFriends'
        params['session_key'] = session_key
        params['sig'] = _generate_sig(params)
        result = _post_api_request(params)
        # The result is a friend list
        return map(lambda x:int(x['id']), result)
    except:
        return 'SNS_API_ERROR'


</t>
<t tx="newlife.20110221101214.1468">def get_are_friends(session_key, uids1, uids2):
    """
    Return 1 when given uids1 and uids2 are friends, else return 0.
    See http://test.wiki.dev.sdo.com/index.php?title=Friends.areFriends
    Example:
    &gt;&gt;&gt; get_are_friends('2.f97e3a1e5a8700d7e85c760953a4976f.3600.1264575600-288243096', '288243096', '55258592')
    1
    &gt;&gt;&gt; get_are_friends('2.f97e3a1e5a8700d7e85c760953a4976f.3600.1264575600-288243096', '288243096', '256500065')
    0
    """
    try:
        params = _generate_base_params()
        params['method'] = 'friends.areFriends'
        params['session_key'] = session_key
        params['uid1'] = uids1
        params['uid2'] = uids2
        params['sig'] = _generate_sig(params)
        result = _post_api_request(params)
        if result[0]['uid1'] and result[0]['uid2'] and result[0].has_key('are_friends'):
            return result[0]['are_friends']
    except:
        return 'SNS_API_ERROR'

</t>
<t tx="newlife.20110221101214.1469">def get_site_info(session_key):
    """
    See http://wiki.dev.sdo.com/index.php?title=Siteinfo.get
    """
    try:
        params = _generate_base_params()
        params['method'] = 'Siteinfo.get'
        params['session_key'] = session_key
        params['sig'] = _generate_sig(params)
        result = _post_api_request(params)
        return result
    except:
        return 'SNS_API_ERROR'

</t>
<t tx="newlife.20110221101214.1470">def send_app_feed(session_key, template_id, body_data):
    """
    Return 1 if successful send.
    See http://test.wiki.dev.sdo.com/index.php?title=Feed.publishTemplatizedAction
    Example:
    &gt;&gt;&gt; send_app_feed('xensDDA49403hStb0iyaP+mcKdXOJjbhYbB0pA8ydu7hbXH3Y4gPLEY/Dyq72rcfZ26FYkUaiEa50lPn+F+3vu/5lXw',1 ,'{}')
    1
    """
    try:
        params = _generate_base_params()
        params['method'] = 'feed.publishTemplatizedAction'
        params['session_key'] = session_key
        params['template_id'] = template_id
        params['body_data'] = body_data
        params['sig'] = _generate_sig(params)
        result = _post_api_request(params)
        if result['result'] == 1:
            return result
        else:
            return 'SNS_API_ERROR'
    except:
        return 'SNS_API_ERROR'


</t>
<t tx="newlife.20110221101214.1471">def send_app_notif(session_key, to_ids, notification):
    pass


</t>
<t tx="newlife.20110221101214.1472">def pay_reg_order(session_key, order_id, amount, desc):
    pass


</t>
<t tx="newlife.20110221101214.1473">def pay_is_complete(order_id):
    pass


</t>
<t tx="newlife.20110221101214.1474">def send_is_invitation(session_key):
    """
    Return 1 if successful send.
    See http://wiki.dev.sdo.com/index.php?title=Invitations.send
    Example:
    &gt;&gt;&gt; send_is_invitation('xensDDA49403hStb0iyaP+mcKdXOJjbhYbB0pA8ydu7hbXH3Y4gPLEY/Dyq72rcfZ26FYkUaiEa50lPn+F+3vu/5lXw')
    1
    """
    try:
        params = _generate_base_params()
        params['method'] = 'Invitations.send'
        params['session_key'] = session_key
        params['sig'] = _generate_sig(params)
        result = _post_api_request(params)
        return result['result']
    except:
        return 'SNS_API_ERROR'


</t>
<t tx="newlife.20110221101214.1475">def create_os_invitation(session_key):
    """
    Return os invitation link
    See http://wiki.dev.sdo.com/index.php?title=Invitations.send
    Example:
    &gt;&gt;&gt; send_is_invitation('xensDDA49403hStb0iyaP+mcKdXOJjbhYbB0pA8ydu7hbXH3Y4gPLEY/Dyq72rcfZ26FYkUaiEa50lPn+F+3vu/5lXw')
    1
    """
    try:
        params = _generate_base_params()
        params['method'] = 'Invitations.createLink'
        params['session_key'] = session_key
        params['sig'] = _generate_sig(params)
        result = _post_api_request(params)
        return result
    except:
        return 'SNS_API_ERROR'

</t>
<t tx="newlife.20110221101214.1476">#其中状态为5中，分别是：
# -1 : 勋章异常删除
# 0 : 勋章任务无领取
# 1 : 勋章任务已领取
# 2 : 勋章任务已完成，勋章无认领
# 3 : 勋章任务已完成，勋章已认领
def check_user_medal(session_key, sns_id, fields='medal'):
    try:
        params = _generate_base_params()
        params['method'] = 'users.getInfo'
        params['uids'] = sns_id
        params['session_key'] = session_key
        params['fields'] = fields
        params['sig'] = _generate_sig(params)
        result = _post_api_request(params)

        result = result.get('medal', {})
        r101 = result.get('9805', {})
        rs101 = r101.get('medal_status', 0)
        if int(rs101)==3:    
            return ['9805',]
        else:
            return []
    except:
        return []

</t>
<t tx="newlife.20110221101214.1477"></t>
<t tx="newlife.20110315153515.1540">   level, shell,coin
0,  -      -     -
1,  20   100,000 3000
2,  15   50,000  1500  
3   10  10,000   P1*50   

def can_exchange(member,level):
    return member.lelve &gt; exch_dict.get(level)[0] &amp;&amp; member.shell &gt; exch_dict.get(level)[1]
    
    
    
def exchange(request,skey,exchange_type):
    if exchange_type not in ['0','1','2','3']:
        return {'error':'unknown type'}
    member = login_member(request, skey)
    key = USER_EXCHANGE_INFO%member.id
    cache_type = cache.get(key)
    if cache_type:
        return {'error':'exchanged'}
    if exchange_type == '0':
        exchange_record = Exchangerecord(member_id=member.id,
                                         exchange_type=exchange_type)
    can_exchange =can_exchange(member,exchange_type)
    if not can_exchage:
        return {'error':'require not match'}
        

def can_exchange(member,exchange_type):
    level = get_almanac_level_info(member.id)[0]
    shells = member.shells
    need_info = EXCHANGE_DICT.get(exchange_type)
    return shells &gt;= need_info[0] and level &gt;= need_info[1]


    


</t>
</tnodes>
</leo_file>
