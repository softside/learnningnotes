<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet ekr_test?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="newlife.20101221161857.1671"><vh>@chapters</vh></v>
<v t="newlife.20101217182433.1267" a="E"><vh>目标</vh>
<v t="newlife.20101221161857.1672"><vh>架构说明书</vh></v>
<v t="newlife.20101217182433.1269" a="E"><vh>搭建本地开发环境</vh>
<v t="newlife.20101221174231.1675"><vh>svn地址</vh></v>
<v t="newlife.20101217182433.1268"><vh>need_check_sig</vh></v>
</v>
<v t="newlife.20101222104201.1907" a="E"><vh>系统结构</vh>
<v t="newlife.20101222104201.1908"><vh>filetree</vh></v>
<v t="newlife.20101222104201.1909" a="E"><vh>apps</vh>
<v t="newlife.20101222104201.1910"><vh>webservice</vh></v>
</v>
</v>
<v t="newlife.20101222104201.1702" a="E"><vh>系统特色</vh>
<v t="newlife.20101222104201.1703"><vh>缓存</vh></v>
<v t="newlife.20101222104201.1705"><vh>单元测试</vh></v>
<v t="newlife.20101222104201.1704"><vh>分表</vh>
<v t="newlife.20101222104201.1709" a="E"><vh>class MultiDB</vh>
<v t="newlife.20101222104201.1710"><vh>save</vh></v>
<v t="newlife.20101222104201.1711"><vh>delete</vh></v>
<v t="newlife.20101222104201.1712"><vh>class Meta</vh></v>
</v>
<v t="newlife.20101222104201.1777"><vh>class MyFishInstance</vh>
<v t="newlife.20101222104201.1778"><vh>can_be_used_potion</vh></v>
<v t="newlife.20101222104201.1779"><vh>_get_base_style</vh></v>
<v t="newlife.20101222104201.1780"><vh>_get_color</vh></v>
<v t="newlife.20101222104201.1781"><vh>_get_level</vh></v>
<v t="newlife.20101222104201.1782"><vh>is_highest_level</vh></v>
<v t="newlife.20101222104201.1783"><vh>get_deform_levels</vh></v>
<v t="newlife.20101222104201.1784"><vh>get_display_name</vh></v>
<v t="newlife.20101222104201.1785"><vh>get_display_style</vh></v>
<v t="newlife.20101222104201.1786"><vh>get_dispatch_rest_time</vh></v>
<v t="newlife.20101222104201.1787"><vh>get_power</vh></v>
<v t="newlife.20101222104201.1788"><vh>next_deform_level</vh></v>
<v t="newlife.20101222104201.1789"><vh>sell_price</vh></v>
<v t="newlife.20101222104201.1790"><vh>class Meta</vh></v>
</v>
</v>
</v>
</v>
<v t="newlife.20101220143820.1272"><vh>webservice</vh>
<v t="newlife.20101220143820.1361"><vh>@file /home/newlife/ddl_server/ddl_server/sns_ddl/apps/webservice/almanac.py</vh>
<v t="newlife.20101220143820.1362"><vh>almanac declarations</vh></v>
<v t="newlife.20101220143820.1363"><vh>getSysAlmanacAMF</vh></v>
<v t="newlife.20101220143820.1364"><vh>getUserAlmanacAMF</vh></v>
</v>
<v t="newlife.20101220143820.1374"><vh>@file /home/newlife/ddl_server/ddl_server/sns_ddl/apps/webservice/cardgame.py</vh>
<v t="newlife.20101220143820.1375"><vh>cardgame declarations</vh></v>
<v t="newlife.20101220143820.1376"><vh>requestAvailableSkillAMF</vh></v>
<v t="newlife.20101220143820.1377"><vh>cardGameStartLevelAMF</vh></v>
<v t="newlife.20101220143820.1378"><vh>cardGameGiveUpLevelAMF</vh></v>
<v t="newlife.20101220143820.1379"><vh>playCardsAMF</vh></v>
<v t="newlife.20101220143820.1380"><vh>endRoundAMF</vh></v>
<v t="newlife.20101220143820.1381"><vh>useSkillAMF</vh></v>
</v>
<v t="newlife.20101220143820.1393"><vh>@file /home/newlife/ddl_server/ddl_server/sns_ddl/apps/webservice/gift.py</vh>
<v t="newlife.20101220143820.1394"><vh>gift declarations</vh></v>
<v t="newlife.20101220143820.1396"><vh>getGiftsAMF</vh></v>
<v t="newlife.20101220143820.1397"><vh>receiveGiftRewardAMF</vh></v>
<v t="newlife.20101220143820.1398"><vh>removeGiftRewardAMF</vh></v>
</v>
<v t="newlife.20101220143820.1399"><vh>@file /home/newlife/ddl_server/ddl_server/sns_ddl/apps/webservice/__init__.py</vh></v>
<v t="newlife.20101220143820.1400"><vh>@file /home/newlife/ddl_server/ddl_server/sns_ddl/apps/webservice/item.py</vh>
<v t="newlife.20101220143820.1401"><vh>item declarations</vh></v>
<v t="newlife.20101220143820.1402"><vh>getItemsInBagAMF</vh></v>
<v t="newlife.20101220143820.1403"><vh>getMemberAdornInBagAMF</vh></v>
<v t="newlife.20101220143820.1404"><vh>switchBackgroundAMF</vh></v>
<v t="newlife.20101220143820.1405"><vh>resetBackgroundAMF</vh></v>
<v t="newlife.20101220143820.1406"><vh>moveOrnamentAMF</vh></v>
</v>
<v t="newlife.20101220143820.1407"><vh>@file /home/newlife/ddl_server/ddl_server/sns_ddl/apps/webservice/nest.py</vh>
<v t="newlife.20101220143820.1408"><vh>nest declarations</vh></v>
<v t="newlife.20101220143820.1409"><vh>getNestListAMF</vh></v>
<v t="newlife.20101220143820.1410"><vh>getObjectsOfNestAMF</vh></v>
<v t="newlife.20101220143820.1411"><vh>buyNestPositionAMF</vh></v>
<v t="newlife.20101220143820.1412"><vh>feedDragonAMF</vh></v>
<v t="newlife.20101220143820.1413"><vh>cleanNestAMF</vh></v>
<v t="newlife.20101220143820.1414"><vh>configureNestAMF</vh></v>
<v t="newlife.20101220143820.1415"><vh>saleNestAMF</vh></v>
<v t="newlife.20101220143820.1416"><vh>getNPCAMF</vh></v>
</v>
<v t="newlife.20101220143820.1417"><vh>@file /home/newlife/ddl_server/ddl_server/sns_ddl/apps/webservice/score.py</vh></v>
<v t="newlife.20101220143820.1418"><vh>@file /home/newlife/ddl_server/ddl_server/sns_ddl/apps/webservice/shop.py</vh>
<v t="newlife.20101220143820.1419"><vh>shop declarations</vh></v>
<v t="newlife.20101220143820.1420"><vh>getDragonsInShopAMF</vh></v>
<v t="newlife.20101220143820.1421"><vh>getPartisansInShopAMF</vh></v>
<v t="newlife.20101220143820.1422"><vh>getOrnamentsInShopAMF</vh></v>
<v t="newlife.20101220143820.1423"><vh>getItemsInShopAMF</vh></v>
<v t="newlife.20101220143820.1424"><vh>getNestInShopAMF</vh></v>
<v t="newlife.20101220143820.1425"><vh>getActivityEntriesInShopAMF</vh></v>
<v t="newlife.20101220143820.1426"><vh>getNewEntriesInShopAMF</vh></v>
<v t="newlife.20101220143820.1427"><vh>buyDragonAMF</vh></v>
<v t="newlife.20101220143820.1428"><vh>buyPartisanAMF</vh></v>
<v t="newlife.20101220143820.1429"><vh>buyAdornmentAMF</vh></v>
<v t="newlife.20101220143820.1430"><vh>buyItemAMF</vh></v>
<v t="newlife.20101220143820.1431"><vh>buyNestAMF</vh></v>
<v t="newlife.20101220143820.1432"><vh>renewObjectsAMF</vh></v>
</v>
<v t="newlife.20101223141853.1785"><vh>@file /home/newlife/ddl_server/ddl_server/sns_ddl/apps/webservice/system.py</vh>
<v t="newlife.20101223141853.1786"><vh>system declarations</vh></v>
<v t="newlife.20101223141853.1789"><vh>getHomeAdsAMF</vh></v>
</v>
<v t="newlife.20101220143820.1438"><vh>@file /home/newlife/ddl_server/ddl_server/sns_ddl/apps/webservice/task.py</vh>
<v t="newlife.20101220143820.1439"><vh>task declarations</vh></v>
<v t="newlife.20101220143820.1440"><vh>getUserAllTasksAMF</vh></v>
<v t="newlife.20101220143820.1441"><vh>refreshTaskAMF</vh></v>
<v t="newlife.20101220143820.1442"><vh>drawTaskRewardsAMF</vh></v>
</v>
<v t="newlife.20101220143820.1443"><vh>@file /home/newlife/ddl_server/ddl_server/sns_ddl/apps/webservice/user.py</vh>
<v t="newlife.20101220143820.1444"><vh>user declarations</vh></v>
<v t="newlife.20101220143820.1446"><vh>getOtherUserInfoAMF</vh></v>
<v t="newlife.20101220143820.1447"><vh>getFriendsAMF</vh></v>
</v>
</v>
<v t="newlife.20101220143820.1450"><vh>@file /home/newlife/ddl_server/ddl_server/sns_ddl/apps/members/cache.py</vh>
<v t="newlife.20101220143820.1451"><vh>cache declarations</vh></v>
<v t="newlife.20101220143820.1453"><vh>get_member_by_sns_id</vh></v>
<v t="newlife.20101220143820.1454"><vh>get_members_by_sns_ids</vh></v>
<v t="newlife.20101220143820.1455"><vh>is_disabled_member</vh></v>
<v t="newlife.20101220143820.1456"><vh>auto_disable_user</vh></v>
<v t="newlife.20101220143820.1458"><vh>get_my_fish_tank_ids</vh></v>
<v t="newlife.20101220143820.1459"><vh>update_my_fish_tank_ids</vh></v>
<v t="newlife.20101220143820.1462"><vh>get_my_deco</vh></v>
<v t="newlife.20101220143820.1463"><vh>get_my_decos</vh></v>
<v t="newlife.20101220143820.1464"><vh>get_my_adorn</vh></v>
<v t="newlife.20101220143820.1465"><vh>get_my_adorns</vh></v>
<v t="newlife.20101220143820.1466"><vh>get_or_create_my_item</vh></v>
<v t="newlife.20101220143820.1467"><vh>get_my_items</vh></v>
<v t="newlife.20101220143820.1468"><vh>get_my_fish_tank</vh></v>
<v t="newlife.20101220143820.1469"><vh>get_my_fish_tanks</vh></v>
<v t="newlife.20101220143820.1470"><vh>get_or_create_my_essence</vh></v>
<v t="newlife.20101220143820.1471"><vh>get_my_essences</vh></v>
<v t="newlife.20101220143820.1472"><vh>get_my_essence_ids_in_bag</vh></v>
<v t="newlife.20101220143820.1474"><vh>update_my_fish_ids_in_tank</vh></v>
<v t="newlife.20101220143820.1475"><vh>get_my_deco_ids_in_tank</vh></v>
<v t="newlife.20101220143820.1476"><vh>update_my_deco_ids_in_tank</vh></v>
<v t="newlife.20101220143820.1477"><vh>get_my_fish_ids_in_bag</vh></v>
<v t="newlife.20101220143820.1478"><vh>update_my_fish_ids_in_bag</vh></v>
<v t="newlife.20101220143820.1479"><vh>get_my_deco_ids_in_bag</vh></v>
<v t="newlife.20101220143820.1480"><vh>update_my_deco_ids_in_bag</vh></v>
<v t="newlife.20101220143820.1481"><vh>get_my_adorn_ids_in_bag</vh></v>
<v t="newlife.20101220143820.1482"><vh>get_my_adorn_ids_in_tank</vh></v>
<v t="newlife.20101220143820.1483"><vh>update_my_adorn_ids_in_bag</vh></v>
<v t="newlife.20101220143820.1484"><vh>update_my_adorn_ids_in_tank</vh></v>
<v t="newlife.20101220143820.1485"><vh>get_my_item_styles_in_bag</vh></v>
<v t="newlife.20101220143820.1486"><vh>update_my_item_styles_in_bag</vh></v>
<v t="newlife.20101220143820.1487"><vh>update_my_essence_styles_in_bag</vh></v>
<v t="newlife.20101220143820.1488"><vh>get_friend_sns_ids</vh></v>
<v t="newlife.20101220143820.1489"><vh>_get_baidu_friend_list</vh></v>
<v t="newlife.20101220143820.1490"><vh>_get_sohu_friend_list</vh></v>
<v t="newlife.20101220143820.1491"><vh>_get_renren_friend_list</vh></v>
<v t="newlife.20101220143820.1492"><vh>get_member_companion_fishs</vh></v>
<v t="newlife.20101220143820.1493"><vh>update_my_member_companion_fishs</vh></v>
<v t="newlife.20101220143820.1494"><vh>save_upgraded_fish</vh></v>
<v t="newlife.20101220143820.1495"><vh>get_upgraded_fish</vh></v>
<v t="newlife.20101220143820.1496"><vh>delete_upgraded_fish</vh></v>
<v t="newlife.20101220143820.1497"><vh>get_visited_friend</vh></v>
<v t="newlife.20101220143820.1498"><vh>get_wanttobuy_ids</vh></v>
<v t="newlife.20101220143820.1499"><vh>update_wanttobuy_ids</vh></v>
<v t="newlife.20101220143820.1500"><vh>get_wanttobuy</vh></v>
<v t="newlife.20101220143820.1501"><vh>update_wanttobuy_friends_goods</vh></v>
<v t="newlife.20101220143820.1502"><vh>get_wanttobuy_friends_goods</vh></v>
<v t="newlife.20101220143820.1503"><vh>get_my_temp_bag_info</vh></v>
<v t="newlife.20101220143820.1504"><vh>get_my_temp_bag_infos</vh></v>
<v t="newlife.20101220143820.1506"><vh>get_other_my_temp_bag_info_ids</vh></v>
<v t="newlife.20101220143820.1507"><vh>update_limit_my_temp_bag_info_ids</vh></v>
<v t="newlife.20101220143820.1508"><vh>update_other_my_temp_bag_info_ids</vh></v>
</v>
<v t="newlife.20101224111641.1940" a="O"><vh>@file /home/newlife/ddl_server/ddl_server/sns_ddl/apps/products/cache.py</vh>
<v t="newlife.20101224111641.1941"><vh>cache declarations</vh></v>
<v t="newlife.20101224111641.1942"><vh>get_almanac_family_code_fish_colors</vh></v>
<v t="newlife.20101224111641.1943"><vh>get_family_base_styles</vh></v>
<v t="newlife.20101224111641.1944"><vh>get_base_style_show_fish</vh></v>
<v t="newlife.20101224111641.1946"><vh>get_fishes</vh></v>
<v t="newlife.20101224111641.1948"><vh>get_family_fishs</vh></v>
<v t="newlife.20101224111641.1949"><vh>get_deco</vh></v>
<v t="newlife.20101224111641.1950"><vh>get_decos</vh></v>
<v t="newlife.20101224111641.1951"><vh>get_adorn</vh></v>
<v t="newlife.20101224111641.1952"><vh>get_adorns</vh></v>
<v t="newlife.20101224111641.1953"><vh>get_fish_tank</vh></v>
<v t="newlife.20101224111641.1954"><vh>get_fish_tanks</vh></v>
<v t="newlife.20101224111641.1955"><vh>get_item</vh></v>
<v t="newlife.20101224111641.1956"><vh>get_type_item_styles</vh></v>
<v t="newlife.20101224111641.1957"><vh>get_essence</vh></v>
<v t="newlife.20101224111641.1958"><vh>get_essences</vh></v>
<v t="newlife.20101224111641.1959"><vh>get_star_essence</vh></v>
</v>
<v t="newlife.20101223141853.1791" a="O"><vh>@file /home/newlife/ddl_server/ddl_server/sns_ddl/apps/members/helper.py</vh>
<v t="newlife.20101223141853.1792"><vh>helper declarations</vh></v>
<v t="newlife.20101223141853.1793"><vh>get_my_almanac_family_code_fish_styles</vh></v>
<v t="newlife.20101223141853.1794"><vh>get_my_almanac_fish_styles</vh></v>
<v t="newlife.20101223141853.1795"><vh>get_almanac_level_info</vh></v>
<v t="newlife.20101223141853.1796"><vh>will_deform</vh></v>
<v t="newlife.20101223141853.1797"><vh>get_fish_property</vh></v>
<v t="newlife.20101223141853.1798"><vh>has_finished_fish</vh></v>
<v t="newlife.20101223141853.1799"><vh>get_deform_levels</vh></v>
<v t="newlife.20101223141853.1800"><vh>get_and_caculate_objects_in_tank</vh></v>
<v t="newlife.20101223141853.1801"><vh>caculate_my_fish_in_tank</vh></v>
<v t="newlife.20101223141853.1802"><vh>calculate_my_fishes_in_bag</vh></v>
<v t="newlife.20101223141853.1803"><vh>get_my_family_decos_in_bag</vh></v>
<v t="newlife.20101223141853.1804"><vh>get_my_items_in_bag</vh></v>
<v t="newlife.20101223141853.1805"><vh>update_member_almanac_exp</vh></v>
<v t="newlife.20101223141853.1806"><vh>new_a_member_fish</vh></v>
<v t="newlife.20101223141853.1807"><vh>delete_a_member_fish_in_bag</vh></v>
<v t="newlife.20101223141853.1808"><vh>delete_a_member_fish_in_tank</vh></v>
<v t="newlife.20101223141853.1809"><vh>new_a_member_deco</vh></v>
<v t="newlife.20101223141853.1810"><vh>delete_a_member_deco_in_bag</vh></v>
<v t="newlife.20101223141853.1811"><vh>delete_a_member_deco_in_tank</vh></v>
<v t="newlife.20101223141853.1812"><vh>new_a_member_adorn</vh></v>
<v t="newlife.20101223141853.1813"><vh>delete_a_member_adorn_in_bag</vh></v>
<v t="newlife.20101223141853.1814"><vh>delete_a_member_adorn_in_tank</vh></v>
<v t="newlife.20101223141853.1815"><vh>new_a_member_tank</vh></v>
<v t="newlife.20101223141853.1816"><vh>delete_a_member_tank</vh></v>
<v t="newlife.20101223141853.1817"><vh>new_a_member_item</vh></v>
<v t="newlife.20101223141853.1818"><vh>new_a_member_essence</vh></v>
<v t="newlife.20101223141853.1819"><vh>delete_a_member_item</vh></v>
<v t="newlife.20101223141853.1820"><vh>get_my_item_cooldown_precent</vh></v>
<v t="newlife.20101223141853.1821"><vh>use_physic_for_pet</vh></v>
<v t="newlife.20101223141853.1822"><vh>use_physic_for_fish</vh></v>
<v t="newlife.20101223141853.1824"><vh>register_member</vh></v>
<v t="newlife.20101223141853.1825"><vh>are_friends</vh></v>
<v t="newlife.20101223141853.1826"><vh>recal_exp</vh></v>
<v t="newlife.20101223141853.1827"><vh>isopen_new_almanac</vh></v>
<v t="newlife.20101223141853.1828"><vh>add_exp_daily</vh></v>
<v t="newlife.20101223141853.1829"><vh>js_visited_friend</vh></v>
<v t="newlife.20101223141853.1830"><vh>new_a_member_wanttobuy</vh></v>
<v t="newlife.20101223141853.1831"><vh>remove_a_member_wanttobuy</vh></v>
<v t="newlife.20101223141853.1832"><vh>getFishReward</vh></v>
<v t="newlife.20101223141853.1833"><vh>new_my_temp_bag_info</vh></v>
<v t="newlife.20101223141853.1835"><vh>new_user_product</vh></v>
<v t="newlife.20101223141853.1836"><vh>can_send_to_level</vh></v>
</v>
<v t="newlife.20101220143820.1509"><vh>@file /home/newlife/ddl_server/ddl_server/sns_ddl/apps/system/helper.py</vh>
<v t="newlife.20101220143820.1510"><vh>helper declarations</vh></v>
<v t="newlife.20101220143820.1511"><vh>choose_a_db</vh></v>
<v t="newlife.20101220143820.1512"><vh>choose_a_fish_model</vh></v>
<v t="newlife.20101220143820.1513"><vh>get_tax</vh></v>
<v t="newlife.20101220143820.1514"><vh>class Dice</vh>
<v t="newlife.20101220143820.1515"><vh>__init__</vh></v>
<v t="newlife.20101220143820.1516"><vh>throw_dice</vh></v>
</v>
<v t="newlife.20101220143820.1518"><vh>add_pearls_record_openstage</vh></v>
<v t="newlife.20101220143820.1519"><vh>add_pearls_record_tankposition</vh></v>
<v t="newlife.20101220143820.1520"><vh>add_pearls_record_synthrate</vh></v>
<v t="newlife.20101220143820.1521"><vh>update_pearls_record_synthrate</vh></v>
<v t="newlife.20101220143820.1522"><vh>add_pearls_record_synthformula</vh></v>
<v t="newlife.20101220143820.1523"><vh>update_pearls_record_synthformula</vh></v>
<v t="newlife.20101220143820.1524"><vh>add_pearls_record_synthposition</vh></v>
<v t="newlife.20101220143820.1525"><vh>generate_bd_sig</vh></v>
<v t="newlife.20101220143820.1526"><vh>generate_4399_sig</vh></v>
<v t="newlife.20101220143820.1527"><vh>generate_sohu_sig</vh></v>
<v t="newlife.20101220143820.1528"><vh>generate_renren_sig</vh></v>
</v>
<v t="newlife.20101223141853.1884"><vh>@file /home/newlife/ddl_server/ddl_server/sns_ddl/apps/tasks/helper.py</vh>
<v t="newlife.20101223141853.1885"><vh>helper declarations</vh></v>
<v t="newlife.20101223141853.1886"><vh>refresh_my_random_tasks</vh></v>
<v t="newlife.20101223141853.1887"><vh>refresh_one_my_random_task</vh></v>
<v t="newlife.20101223141853.1888"><vh>get_task_rewards_info</vh></v>
<v t="newlife.20101223141853.1889"><vh>get_next_task</vh></v>
<v t="newlife.20101223141853.1891"><vh>do_task</vh></v>
<v t="newlife.20101223141853.1892"><vh>update_my_normal_task</vh></v>
<v t="newlife.20101223141853.1893"><vh>update_my_tasks</vh></v>
<v t="newlife.20101223141853.1894"><vh>draw_task_rewards</vh></v>
<v t="newlife.20101223141853.1895"><vh>check_done_task</vh></v>
</v>
<v t="newlife.20101223141853.1896"><vh>@file /home/newlife/ddl_server/ddl_server/sns_ddl/apps/tasks/cache.py</vh>
<v t="newlife.20101223141853.1897"><vh>cache declarations</vh></v>
<v t="newlife.20101223141853.1898"><vh>get_task</vh></v>
<v t="newlife.20101223141853.1900"><vh>get_activity_task_group_codes</vh></v>
<v t="newlife.20101223141853.1901"><vh>get_group_task_ids</vh></v>
<v t="newlife.20101223141853.1902"><vh>get_random_task_ids</vh></v>
<v t="newlife.20101223141853.1903"><vh>get_and_filter_intime_tasks</vh></v>
<v t="newlife.20101223141853.1904"><vh>get_task_rewards</vh></v>
<v t="newlife.20101223141853.1905"><vh>append_my_task_redundancy</vh></v>
<v t="newlife.20101223141853.1906"><vh>get_my_task</vh></v>
<v t="newlife.20101223141853.1907"><vh>get_my_tasks</vh></v>
<v t="newlife.20101223141853.1908"><vh>get_my_random_task_ids</vh></v>
<v t="newlife.20101223141853.1909"><vh>get_or_create_group_task</vh></v>
<v t="newlife.20101223141853.1910"><vh>clear_my_random_task_cache</vh></v>
<v t="newlife.20101223141853.1911"><vh>update_my_random_task_ids</vh></v>
<v t="newlife.20101223141853.1912"><vh>clear_my_group_task_cache</vh></v>
</v>
<v t="newlife.20101220143820.1531"><vh>TODO</vh>
<v t="newlife.20101220143820.1448"><vh>1220  派遣龙</vh>
<v t="newlife.20101220143820.1365"><vh>@file /home/newlife/ddl_server/ddl_server/sns_ddl/apps/webservice/assist.py</vh>
<v t="newlife.20101220143820.1366"><vh>assist declarations</vh></v>
<v t="newlife.20101220143820.1367"><vh>getDispatchedDragonsAMF</vh></v>
<v t="newlife.20101220143820.1368"><vh>getComingSoonDragonAMF</vh></v>
<v t="newlife.20101220143820.1369"><vh>dispatchDragonAMF</vh></v>
<v t="newlife.20101220143820.1370"><vh>harvestDragonAMF</vh></v>
<v t="newlife.20101220143820.1371"><vh>buyAssistPositionAMF</vh></v>
<v t="newlife.20101220143820.1372"><vh>getShortPhysicInfoAMF</vh></v>
<v t="newlife.20101220143820.1373"><vh>shortPhysicAMF</vh></v>
</v>
<v t="newlife.20101220143820.1534"><vh>@file /home/newlife/ddl_server/ddl_server/sns_ddl/apps/games/models.py</vh>
<v t="newlife.20101220143820.1535"><vh>models declarations</vh></v>
<v t="newlife.20101220143820.1536"><vh>class PetTempInfo</vh>
<v t="newlife.20101220143820.1537"><vh>update_cache</vh></v>
<v t="newlife.20101220143820.1538"><vh>delete_cache</vh></v>
<v t="newlife.20101220143820.1539"><vh>save</vh></v>
<v t="newlife.20101220143820.1540"><vh>delete</vh></v>
<v t="newlife.20101220143820.1541"><vh>get_caught_fish_styles</vh></v>
<v t="newlife.20101220143820.1542"><vh>can_be_used_physic</vh></v>
<v t="newlife.20101220143820.1543"><vh>class Meta</vh></v>
</v>
<v t="newlife.20101220143820.1544"><vh>class CatchFishRefreshFish</vh>
<v t="newlife.20101220143820.1545"><vh>update_cache</vh></v>
<v t="newlife.20101220143820.1546"><vh>delete_cache</vh></v>
<v t="newlife.20101220143820.1547"><vh>save</vh></v>
<v t="newlife.20101220143820.1548"><vh>delete</vh></v>
<v t="newlife.20101220143820.1549"><vh>get_fish_name</vh></v>
<v t="newlife.20101220143820.1550"><vh>class Meta</vh></v>
</v>
<v t="newlife.20101220143820.1551"><vh>class Card</vh>
<v t="newlife.20101220143820.1552"><vh>update_cache</vh></v>
<v t="newlife.20101220143820.1553"><vh>delete_cache</vh></v>
<v t="newlife.20101220143820.1554"><vh>save</vh></v>
<v t="newlife.20101220143820.1555"><vh>delete</vh></v>
<v t="newlife.20101220143820.1556"><vh>class Meta</vh></v>
</v>
<v t="newlife.20101220143820.1557"><vh>class Skill</vh>
<v t="newlife.20101220143820.1558"><vh>update_cache</vh></v>
<v t="newlife.20101220143820.1559"><vh>delete_cache</vh></v>
<v t="newlife.20101220143820.1560"><vh>save</vh></v>
<v t="newlife.20101220143820.1561"><vh>delete</vh></v>
<v t="newlife.20101220143820.1562"><vh>class Meta</vh></v>
</v>
<v t="newlife.20101220143820.1563"><vh>class CardGameRefreshCard</vh>
<v t="newlife.20101220143820.1564"><vh>update_cache</vh></v>
<v t="newlife.20101220143820.1565"><vh>delete_cache</vh></v>
<v t="newlife.20101220143820.1566"><vh>save</vh></v>
<v t="newlife.20101220143820.1567"><vh>delete</vh></v>
<v t="newlife.20101220143820.1568"><vh>get_card_name</vh></v>
<v t="newlife.20101220143820.1569"><vh>class Meta</vh></v>
</v>
<v t="newlife.20101220143820.1570"><vh>class CardGamelevelInfo</vh>
<v t="newlife.20101220143820.1571"><vh>update_cache</vh></v>
<v t="newlife.20101220143820.1572"><vh>delete_cache</vh></v>
<v t="newlife.20101220143820.1573"><vh>save</vh></v>
<v t="newlife.20101220143820.1574"><vh>delete</vh></v>
<v t="newlife.20101220143820.1575"><vh>class Meta</vh></v>
</v>
</v>
</v>
<v t="newlife.20101220143820.1532"><vh>增加的常量</vh></v>
<v t="newlife.20101223112128.1755"><vh>@file /home/newlife/ddl_server/ddl_server/sns_ddl/apps/webservice/shop.py</vh>
<v t="newlife.20101223112128.1756"><vh>shop declarations</vh></v>
<v t="newlife.20101223112128.1757"><vh>getDragonsInShopAMF</vh></v>
<v t="newlife.20101223112128.1758"><vh>getPartisansInShopAMF</vh></v>
<v t="newlife.20101223112128.1759"><vh>getOrnamentsInShopAMF</vh></v>
<v t="newlife.20101223112128.1760"><vh>getItemsInShopAMF</vh></v>
<v t="newlife.20101223112128.1761"><vh>getNestInShopAMF</vh></v>
<v t="newlife.20101223112128.1762"><vh>getActivityEntriesInShopAMF</vh></v>
<v t="newlife.20101223112128.1763"><vh>getNewEntriesInShopAMF</vh></v>
<v t="newlife.20101223112128.1764"><vh>buyDragonAMF</vh></v>
<v t="newlife.20101223112128.1765"><vh>buyPartisanAMF</vh></v>
<v t="newlife.20101223112128.1766"><vh>buyAdornmentAMF</vh></v>
<v t="newlife.20101223112128.1767"><vh>buyItemAMF</vh></v>
<v t="newlife.20101223112128.1768"><vh>buyNestAMF</vh></v>
<v t="newlife.20101223112128.1769"><vh>renewObjectsAMF</vh></v>
</v>
</v>
<v t="newlife.20101223141853.1784" a="E"><vh>service</vh>
<v t="newlife.20101223141853.1788"><vh>getSysNoticeAMF</vh></v>
<v t="newlife.20101223141853.1787"><vh>getIndexAdsAMF</vh></v>
<v t="newlife.20101220143820.1445"><vh>getUserInfoAMF</vh>
<v t="newlife.20101220143820.1457"><vh>get_or_create_almanac_info</vh></v>
<v t="newlife.20101223141853.1842"><vh>get_almanac_level_info</vh></v>
<v t="newlife.20101223141853.1890"><vh>get_my_all_tasks</vh></v>
<v t="newlife.20101223141853.1899"><vh>get_normal_task_group_codes</vh></v>
<v t="newlife.20101220143820.1517"><vh>login_member</vh></v>
<v t="newlife.20101220143820.1452"><vh>get_member</vh></v>
<v t="newlife.20101223141853.1823"><vh>login_sns_user</vh></v>
</v>
<v t="newlife.20101220143820.1395" a="E"><vh>getGiftsCountAMF</vh>
<v t="newlife.20101223141853.1834"><vh>get_valid_temp_bag_info_ids</vh></v>
<v t="newlife.20101220143820.1505"><vh>get_limit_my_temp_bag_info_ids</vh></v>
</v>
<v t="newlife.20101220143820.1384" a="E"><vh>getDragonsInBagAMF</vh>
<v t="newlife.20101220143820.1473"><vh>get_my_fish_ids_in_tank</vh></v>
<v t="newlife.20101220143820.1461"><vh>get_my_fishes</vh></v>
<v t="newlife.20101220143820.1460" a="E"><vh>get_my_fish</vh>
<v t="newlife.20101224111641.1945"><vh>get_fish_with_stylecolor</vh></v>
<v t="newlife.20101224111641.1947"><vh>get_fish</vh></v>
</v>
</v>
</v>
<v t="newlife.20101224111641.1961"><vh>/apps/products/models.py</vh>
<v t="newlife.20101224111641.1962"><vh>models declarations</vh></v>
<v t="newlife.20101224111641.1963"><vh>class Essence</vh>
<v t="newlife.20101224111641.1964"><vh>update_cache</vh></v>
<v t="newlife.20101224111641.1965"><vh>delete_cache</vh></v>
<v t="newlife.20101224111641.1966"><vh>save</vh></v>
<v t="newlife.20101224111641.1967"><vh>delete</vh></v>
<v t="newlife.20101224111641.1968"><vh>class Meta</vh></v>
</v>
<v t="newlife.20101224111641.1969"><vh>class Item</vh>
<v t="newlife.20101224111641.1970"><vh>update_cache</vh></v>
<v t="newlife.20101224111641.1971"><vh>delete_cache</vh></v>
<v t="newlife.20101224111641.1972"><vh>save</vh></v>
<v t="newlife.20101224111641.1973"><vh>delete</vh></v>
<v t="newlife.20101224111641.1974"><vh>class Meta</vh></v>
</v>
<v t="newlife.20101224111641.1975"><vh>class Product</vh>
<v t="newlife.20101224111641.1976"><vh>class Meta</vh></v>
</v>
<v t="newlife.20101224111641.1977"><vh>class Fish</vh>
<v t="newlife.20101224111641.1978"><vh>update_cache</vh></v>
<v t="newlife.20101224111641.1979"><vh>delete_cache</vh></v>
<v t="newlife.20101224111641.1980"><vh>save</vh></v>
<v t="newlife.20101224111641.1981"><vh>delete</vh></v>
<v t="newlife.20101224111641.1982"><vh>_base_style</vh></v>
<v t="newlife.20101224111641.1983"><vh>get_deform_levels</vh></v>
<v t="newlife.20101224111641.1984"><vh>class Meta</vh></v>
</v>
<v t="newlife.20101224111641.1985"><vh>class Deco</vh>
<v t="newlife.20101224111641.1986"><vh>update_cache</vh></v>
<v t="newlife.20101224111641.1987"><vh>delete_cache</vh></v>
<v t="newlife.20101224111641.1988"><vh>save</vh></v>
<v t="newlife.20101224111641.1989"><vh>delete</vh></v>
<v t="newlife.20101224111641.1990"><vh>class Meta</vh></v>
</v>
<v t="newlife.20101224111641.1991"><vh>class Adorn</vh>
<v t="newlife.20101224111641.1992"><vh>update_cache</vh></v>
<v t="newlife.20101224111641.1993"><vh>delete_cache</vh></v>
<v t="newlife.20101224111641.1994"><vh>save</vh></v>
<v t="newlife.20101224111641.1995"><vh>delete</vh></v>
<v t="newlife.20101224111641.1996"><vh>class Meta</vh></v>
</v>
<v t="newlife.20101224111641.1997"><vh>class FishTank</vh>
<v t="newlife.20101224111641.1998"><vh>update_cache</vh></v>
<v t="newlife.20101224111641.1999"><vh>delete_cache</vh></v>
<v t="newlife.20101224111641.2000"><vh>save</vh></v>
<v t="newlife.20101224111641.2001"><vh>delete</vh></v>
<v t="newlife.20101224111641.2002"><vh>class Meta</vh></v>
</v>
</v>
<v t="newlife.20110104172722.2064" a="E"><vh>@file /home/newlife/ddl_server/ddl_server/sns_ddl/apps/webservice/dragon.py</vh>
<v t="newlife.20110104172722.2065"><vh>dragon declarations</vh></v>
<v t="newlife.20110104172722.2066"><vh>getDragonsInBagAMF</vh></v>
<v t="newlife.20110104172722.2067"><vh>upgradeDragonAMF</vh></v>
<v t="newlife.20110104172722.2068"><vh>moveDragonToTankAMF</vh></v>
<v t="newlife.20110104172722.2069"><vh>moveDragonToBagAMF</vh></v>
<v t="newlife.20110104172722.2070"><vh>saleDragonAMF</vh></v>
<v t="newlife.20110104172722.2071"><vh>buyDragonPositionAMF</vh></v>
<v t="newlife.20110104172722.2072"><vh>growthPotionAMF</vh></v>
<v t="newlife.20110104172722.2073"><vh>dragonPowerAMF</vh></v>
<v t="newlife.20110104172722.2074"><vh>memberPowerAMF</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="newlife.20101217182433.1267">Do more than others expect you to do and do it pains;</t>
<t tx="newlife.20101217182433.1268">
sns_ddl/amf/django/middleware/__init__.py

129     def need_check_sig(self, fpath, fname):
##130         return False
131         if fname in ('catchFishCompleteLevelAMF',
132             'catchFishGiveUpLevelAMF',
133             'harvestAMF',
134             ):
135             return False
136         if fpath.startswith('/gateway/amfService') or fpath.startswith('gateway/amfService'):
137             return True
138         else:
139             return False

line #130 直接返回False
@doc
初始化数据： ppy_sysnotice里面，注意2个时间，而且，前端没有验证。提醒验证。这个只有再debug版的flash里才有提示（一般用户不用），所以提示也没什么用。</t>
<t tx="newlife.20101217182433.1269"></t>
<t tx="newlife.20101220143820.1272"></t>
<t tx="newlife.20101220143820.1361">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20101220143820.1362"># -*- coding: utf-8 -*-

from apps.system.helper import login_member
from apps.products.cache import *
from apps.members.helper import *

</t>
<t tx="newlife.20101220143820.1363">#获取系统所有龙的图鉴
def getSysAlmanacAMF(request, skey, family):
    member = login_member(request, skey)

    family = int(family)
    #取得当前家族所有鱼的种类
    base_styles = get_family_base_styles(family)

    al_list = []
    for base_style in base_styles:
        colors = get_almanac_family_code_fish_colors(base_style)
        my_al_code_fish_styles = get_my_almanac_family_code_fish_styles(member.id, base_style)
        show_fish = get_base_style_show_fish(base_style)
        deform_times = int(len(show_fish.get_deform_levels()))
        temp = {}
        temp['style'] = '_'.join([show_fish.style, show_fish.color, str(deform_times)])
        temp['star'] = show_fish.star
        temp['al_name'] = show_fish.almanac_name
        temp['al_num'] = deform_times * len(colors)
        collect_list = [int(fish_style.split('_')[-1]) for fish_style in my_al_code_fish_styles]
        temp['collect_num'] = sum(collect_list)
        al_list.append(temp)

    al_list.sort(lambda x,y: cmp(x['star'],y['star']))
    task_list = ''
    rewards = ''

    return {'result': al_list, 'task_list':task_list,'rewards':rewards}

</t>
<t tx="newlife.20101220143820.1364">#获取用户某种龙的图鉴
def getUserAlmanacAMF(request, skey, base_style):
    member = login_member(request, skey)

    colors = get_almanac_family_code_fish_colors(base_style)
    my_al_code_fish_styles = get_my_almanac_family_code_fish_styles(member.id, base_style)
    show_fish = get_base_style_show_fish(base_style)
    deform_times = int(len(show_fish.get_deform_levels()))
    show_fish_dict = {}
    show_fish_dict['style'] = '_'.join([show_fish.style, show_fish.color, str(deform_times)])
    show_fish_dict['star'] = show_fish.star
    show_fish_dict['family'] = show_fish.family
    show_fish_dict['al_name'] = show_fish.almanac_name
    show_fish_dict['al_description'] = show_fish.almanac_description
    show_fish_dict['al_num'] = len(colors)
    show_fish_dict['collect_num'] = len(my_al_code_fish_styles)

    sys_fish_info = []
    for color in colors:
        fish = get_fish(base_style, color)
        temp = {}
        temp['name'] = fish.name
        temp['star'] = fish.star
        temp['color'] = color
        temp['property'] = get_fish_property(fish.star, 1, fish.color)
        temp['deform_times'] = deform_times
        temp['description'] = fish.description
        sys_fish_info.append(temp)
    sys_fish_info.sort(lambda x,y: cmp(x['property'], y['property']))

    task_list = ''
    rewards = ''   
    ret= {'show_fish':show_fish_dict,
          'sys_fish_info':sys_fish_info,
          'my_fish_styles':my_al_code_fish_styles,
          'task_list':task_list,
          'rewards':rewards,}

    return ret


</t>
<t tx="newlife.20101220143820.1365">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20101220143820.1366"># -*- coding: utf-8 -*-

import math
from datetime import datetime, timedelta
from global_constants import DEFAULT_PET_TIME
from apps.system.helper import *
from apps.members.cache import *
from apps.members.helper import *
from apps.games.cache import *
from apps.tasks.helper import check_done_task, update_my_normal_task
from apps.products.cache import *
from apps.shops.cache import get_shop_product

</t>
<t tx="newlife.20101220143820.1367">#获取所有派遣龙的状态
def getDispatchedDragonsAMF(request, skey, host_id):
    member = login_member(request, skey)
    host_id = int(host_id)
    host = get_member(host_id)

    dispatch_list = []
    my_dispatch_pet_ids = get_my_dispatch_pet_ids(host.id)
    for my_dispatch_pet_id in my_dispatch_pet_ids:
        dispatch_pet_info = get_my_dispatch_pet_info(host.id, my_dispatch_pet_id)
        my_dispatch_pet = get_my_fish(host.id, my_dispatch_pet_id)
        top_level = can_send_to_level(my_dispatch_pet, dispatch_pet_info.stage)
        if dispatch_pet_info.status == 'c':
            if datetime.now() &gt;= dispatch_pet_info.end_time:
                dispatch_pet_info.status = 'b'
                dispatch_pet_info.end_time = None
                # 计算蛋蛋龙能刷到第几大关的蛋
                dispatch_pet_info.caught_fish = refresh_fish_to_level(dispatch_pet_info.stage, top_level)
                dispatch_pet_info.save()
        # 计算剩余时间
        if dispatch_pet_info.end_time is not None:
            rest_time = dispatch_pet_info.end_time - datetime.now()
            rest_seconds = rest_time.days*24*3600 + rest_time.seconds
        else:
            rest_seconds = 0
        caught_fish_styles = dispatch_pet_info.get_caught_fish_styles()
        fish_list = []
        for fish_style in caught_fish_styles:
            fish = get_fish_with_stylecolor(fish_style)
            fish_list.append({'style':fish_style, 'star':fish.star, 'name':fish.name})
        result = {'status':dispatch_pet_info.status,
                  'rest_time':rest_seconds,
                  'dragon_list':fish_list,
                  'stage':dispatch_pet_info.stage,
                  'id':my_dispatch_pet_id,
                  'style':my_dispatch_pet.style,
                  'is_protected':dispatch_pet_info.is_protected,
                  'top_level':top_level
                  }
        dispatch_list.append(result)

    dispatch_list.sort(lambda x,y: cmp(x['rest_time'], y['rest_time']) )
    task_list = ''
    rewards = ''
    return {'shell_positions':host.shell_dispatch,
            'pearl_positions':host.pearl_dispatch,
            'dispatch_list':dispatch_list,
            'task_list':task_list,
            'rewards':rewards,}


</t>
<t tx="newlife.20101220143820.1368">#获取最近回来的龙的信息
def getComingSoonDragonAMF(request, skey, host_id):
    member = login_member(request, skey)
    host_id = int(host_id)
    host = get_member(host_id)

    my_dispatch_pet_ids = get_my_dispatch_pet_ids(host.id)
    # 无派遣龙
    if len(my_dispatch_pet_ids) &lt;= 0:
        return {'status':'no dispatched pet.'}
    my_dispatch_pet_infos = get_my_dispatch_pet_infos(host.id, my_dispatch_pet_ids)
    # 按时间排序取得最近的一条
    dispatch_pet_info = my_dispatch_pet_infos[0]

    my_dispatch_pet = get_my_fish(host.id, dispatch_pet_info.my_fish_id)
    top_level = can_send_to_level(my_dispatch_pet, dispatch_pet_info.stage)
    if dispatch_pet_info.status == 'c':
        if datetime.now() &gt;= dispatch_pet_info.end_time:
            dispatch_pet_info.status = 'b'
            dispatch_pet_info.end_time = None
            # 计算蛋蛋龙能刷到第几大关的蛋
            dispatch_pet_info.caught_fish = refresh_fish_to_level(dispatch_pet_info.stage, top_level)
            dispatch_pet_info.save()
    # 计算剩余时间
    if dispatch_pet_info.end_time is not None:
        rest_time = dispatch_pet_info.end_time - datetime.now()
        rest_seconds = rest_time.days*24*3600 + rest_time.seconds
    else:
        rest_seconds = 0

    task_list = ''
    rewards = ''
    result = {'status':dispatch_pet_info.status,
              'rest_time':rest_seconds,
              'task_list':task_list,
              'rewards':rewards,}

    return result


</t>
<t tx="newlife.20101220143820.1369">#派遣龙
def dispatchDragonAMF(request, skey, my_dispatch_pet_id, stage):
    """
    派遣龙，接收参数：
    skey, 用户id
    my_dispatch_pet_id，派遣的龙的id
    stage：龙的状态。    
    """
    member = login_member(request, skey)
    my_dispatch_pet_id = int(my_dispatch_pet_id)
    stage = int(stage)
    #太恶心了，居然还是显式的转换

    my_dispatch_pet = get_my_fish(member.id, my_dispatch_pet_id)
    if not my_dispatch_pet:
        return {'error':'Fish does not exist'}
    if my_dispatch_pet.my_fish_tank_id != 0:
        return {'error':'Not in bag'}
    if stage &gt; member.tempo:
        return {'error':'Wrong stage'}
        #不对的关卡
    if my_dispatch_pet.level &lt; 2:
        return {'error':'Level not enough'}
    my_dispatch_pet_ids = get_my_dispatch_pet_ids(member.id)
    if len(my_dispatch_pet_ids) &gt;= member.shell_dispatch + member.pearl_dispatch:
        return {'error':'No position'}
    # 判断是否休息状态的蛋蛋龙
    if my_dispatch_pet.last_dispatched and my_dispatch_pet.last_dispatched + timedelta(0, 4*DEFAULT_PET_TIME) &gt; datetime.now():
        return {'error':'cold down'}
    #需求变化，没有冷却，判断体力值。get_power()  

    # 设置蛋蛋龙为派遣状态
    my_dispatch_pet.my_fish_tank_id = -1
    #体力消耗
    my_dispatch_pet.last_power_time = datetime.now()
    my_dispatch_pet.save()
    # 更新背包缓存，这里有这样一个情况，因为并不是所有的鱼都再bag里，还有在池塘里的，这样的也可以派遣。
    my_fish_ids_in_bag = get_my_fish_ids_in_bag(member.id)
    if my_dispatch_pet_id in my_fish_ids_in_bag:
        my_fish_ids_in_bag.remove(my_dispatch_pet_id)
    update_my_fish_ids_in_bag(member.id, my_fish_ids_in_bag)
    
    # 创建并初始化派遣模型
    my_dispatch_pet_info = PetTempInfo(member_id = member.id,
                                        my_fish_id=my_dispatch_pet_id, 
                                        stage=stage,
                                        end_time=datetime.now()+timedelta(0, DEFAULT_PET_TIME))
    my_dispatch_pet_info.save()
    # 更新派遣列表缓存
    my_dispatch_pet_ids = get_my_dispatch_pet_ids(member.id)
    if my_dispatch_pet_info.my_fish_id not in my_dispatch_pet_ids:
        my_dispatch_pet_ids.append(my_dispatch_pet_info.my_fish_id)
    update_my_dispatch_pet_ids(member.id, my_dispatch_pet_ids)

    #do task，
    rewards, my_task =  check_done_task(member,'t001',my_dispatch_pet.style,1,my_dispatch_pet.family,my_dispatch_pet.p_type,my_dispatch_pet.star)
    if rewards:
        task_list = update_my_normal_task(member_id, my_task)
    else:
        task_list = ''
    result = {'status':my_dispatch_pet_info.status,
              'rest_time':DEFAULT_PET_TIME,
              'stage':my_dispatch_pet_info.stage,
              'style':my_dispatch_pet.style,
              'task_list':task_list,
              'rewards':rewards,
              }
    return result


</t>
<t tx="newlife.20101220143820.1370">#收取龙
def harvestDragonAMF(request, skey, my_dispatch_pet_id):
    member = login_member(request, skey)
    my_dispatch_pet_id = int(my_dispatch_pet_id)

    my_dispatch_pet = get_my_fish(member.id, my_dispatch_pet_id)
    if not my_dispatch_pet:
        return {'error':'Fish does not exist'}
    if my_dispatch_pet.my_fish_tank_id != -1:
        return {'error':'Not dispatched.'}
    my_dispatch_pet_info = get_my_dispatch_pet_info(member.id, my_dispatch_pet_id)
    caught_fish_styles = my_dispatch_pet_info.get_caught_fish_styles()
    # 判断背包位是否够放下龙和蛋
    if len(get_my_fish_ids_in_bag(member.id)) + len(caught_fish_styles) + 1 &gt; member.current_bags():
        return {'error':'Bag is not enough'}

    # 保存龙蛋
    almanac_fish = []
    for fish_style in caught_fish_styles:
        fish = get_fish_with_stylecolor(fish_style)
        # 打开新图鉴
        my_fish = new_a_member_fish(member, fish)
        opened = isopen_new_almanac(member, my_fish)
        if opened:
            get_exp, open_all = update_member_almanac_exp(member, my_fish)
            temp = {
                'style':my_fish.style,
                'name':fish.name,
                'star':my_fish.star,
                'bonus':get_exp,
                'level':my_fish.level,
                'open_all':open_all,
            }
            almanac_fish.append(temp)
    # 蛋蛋龙回到背包，并按每小时10点增加成长值
    my_dispatch_pet.my_fish_tank_id = 0
    my_dispatch_pet.exp += int(DEFAULT_PET_TIME / 3600 * 10)
    my_dispatch_pet.last_dispatched = datetime.now()
    my_dispatch_pet.save()
    # 更新背包缓存
    my_fish_ids_in_bag = get_my_fish_ids_in_bag(member.id)
    if my_dispatch_pet_id not in my_fish_ids_in_bag:
        my_fish_ids_in_bag.append(my_dispatch_pet_id)
    update_my_fish_ids_in_bag(member.id, my_fish_ids_in_bag)
    # 删除派遣的蛋蛋龙模型
    my_dispatch_pet_info.delete()
    # 更新派遣列表缓存
    my_dispatch_pet_ids = get_my_dispatch_pet_ids(member.id)
    if my_dispatch_pet_info.my_fish_id in my_dispatch_pet_ids:
        my_dispatch_pet_ids.remove(my_dispatch_pet_info.my_fish_id)
    update_my_dispatch_pet_ids(member.id, my_dispatch_pet_ids)

    level,remain_exp,next_level_exp = get_almanac_level_info(member.id)

    #do task
    rewards, my_task = check_done_task(member,'t003','',1)
    if rewards:
        task_list = update_my_normal_task(member_id, my_task)
    else:
        task_list = ''
    result = {'almanac_level':level,
              'exp':remain_exp,
              'next_exp':next_level_exp,
              'almanac_fish':almanac_fish,
              'rewards':rewards,
              'task_list':task_list,
              }  
    return result


</t>
<t tx="newlife.20101220143820.1371">#购买派遣龙位
def buyAssistPositionAMF(request, skey, type):
    member = login_member(request, skey)

    almanac_info = get_or_create_almanac_info(member.id)
    total_exp = almanac_info.exp + almanac_info.added_exp
    task_list = ''
    if type == 's':
        if member.shell_dispatch &gt;= 6:
            return {'error':'no more position can be open'}
        if total_exp &lt; BUY_SHELL_POSITION_EXP[member.shell_dispatch][0]:
            return {'error':'exp not enough'}
        sell_shells = BUY_SHELL_POSITION_EXP[member.shell_dispatch][1]
        if member.shells &lt; sell_shells:
            return {'error':'shells not enough'}
        member.shells -= sell_shells
        member.shell_dispatch += 1
        member.save()

        #do task
        rewards, my_task = check_done_task(member, 't014', 'shell', sell_shells)
        if my_task:
            task_list = update_my_normal_task(member_id, my_task)
    elif type == 'p':
        if member.pearl_dispatch &gt;= 6:
            return {'error':'no more position can be open'}
        if total_exp &lt; BUY_PEARL_POSITION_EXP[member.pearl_dispatch]:
            return {'error':'exp not enough'}
        if member.pearls &lt; 2000:
            return {'error':'pearls not enough'}
        member.pearls -= 2000
        member.pearl_dispatch += 1
        member.save()

        #do task
        rewards, my_task = check_done_task(member, 't014', 'pearl', 2000)
        if rewards:
            task_list = update_my_normal_task(member_id, my_task)

    return {'shells':member.shells,
            'pearls':member.pearls,
            'rewards':rewards,
            'task_list':task_list,}

</t>
<t tx="newlife.20101220143820.1372">#取得快速收鱼道具数量
def getShortPhysicInfoAMF(request, skey, pet_id):
    member = login_member(request, skey)
    pet_id = int(pet_id)
    pet_info = get_my_dispatch_pet_info(member.id, pet_id)
    # 捕鱼状态不对
    if pet_info.status != 'c':
        return {'error':'status error'}
    # 计算剩余时间
    rest_seconds = 0
    if pet_info.end_time is not None:
        rest_time = pet_info.end_time - datetime.now()
        rest_seconds = rest_time.days*24*3600 + rest_time.seconds

    if rest_seconds&lt;=0:
        return {'error':'already return'}

    my_item = get_or_create_my_item(member.id, 'p2')
    need_item_count = math.ceil(float(rest_seconds)/(my_item.shorten_time*3600.0))
    shop_product = get_shop_product('p2')
    if not shop_product:
        return {'error': 'server data error(-10000)'}

    task_list = ''
    rewards = ''
    return {'need_num':need_item_count,
            'total_num':my_item.total_num,
            'name':my_item.name,
            'price':shop_product.price,
            'sale_type':shop_product.sale_type,
            'task_list':task_list,
            'rewards':rewards,}

</t>
<t tx="newlife.20101220143820.1373">#使用快速收鱼道具
def shortPhysicAMF(request, skey, pet_id, useone=True):
    member = login_member(request, skey)

    pet_id = int(pet_id)
    pet_info = get_my_dispatch_pet_info(member.id, pet_id)
    # 捕鱼状态不对
    if pet_info.status != 'c':
        return {'error':'status error'}
    # 此次捕鱼已经用过药丸
    #if pet_info.can_be_used_physic():
    #    return {'error':'already used'}
    my_item = get_or_create_my_item(member.id, 'p2')
    if not (my_item and pet_info):
        return {'error': 'data error(-10000)'}
    # 道具类型错误
    if my_item.item_type != 'SST':
        return {'error':'data error(-10001)'}

    # 计算剩余时间
    rest_seconds = 0
    if pet_info.end_time is not None:
        rest_time = pet_info.end_time - datetime.now()
        rest_seconds = rest_time.days*24*3600 + rest_time.seconds

    if rest_seconds&lt;=0:
        return {'error':'already return'}

    need_item_count = 1
    if not useone:
        need_item_count = math.ceil(float(rest_seconds)/(my_item.shorten_time*3600.0))
    # 药丸不够
    if my_item.total_num &lt; need_item_count:
        return {'error':'not enough physic'}
    # 药丸冷却中
    #if get_my_item_cooldown_precent(member.id, my_item) != 100:
    #    return {'error':'item is cooldown'}

    # 减道具
    my_item.total_num -= need_item_count
    my_item.last_used = datetime.now()
    my_item.save()

    pet_info = use_physic_for_pet(pet_info, my_item, need_item_count)
    # 计算剩余时间
    if pet_info.end_time is not None:
        rest_time = pet_info.end_time - datetime.now()
        rest_seconds = rest_time.days*24*3600 + rest_time.seconds
    else:
        rest_seconds = 0

    caught_fish_styles = pet_info.get_caught_fish_styles()
    fishes = get_fishes(caught_fish_styles)
    fish_list = [{'style':fish.style} for fish in fishes]

    #do task
    rewards, my_task = check_done_task(member, 't002', 'p2', 1)
    if rewards:
        task_list = update_my_normal_task(member_id, my_task)
    else:
        task_list = ''
    result = {'status':pet_info.status,
              'rest_time':rest_seconds,
              'is_stolen':pet_info.is_stolen,
              'is_protected':pet_info.is_protected,
              'dragon_list':fish_list,
              'task_list':task_list,
              'rewards':rewards,
              }

    return result
</t>
<t tx="newlife.20101220143820.1374">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20101220143820.1375"># -*- coding: utf-8 -*-

import random
from apps.system.helper import login_member
from apps.members.cache import *
from apps.members.helper import *
from apps.games.helper import *
from global_constants import DEFAULT_PET_TIME


</t>
<t tx="newlife.20101220143820.1376">def requestAvailableSkillAMF(request, skey, family, star, level):
    member = login_member(request, skey)

    family = int(family)
    star = int(star)
    level = int(level)

    skill_styles = get_available_skills(family, star, level)
    skill_styles = map(lambda x: 'i_%s' % x, skill_styles)

    # TODO: Add Dragon vs. AI rate
    return {'skillBookStyle':skill_styles, 'rate':0}


</t>
<t tx="newlife.20101220143820.1377">def cardGameStartLevelAMF(request, skey, my_dragon_id, skills, cards, stage=None):
    member = login_member(request, skey)

    if skills == '':
        skills = []
    else:
        skills = skills.split(',')
    if cards == '':
        cards = []
    else:
        cards = cards.split(',')
    if len(skills) &gt; 4 or len(cards) &gt; 2:
        return {'errorCode':-1010}  # 携带的技能书或道具数量超过限制
    take_item_styles = skills + cards

    if my_dragon_id is None:
        return {'errorCode':-1001}  # 参数不足
    my_dragon_id = int(my_dragon_id)
    my_dragon = get_my_fish(member.id, my_dragon_id)
    if not my_dragon:
        return {'errorCode':-1002}  # 龙不存在
    if my_dragon.my_fish_tank_id != 0:
        return {'errorCode':-1003}  # 龙不在袋中
    if my_dragon.last_dispatched and my_dragon.last_dispatched + timedelta(0, 4*DEFAULT_PET_TIME) &gt; datetime.now():
            return {'errorCode':-1005}  # 蛋蛋龙休息中
    # 检查并保存用户的技能书
    for item_style in take_item_styles:
        if get_item(item_style) is None:  # 技能书不存在
            return {'errorCode':-1008}
        my_skill_book = get_or_create_my_item(member.id, item_style)
        if my_skill_book.total_num &lt;= 0:        # 技能书道具不足
            return {'errorCode':-1009}

    if stage is not None:   # 开始新的游戏
        if stage &gt; member.tempo:
            return {'errorCode':-1004}  # 无效关卡
        # 游戏基本信息
        game_status = init_game_status(member.id)
        game_status['stage'] = stage
    else:   # 续关
        if game_status['status'] == 'level_completed':  # 继续下一小关
            game_status = get_game_status(member.id)
            if game_status is None:
                return {'errorCode':-1006}  # 游戏状态不存在
            game_status['level'] += 1
            game_status['round'] = 1
        else:
            delete_game_status(member.id)
            return {'errorCode':-1007}
    game_status['dragon_id'] = my_dragon_id
    game_status['status'] = 'playing'
    game_status['start_time'] = datetime.now()
    level_info = get_game_level_info(game_status['stage'], game_status['level'])
    game_status['total_position'] = level_info
    # 玩家信息
    game_status['player'] = get_player_base_info(my_dragon, level_info, skills, cards)
    # Boss信息
    game_status['boss'] = get_boss_base_info(level_info)
    set_game_status(member.id, game_status)
    # 扣除道具
    for item_style in take_item_styles:
        my_skill_book = get_or_create_my_item(member.id, item_style)
        my_skill_book.total_num -= 1
        my_skill_book.save()
    game_status['player']['cards'] = map(lambda x:get_card_dict_info(x), game_status['player']['cards'])
    return {'player':game_status['player'], 
            'boss':{
                    'life':game_status['boss']['life'],
                    'card_count':4,
                    'skills':game_status['boss']['skills']
                    }
            }


</t>
<t tx="newlife.20101220143820.1378">def cardGameGiveUpLevelAMF(request, skey, cur_level):
    member = login_member(request, skey)

    game_status = get_game_status(member.id)
    if game_status is None:
        return {'errorCode':-1006}  # 游戏状态不存在
    # 判断合法性
    s_cur_level = '%s%s' % (str(game_status['stage']), str(game_status['level']))
    if s_cur_level != cur_level: # 判断当前所处关卡
        delete_game_status(member.id)
        return {'errorCode':-1007}
    if game_status['status'] != 'level_completed': # 判断状态
        delete_game_status(member.id)
        return {'errorCode':-1007}

    almanac_fish = []
    for fish_style in game_status['caught_dragon'].split(','):
        fish = get_fish_with_stylecolor(fish_style)
        # 打开新图鉴
        my_fish = new_a_member_fish(member, fish)
        opened = isopen_new_almanac(member, my_fish)
        if opened:
            get_exp, open_all = update_member_almanac_exp(member, my_fish)
            temp = {
                'style':my_fish.style,
                'name':fish.name,
                'star':my_fish.star,
                'bonus':get_exp,
                'level':my_fish.level,
                'open_all':open_all,
            }
            almanac_fish.append(temp)
    delete_game_status(member.id)
    level,remain_exp,next_level_exp = get_almanac_level_info(member.id)
    return {
            'almanac_level':level,
            'exp':remain_exp,
            'next_exp':next_level_exp,
            'almanac_fish':almanac_fish
            }


</t>
<t tx="newlife.20101220143820.1379">def playCardsAMF(request, skey, card_indexs, move=None):
    member = login_member(request, skey)

    game_status = get_game_status(member.id)
    if game_status is None:
        return {'errorCode':-1006}  # 游戏状态不存在
    if game_status['status'] != 'playing': # 判断状态
        delete_game_status(member.id)
        return {'errorCode':-1007}
    if game_status['active'] != 'p':
        return {'errorCode':-1011}  # 非玩家出牌阶段
    card_indexs = map(lambda x:int(x), card_indexs.split(','))
    if len(card_indexs) &gt; 3:
        return {'errorCode':-1012}  # 出牌数量超过限制
    card_full_styles = []           # 取得出牌的full style列表
    for card_idx in card_indexs:
        if card_idx &gt; len(game_status['player']['cards']) - 1 or card_idx &lt;= 0:
            return {'errorCode':-1001}
        card_full_styles.append(game_status['player']['cards'][card_idx])
    card_list = get_cards_by_full_styles(card_full_styles)
    if len(filter(lambda x:x.is_main, card_list)) != 1:
        return {'errorCode':-1013}  # 主牌数大于1
    if game_status['player']['played_groups'][card_list[0].group-1] &lt; 1:
        return {'errorCode':-1014}  # 该组别牌已出过

    # TODO: 更多规则

    action_list = []
    main_card, helper_card_list = get_main_card(card_list)
    if main_card.type == 1:     # 攻击
        current_action = {'code':0, 'args':{'effect':{'type':2}}}
        attack_addition = 0
        attack_range_addition = 0
        for card in helper_card_list:
            if card.helper_type == 1:
                attack_addition += card.helper_val
            elif card.helper_type == 2:
                attack_range_addition += card.helper_val
        attack = int(game_status['player']['attack'] * (1 + attack_addition / 100))
        attack_range = game_status['player']['attack_range'] + attack_range_addition
        if attack_range &lt; abs(game_status['player']['location']-game_status['boss']['location']):
            return {'errorCode':-1015}  # 攻击距离不够
        crit_addition = 0   # 暴击加成
        crit = game_status['player']['crit'] * (1 + crit_addition)
        offset = random.uniform(0.8, 1.2)
        if random.random() &gt; crit:  # 暴击成功
            current_action['args']['effect']['type'] = 3    # 暴击
            attack = int(attack * 2 * offset)
        else:
            attack = int(attack * offset)
        # boss进行防御，找到防御和防御辅助牌
        b_defense = 0
        b_defense_addition = 0
        b_can_defense = False
        b_card_list = get_cards_by_full_styles(game_status['boss']['cards'])
        b_main_defense_card = b_defense_helper_card = None
        # 防御主牌
        b_main_defense_card_list = filter(lambda x:x.is_main and card.type == 2, b_card_list)
        if len(b_main_defense_card_list) &gt; 0:
            b_can_defense = True
            b_main_defense_card = b_main_defense_card_list[0]
            current_action['code'] = 2
            current_action['args']['cards'] = [get_card_dict_info(b_main_defense_card)]
            b_card_list.remove(b_main_defense_card) # 扣除卡牌
        if b_can_defense:
            # 防御辅助牌
            b_defense_helper_card_list = filter(lambda x:not x.is_main and card.helper_type == 3, b_card_list)
            if len(b_defense_helper_card_list) &gt; 0:
                b_defense_helper_card = b_defense_helper_card_list[0]
                b_defense_addition += b_defense_helper_card.helper_val
                current_action['args']['cards'].append(get_card_dict_info(b_defense_addition))
                b_card_list.remove(b_defense_addition)  # 扣除卡牌
                game_status['boss']['cards'] = map(lambda x: '%s|%s|%s'%(x.base_style,x.color,x.value), b_card_list)
            offset = random.uniform(0.8, 1.2)
            b_defense = game_status['boss']['defense'] * (1 + b_defense_addition / 100) * offset
        injury = attack - b_defense
        if injury &lt;= 0: injury = 1
        current_action['args']['effect']['value'] = injury
        game_status['boss']['life'] -= injury
        game_status, current_action, action_list = end_play_card(card_indexs, game_status, current_action, action_list)
        if game_status['boss']['life'] &lt; 0: # 游戏结束
            # 刷龙蛋
            new_dragon = refresh_a_fish(game_status['stage'], game_status['level'])
            game_status['current_dragon_style'] = new_dragon and new_dragon.style or None
            if game_status['caught_dragon']:
                game_status['caught_dragon'] = '%s,%s' (game_status['caught_dragon'], game_status['current_dragon_style'])
            else:
                game_status['caught_dragon'] = '%s' % (game_status['current_dragon_style'])
            game_status['status'] = 'level_completed'
            set_game_status(member.id, game_status)
            action_list.append({
                              'code':4,
                              'win':True,
                              'dragon':new_dragon and {'style':new_dragon.style}
                              })
    elif main_card.type == 2:   # 防御
        # TODO:
        pass
    elif main_card.type == 3:   # 治疗
        current_action = {'code':0, 'args':{'effect':{'type':1}}}
        recover = 0
        recover_addition = 0
        for card in helper_card_list:
            if card.helper_type == 5:
                recover_addition += card.helper_val
        offset = random.uniform(0.8, 1.2)
        recover = int(game_status['player']['max_life'] * (1 + recover_addition / 100) * 0.1 * offset)
        game_status['player']['life'] += recover
        current_action['args']['value'] = recover
        game_status, current_action, action_list = end_play_card(card_indexs, game_status, current_action, action_list)
    elif main_card.type == 4:   # 移动
        current_action = {'code':0, 'args':{'effect':{'type':4}}}
        if move is None:
            return {'errorCode':-1001}
        move = int(move)
        moved_location = game_status['player']['location'] + move
        # 移动范围不能等于或超过距离最近的敌人的位置，也不能超过场景最大范围
        if moved_location &lt; 0 or moved_location &gt; game_status['boss']['location']:
            return {'errorCode':-1016}
        length = 0
        length_addition = 0
        for card in helper_card_list:
            if card.helper_type == 4:
                length_addition += card.helper_val
        length = game_status['player']['speed'] + length_addition
        if abs(move) &gt; length:
            return {'errorCode':-1017}
        game_status['player']['location'] += move
        current_action['args']['value'] = move
        game_status, current_action, action_list = end_play_card(card_indexs, game_status, current_action, action_list)
    elif main_card.type == 5:   # 特殊
        # TODO:
        pass

    game_status['player']['left_groups'][main_card.group] -= 1  # 扣除可出牌的组
    set_game_status(member.id, game_status) # 保存游戏状态

    return {'action_list':action_list}


</t>
<t tx="newlife.20101220143820.1380">def endRoundAMF(request, skey, sell_card_indexs=''):
    member = login_member(request, skey)

    game_status = get_game_status(member.id)
    if game_status is None:
        return {'errorCode':-1006}  # 游戏状态不存在
    if game_status['status'] != 'playing': # 判断状态
        delete_game_status(member.id)
        return {'errorCode':-1007}

    action_list = []
    if sell_card_indexs:
        sell_card_indexs = map(lambda x:int(x), sell_card_indexs.split(','))
    if len(game_status['player']['cards']) - len(sell_card_indexs) &gt; 8:
        return {'errorCode':-1018}  # 强制卖牌
    # 卖牌
    sell_card_styles = []
    for card_idx in sell_card_indexs:
        if card_idx &gt; len(game_status['player']['cards']) - 1 or card_idx &lt;= 0:
            return {'errorCode':-1001}
        sell_card_styles.append(game_status['player']['cards'][card_idx])
    for card_style in sell_card_styles:
        game_status['player']['crystal'][int(card_style.split('|')[1])] += int(card_style.split('|')[2])
    # 扣除
    for card_idx in sell_card_indexs:    # 扣除卡牌
        game_status['player']['cards'].pop(card_idx)

    # TODO: 无能的boss
    action_list.append({'code':1, 'args':{'step':1}})
    action_list.append({'code':1, 'args':{'step':2}})
    action_list.append({'code':1, 'args':{'step':3}})

    # 玩家抓牌
    new_card_styles = get_round_cards()
    current_action = {'code':5, 'args':{'new_cards':map(lambda x: get_card_dict_info(x), new_card_styles)}}
    game_status['player']['cards'].extend(new_card_styles)
    action_list.append(current_action)
    set_game_status(member.id, game_status) # 保存游戏状态

    return {'action_list':action_list}


</t>
<t tx="newlife.20101220143820.1381">def useSkillAMF(request, skey, skill):
    member = login_member(request, skey)

    # TODO:
</t>
<t tx="newlife.20101220143820.1384">#获取背包龙
def getDragonsInBagAMF(request, skey):
    member = login_member(request, skey)
    fish_list = []

    my_fish_ids_in_bag = get_my_fish_ids_in_bag(member.id)
    my_fishes = get_my_fishes(member.id, my_fish_ids_in_bag)
    my_fishes = calculate_my_fishes_in_bag(my_fishes)
    for my_fish in my_fishes:
        temp = {
                'id':my_fish.id,
                'name':my_fish.get_display_name(),
                'style':my_fish.get_display_style(),
                'star':my_fish.star,
                'family':my_fish.family,
                'is_highest_level':my_fish.is_highest_level(),
                'hungry':my_fish.hungry,
                'level':my_fish.level,
                'next_deformed_level': my_fish.next_deform_level(),
                'exp':my_fish.exp,
                'cd_time':my_fish.get_dispatch_rest_time(),
                'power':my_fish.get_power(),
                'max_exp':60,
                'can_be_potion':my_fish.can_be_used_potion(),
                'property': get_fish_property(my_fish.star, my_fish.level, my_fish.color),
                'has_finished':has_finished_fish(member.id, my_fish.style, my_fish.star),
                }
        fish_list.append(temp)
    dragon_position = [DEFAULT_SYS_MAX_BAGS, member.shell_bags, member.pearl_bags]
    task_list = ''
    rewards = ''
    return {'list':fish_list,
            'dragon_position':dragon_position,
            'task_list':task_list,
            'rewards':rewards,}
@doc
my_fishes = get_my_fishes(member.id, my_fish_ids_in_bag)
简单的说，这个方法就是根据参数 my_fish_ids_in_bag 来获取实际的鱼的对象。其实另一个参数member.id是没有意义的.因为在获取my_fish_ids_in_bag的时候
member.id就已经发挥了作用了。但是由于有缓存这个member.id是缓存的key的一部分（缓存！这里有memcached）。

</t>
<t tx="newlife.20101220143820.1393">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20101220143820.1394"># -*- coding: utf-8 -*-
from apps.system.helper import *
from apps.members.cache import *
from apps.members.helper import *
from apps.members.constants import *
from datetime import datetime, timedelta


</t>
<t tx="newlife.20101220143820.1395">def getGiftsCountAMF(request, skey):
    member = login_member(request, skey)
    limit_temp_bag_info_ids = get_valid_temp_bag_info_ids(member.id)
    other_temp_bag_info_others_ids = get_other_my_temp_bag_info_ids(member.id)

    task_list = ''
    rewards = ''
    return {'count':len(limit_temp_bag_info_ids) + len(other_temp_bag_info_others_ids),
            'task_list':task_list,
            'rewards':rewards,}


@doc
</t>
<t tx="newlife.20101220143820.1396">#获取用户礼物信息
def getGiftsAMF(request, skey):
    member = login_member(request, skey)
    limit_temp_bag_info_ids = get_valid_temp_bag_info_ids(member.id)
    other_temp_bag_info_others_ids = get_other_my_temp_bag_info_ids(member.id)

    temp_bag_info_list = []
    for limit_my_temp_bag_info_id in limit_temp_bag_info_ids:
        temp_bag_info = get_my_temp_bag_info(member.id, limit_my_temp_bag_info_id)
        rest_time = temp_bag_info.create_time + timedelta(0, DEFAULT_GIFTS_EXPIRE_DICT[temp_bag_info.type]) - datetime.now()
        rest_seconds = rest_time.days * 86400 + rest_time.seconds
        if temp_bag_info.sender_id &gt; 0:
            sender_name = get_member(temp_bag_info.sender_id).nickname
        else:
            sender_name = ""
        temp_bag_info_dict = {
                              'id':temp_bag_info.id,
                              'sender_id':temp_bag_info.sender_id,
                              'sender_name':sender_name,
                              'style':temp_bag_info.style,
                              'gift_type':temp_bag_info.type,
                              'gift_name':temp_bag_info.name,
                              'quantity':temp_bag_info.quantity,
                              'rest_time':rest_seconds
                              }
        temp_bag_info_list.append(temp_bag_info_dict)
    temp_bag_info_list.sort(lambda x,y: cmp(x['rest_time'], y['rest_time']) )

    for other_temp_bag_info_others_id in other_temp_bag_info_others_ids:
        temp_bag_info = get_my_temp_bag_info(member.id, other_temp_bag_info_others_id)
        if temp_bag_info.sender_id &gt; 0:
            sender_name = get_member(temp_bag_info.sender_id).nickname
        else:
            sender_name = ""
        temp_bag_info_dict = {
                              'id':temp_bag_info.id,
                              'sender_id':temp_bag_info.sender_id,
                              'sender_name':sender_name,
                              'style':temp_bag_info.style,
                              'gift_type':temp_bag_info.type,
                              'gift_name':temp_bag_info.name,
                              'quantity':temp_bag_info.quantity,
                              'rest_time':0
                              }
        temp_bag_info_list.append(temp_bag_info_dict)

    task_list = ''
    rewards = ''    
    return {'gift_list':temp_bag_info_list,
            'task_list':task_list,
            'rewards':rewards,}


</t>
<t tx="newlife.20101220143820.1397"># 领取礼物
def receiveGiftRewardAMF(request, skey, gift_id):
    member = login_member(request, skey)

    gift_id = int(gift_id)
    temp_bag_info = get_my_temp_bag_info(member.id, gift_id)
    if temp_bag_info is None:
        return {'error':'gift does not exist'}
    if temp_bag_info.will_expire:
        if temp_bag_info.create_time + timedelta(0, DEFAULT_GIFTS_EXPIRE_DICT[temp_bag_info.type]) &lt; datetime.now():
            return {'error':'gift expired'}

    gift_type = temp_bag_info.style[0]
    # 判断背包位是否够放下龙和蛋
    if gift_type == 'd':
        if len(get_my_fish_ids_in_bag(member.id)) &gt;= member.current_bags():
            return {'error':'Bag is not enough'}
    name, member, my_fishs = new_user_product(member, gift_type, temp_bag_info.style, temp_bag_info.quantity, temp_bag_info.time_limit)
    almanac_fish = []
    if gift_type == 'd':
        my_fish = my_fishs[0]
        opened = isopen_new_almanac(member, my_fish)
        if opened:
            update_member_almanac_exp(member, my_fish)
            temp = {
                'style':my_fish.style,
                'name':my_fish.get_display_name(),
                'star':my_fish.star,
                'bonus':get_fish_property(my_fish.star, my_fish.level, my_fish.color),
                'level':my_fish.level
            }
            almanac_fish.append(temp)

    # 更新缓存
    if temp_bag_info.will_expire:
        temp_bag_info_ids = get_limit_my_temp_bag_info_ids(member.id)
        if temp_bag_info.id in temp_bag_info_ids:
            temp_bag_info_ids.remove(temp_bag_info.id)
        update_limit_my_temp_bag_info_ids(member.id, temp_bag_info_ids)
    else:
        temp_bag_info_ids = get_other_my_temp_bag_info_ids(member.id)
        if temp_bag_info.id in temp_bag_info_ids:
            temp_bag_info_ids.remove(temp_bag_info.id)
        update_other_my_temp_bag_info_ids(member.id, temp_bag_info_ids)
    temp_bag_info.delete()

    level,remain_exp,next_level_exp = get_almanac_level_info(member.id)
    task_list = ''
    rewards = ''
    return {'almanac_level':level,
            'exp':remain_exp,
            'next_exp':next_level_exp,
            'almanac_fish':almanac_fish,
            'shells':member.shells,
            'pealrs':member.pearls,
            'task_list':task_list,
            'rewards':rewards,
            }


</t>
<t tx="newlife.20101220143820.1398"># 删除礼物
def removeGiftRewardAMF(request, skey, gift_id):
    member = login_member(request, skey)

    gift_id = int(gift_id)
    temp_bag_info = get_my_temp_bag_info(member.id, gift_id)
    if temp_bag_info is None:
        return {'error':'gift does not exist'}
    if temp_bag_info.will_expire:
        if temp_bag_info.create_time + timedelta(0, DEFAULT_GIFTS_EXPIRE_DICT[temp_bag_info.type]) &lt; datetime.now():
            return {'error':'gift expired'}

    # 更新缓存
    if temp_bag_info.will_expire:
        temp_bag_info_ids = get_limit_my_temp_bag_info_ids(member.id)
        if temp_bag_info.id in temp_bag_info_ids:
            temp_bag_info_ids.remove(temp_bag_info.id)
        update_limit_my_temp_bag_info_ids(member.id, temp_bag_info_ids)
    else:
        temp_bag_info_ids = get_other_my_temp_bag_info_ids(member.id)
        if temp_bag_info.id in temp_bag_info_ids:
            temp_bag_info_ids.remove(temp_bag_info.id)
        update_other_my_temp_bag_info_ids(member.id, temp_bag_info_ids)
    temp_bag_info.delete()

    task_list = ''
    rewards = ''
    return {'state':'success',
            'task_list':task_list,
            'rewards':rewards,}
</t>
<t tx="newlife.20101220143820.1399">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20101220143820.1400">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20101220143820.1401"># -*- coding: utf-8 -*-

from datetime import datetime
from apps.system.helper import login_member
from apps.members.cache import *
from apps.members.helper import *
from apps.shops.cache import *

</t>
<t tx="newlife.20101220143820.1402">#获取背包中的道具
def getItemsInBagAMF(request, skey):
    member = login_member(request, skey)

    my_items = get_my_items_in_bag(member.id)
    my_item_list = []
    for my_item in my_items:
        if my_item.total_num &gt; 0:
            temp = {'name':my_item.name,
                    'style':my_item.style,
                    'description':my_item.description,
                    'total_num' : my_item.total_num,
                    'remain_cooldown':get_my_item_cooldown_precent(member.id, my_item)
                   }
            my_item_list.append(temp)

    task_list = ''
    rewards = ''

    return {'result': my_item_list, 'task_list':task_list,'rewards':rewards}

</t>
<t tx="newlife.20101220143820.1403"># 获取用户背包中所有装饰
def getMemberAdornInBagAMF(request, skey):
    member = login_member(request, skey)

    my_adorn_ids = get_my_adorn_ids_in_bag(member.id)
    my_adorns = get_my_adorns(member.id, my_adorn_ids)
    my_adorn_list = []
    for my_adorn in my_adorns:
        shop_adorn = get_shop_product(my_adorn.style)
        temp = {'id':my_adorn.id,
                'name':my_adorn.name,
                'style':my_adorn.style,
                'description':my_adorn.description,
                'x':my_adorn.x,
                'y':my_adorn.y,
                'star':my_adorn.star,
                'family':my_adorn.family,
                'p_type':my_adorn.p_type,
                'a_type':my_adorn.a_type,
                'expire_time':my_adorn.expire_time,
                'sale_type':shop_adorn.sale_type,
                'price': shop_adorn.price,
               }
        my_adorn_list.append(temp)

    task_list = ''
    rewards = ''

    return {'result': my_adorn_list, 'task_list':task_list,'rewards':rewards}

</t>
<t tx="newlife.20101220143820.1404">#替换龙窝背景
def switchBackgroundAMF(request, skey, my_fish_tank_id, my_new_background_id):
    member = login_member(request, skey)

    my_fish_tank_id = int(my_fish_tank_id)
    my_fish_tank = get_my_fish_tank(member.id, my_fish_tank_id)
    if not my_fish_tank:
        return {'error':'data error (-20001)'}
    my_new_background_id = int(my_new_background_id)
    my_new_background = get_my_adorn(member.id, my_new_background_id)

    # 检查新背景
    if my_new_background.remain_seconds == 0:
        return {'error':'it is a overdue background.'}

    # 检查当前背景是否是默认背景
    if my_fish_tank.c_style:
        # 获取当前背景
        current_adorn_ids = get_my_adorn_ids_in_tank(member.id, my_fish_tank_id)
        current_adorns = get_my_adorns(member.id, current_adorn_ids)
        for adorn in current_adorns:
            if adorn.a_type == 'n':
                current_background = adorn
                break
        # 把当前背景移到背包
        current_background.my_fish_tank_id = 0
        current_background.save()

    # 装载新背景
    my_fish_tank.c_style = my_new_background.style
    my_fish_tank.save()
    my_new_background.my_fish_tank_id = my_fish_tank.id
    my_new_background.save()

    task_list = ''
    rewards = ''
    return {'status':'success',
            'task_list':task_list,
            'rewards':rewards,}

</t>
<t tx="newlife.20101220143820.1405">#恢复龙窝默认背景
def resetBackgroundAMF(request, skey, my_fish_tank_id):
    member = login_member(request, skey)

    my_fish_tank_id = int(my_fish_tank_id)
    my_fish_tank = get_my_fish_tank(member.id, my_fish_tank_id)
    # 检查当前背景是否已经是默认背景
    if not my_fish_tank.c_style:
        return {'error':'it is default already.'}
    # 获取当前背景
    current_adorn_ids = get_my_adorn_ids_in_tank(member.id, my_fish_tank_id)
    current_adorns = get_my_adorns(member.id, current_adorn_ids)
    for adorn in current_adorns:
        if adorn.a_type == 'n':
            current_background = adorn
            break
    # 把当前背景移到背包
    current_background.my_fish_tank_id = 0
    current_background.save()
    my_fish_tank.c_style = None
    my_fish_tank.save()

    task_list = ''
    rewards = ''
    return {'status':'success',
            'task_list':task_list,
            'rewards':rewards,}

</t>
<t tx="newlife.20101220143820.1406">#移动装饰
def moveOrnamentAMF(request, skey, my_fish_tank_id, my_adorn_id, x, y):
    member = login_member(request, skey)

    my_fish_tank_id = int(my_fish_tank_id)
    my_fish_tank = get_my_fish_tank(member.id, my_fish_tank_id)
    if not my_fish_tank:
        return {'error':'data error (-20001)'}

    my_adorn_id = int(my_adorn_id)
    my_adorn = get_my_adorn(member.id, my_adorn_id)
    if my_adorn.remain_seconds == 0 and my_adorn.my_fish_tank_id == 0 and my_adorn.my_fish_tank_id == my_fish_tank_id:
        return {'error':'data error (-20002)'}

    x = int(x)
    y = int(y)
    my_adorn.x, my_adorn.y = x, y
    my_adorn.save()

    task_list = ''
    rewards = ''
    return {'status':'success',
            'task_list':task_list,
            'rewards':rewards,}
</t>
<t tx="newlife.20101220143820.1407">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20101220143820.1408"># -*- coding: utf-8 -*-

from time import mktime
from datetime import timedelta
from django.conf import settings
from global_constants import OPEN_TROLL_LEVEL, DEFAULT_PET_TIME
from apps.system.helper import login_member
from apps.members.helper import *
from apps.members.cache import *
from apps.products.cache import *
from apps.shops.cache import get_shop_product
from apps.tasks.helper import update_my_normal_task, check_done_task, get_task_rewards_info

</t>
<t tx="newlife.20101220143820.1409">#获取龙窝列表(包括好友)
def getNestListAMF(request, skey, host_id):
    #通过sessionkey得到用户本人
    member = login_member(request, skey)

    host = get_member(int(host_id))
    # 获取用户所有的鱼塘
    my_tank_ids = get_my_fish_tank_ids(host.id)
    my_tanks = get_my_fish_tanks(host.id, my_tank_ids)
    fish_tank_list = []
    for my_tank in my_tanks:
        has_fish = len(get_my_fish_ids_in_tank(host.id, my_tank.id))&gt;0
        temp = {}
        temp['id'] = my_tank.id
        temp['name'] = my_tank.c_name or my_tank.name
        temp['style'] = my_tank.c_style or my_tank.style
        temp['capacity'] = my_tank.capacity
        temp['family'] = my_tank.family
        temp['star'] = my_tank.star
        temp['has_shit'] = has_fish and my_tank.will_generate_shit()
        temp['can_be_trolled'] = my_tank.can_be_trolled and my_tank.troll_times&gt;0
        temp['is_protected'] = my_tank.is_protected()
        if member.id == host.id:
            temp['troll_password'] = my_tank.troll_password
        fish_tank_list.append(temp)

    fish_tank_list.sort(lambda x,y: cmp(x['name'], y['name']))
    task_list = ''
    rewards = ''
    if member.id == host.id:
        nest_position = [DEFAULT_SYS_MAX_TANKS, member.shell_tanks, member.friend_tanks, member.pearl_tanks]
        friend_sns_ids = get_friend_sns_ids(skey, member.id, settings.SNS)
    else:
        nest_position = []
        friend_sns_ids = []
        #do task
        rewards, my_task = check_done_task(member, 't030', '', 1)
        if rewards:
            task_list = update_my_normal_task(member.id, my_task)
    return {'tank_list':fish_tank_list, 
            'nest_position':nest_position,
            'friend_num':len(friend_sns_ids),
            'task_list':task_list,
            'rewards':rewards}

</t>
<t tx="newlife.20101220143820.1410">#获取龙窝内物品(包括好友)
def getObjectsOfNestAMF(request, skey, host_id, my_tank_id):
    member = login_member(request, skey)

    host_id = int(host_id)
    my_tank_id = int(my_tank_id)

    host = get_member(host_id)
    my_tank, my_fishes, my_decos = get_and_caculate_objects_in_tank(host_id, my_tank_id)
    tank_dict = {'id': my_tank.id,
                 'name': my_tank.c_name or my_tank.name,
                 'style': my_tank.c_style or my_tank.style,
                 'capacity': my_tank.capacity,
                 'family': my_tank.family,
                 'star': my_tank.star,
                 'sell_price': my_tank.sell_price(),
                 'has_shit': len(my_fishes)&gt;0 and my_tank.will_generate_shit(),
                 'troll_price': my_tank.troll_price,
                 'troll_times': my_tank.troll_times,
                 'is_protected': my_tank.is_protected(),
                 }
    if member.id == host.id:
        tank_dict['troll_password'] = my_tank.troll_password

    deco_list = []
    for my_deco in my_decos:
        if my_deco.remain_seconds &lt;= 0:
            delete_a_member_deco_in_tank(host, my_tank_id, my_deco.id)
        else:
            shop_deco = get_shop_product(my_deco.style)
            temp = {'id': my_deco.id,
                    'name': my_deco.name,
                    'style': my_deco.style,
                    'family': my_deco.family,
                    'star': my_deco.star,
                    'speed_up': my_deco.speed_up,
                    'remain_seconds':int(my_deco.remain_seconds),
                    'sale_type':shop_deco.sale_type,
                    'price': shop_deco.price,
                    }
            deco_list.append(temp)
    fish_list = []
    for my_fish in my_fishes:
        temp = {
                'id': my_fish.id,
                'name': my_fish.get_display_name(),
                'style': my_fish.get_display_style(),
                'star': my_fish.star,
                'family': my_fish.family,
                'is_highest_level': my_fish.is_highest_level(),
                'hungry': my_fish.hungry,
                'level': my_fish.level,
                'next_deformed_level': my_fish.next_deform_level(),
                'has_deformed': my_fish.has_deformed,
                'exp': my_fish.exp,
                'power':my_fish.get_power(),
                'cd_time':my_fish.get_dispatch_rest_time(),
                'max_exp': LEVEL_UP_EXP,
                'can_be_potion': my_fish.can_be_used_potion(),
                'property': get_fish_property(my_fish.star, my_fish.level, my_fish.color),
                'has_finished':has_finished_fish(member.id, my_fish.style, my_fish.star),
                }
        fish_list.append(temp)

    level,remain_exp,next_level_exp = get_almanac_level_info(host.id)
    task_list = ''
    rewards = ''
    return {'dragon_tank':tank_dict, 
            'partner_list':deco_list, 
            'dragon_list':fish_list,
            'level':level,
            'remain_exp':remain_exp,
            'next_level_exp':next_level_exp,
            'task_list':task_list,
            'rewards':rewards
            }

</t>
<t tx="newlife.20101220143820.1411">#买龙窝位
def buyNestPositionAMF(request, skey, type):
    member = login_member(request, skey)

    max_pearl_position, max_shell_position, max_friend_position = DEFAULT_MEMBER_MAX_TANKS.split('_')
    # 珍珠购买
    task_list = ''
    if type == 'pearl':
        if member.pearl_tanks &gt;= max_pearl_position:
            return {'error':'pearl position full'}
        sell_pearls = (member.pearl_tanks+1)*100
        if member.pearls &lt; sell_pearls:
            return {'error':'pearl limited'}
        member.pearl_tanks += 1
        member.pearls -= sell_pearls
        member.save()

        #do task
        rewards, my_task = check_done_task(member, 't013', 'pearl', sell_pearls,)
        if rewards:
            task_list = update_my_normal_task(member.id, my_task)
    # 贝壳购买
    elif type == 'shell':
        if member.shell_tanks &gt;= max_shell_position:
            return {'error':'shell position full'}
        level,remain_exp,next_level_exp = get_almanac_level_info(member.id)
        if member.shell_tanks &gt;= int(level/3):
            return {'error':'level limited'}
        sell_shells = pow(level-1, 2)*150
        if member.shells &lt; sell_shells:
            return {'error':'shell limited'}
        member.shell_tanks += 1
        member.shells -= sell_shells
        member.save()

        #do task
        rewards, my_task = check_done_task(member, 't013', 'shell', sell_shells)
        if rewards:
            task_list = update_my_normal_task(member.id, my_task)
    # 好友限制
    elif type == 'friend':
        if member.friend_tanks &gt;= max_friend_position:
            return {'error':'friend position full'}
        friends_num = len(get_friend_sns_ids(skey, member.id, settings.SNS))
        friend_position = 0
        if friends_num &gt;= 30:
            friend_position = 6
        elif friends_num &gt;= 10:
            friend_position = 3
        elif friends_num &gt;= 3:
            friend_position = 1
        if member.friend_tanks &gt;= friend_position:
            return {'error':'friend limited'}
        if member.friend_tanks &gt;= 3:
            sell_shells = 50000
        elif member.friend_tanks &gt;= 1:
            sell_shells = 3000
        else:
            sell_shells = 200
        if member.shells &lt; sell_shells:
            return {'error':'shell limited'}
        member.friend_tanks += 1
        member.shells -= sell_shells
        member.save()

        #do task
        rewards, my_task = check_done_task(member, 't013', 'friend', sell_shells)
        if rewards:
            task_list = update_my_normal_task(member.id, my_task)
    else:
        return {'error':'parameter error'}

    return {'status':'success',
            'shells':member.shells,
            'pearls':member.pearls,
            'task_list':task_list,
            'rewards':rewards}

</t>
<t tx="newlife.20101220143820.1412">#喂食(包括好友)
def feedDragonAMF(request, skey, my_tank_id):
    member = login_member(request, skey)

    my_tank_id = int(my_tank_id)
    my_fish_tank, my_fishes, my_decos = get_and_caculate_objects_in_tank(member.id, my_tank_id)
    fish_list = []
    for my_fish in my_fishes:
        my_fish.hungry = 96.0
        my_fish.save()
        temp = {
                'id':my_fish.id,
                'name':my_fish.get_display_name(),
                'style':my_fish.get_display_style(),
                'star':my_fish.star,
                'family':my_fish.family,
                'is_highest_level':my_fish.is_highest_level(),
                'hungry':my_fish.hungry,
                'level':my_fish.level,
                'next_deformed_level': my_fish.next_deform_level(),
                'has_deformed': my_fish.has_deformed,
                'exp':my_fish.exp,
                'power':my_fish.get_power(),
                'max_exp':LEVEL_UP_EXP,
                'has_finished':has_finished_fish(member.id, my_fish.style, my_fish.star),
                'can_be_potion':my_fish.can_be_used_potion()
                }
        fish_list.append(temp)

    #do task
    task_list = ''
    if my_fish_tank.is_dragon_nest:
        rewards, my_task = check_done_task(member, 't007', '', 1)
        if rewards:
            task_list = update_my_normal_task(member.id, my_task)
    elif my_fish_tank.is_egg_nest:
        rewards, my_task = check_done_task(member, 't006', '', 1)
        if rewards:
            task_list = update_my_normal_task(member.id, my_task)
    rewards ={'user_info': '',
            'reward_list':[{'name':'铜币', 'style':'shell', 'num':50}] 
            }
    return {'dragons':fish_list,
            'task_list':task_list,
            'rewards': rewards,}

</t>
<t tx="newlife.20101220143820.1413">#清理龙窝便便(包括好友)
def cleanNestAMF(request, skey, host_id, my_tank_id, style):
    member = login_member(request, skey)

    host_id = int(host_id)
    my_tank_id = int(my_tank_id)
    host = get_member(host_id)
    # 判断是否是自己或好友
    if host.id != member.id and not are_friends(skey, member.sns_id, host.sns_id):
        return {'error':'you are not friends'}
    # 判断清理道具是否充足
    my_item = get_or_create_my_item(member.id, style)
    if my_item and my_item.item_type != 'CLN':
        return {'error':'item type not match'}
    if my_item.total_num &lt;= 0:
        return {'error':'item not enough'}
    my_fish_tank, my_fishes, my_decos = get_and_caculate_objects_in_tank(host.id, my_tank_id)
    # 判断是否可以清理
    if not my_fish_tank.will_generate_shit():
        return {'error':'time limited'}
    #增加贝壳数
    get_shells = 0
    for my_fish in my_fishes:
        fish_props = get_fish_property(my_fish.star, my_fish.level, my_fish.color)
        get_shells += int(pow(fish_props, 0.3))
    member.shells += get_shells
    member.save()
    # 扣除道具
    my_item.total_num -= 1
    my_item.save()
    # 更改最后电鱼时间
    my_fish_tank.last_cleaned = datetime.now()
    my_fish_tank.save()

    #do task
    rewards, my_task = check_done_task(member, 't008', 'p1', 1)
    if rewards:
        task_list = update_my_normal_task(member.id, my_task)
    else:
        task_list = ''
    return {'shells':member.shells,
            'get_shells':get_shells,
            'task_list':task_list,
            'rewards':rewards,
            }

</t>
<t tx="newlife.20101220143820.1414">#龙窝设置
def configureNestAMF(request, skey, my_tank_id, name, can_be_trolled, troll_price, troll_times, is_protected, troll_password):
    member = login_member(request, skey)

    my_tank_id = int(my_tank_id)        
    level,remain_exp,next_level_exp = get_almanac_level_info(member.id)
    # 判断是否够等级
    if level &lt; OPEN_TROLL_LEVEL and can_be_trolled:
        return {'error':'level not match'}  
    # 判断密码
    if is_protected and (troll_password is None or troll_password == ''):
        return {'error':'password can not be empty if protected'}

    my_fish_tank = get_my_fish_tank(member.id, my_tank_id)
    # 设置鱼缸名
    my_fish_tank.name = unicode(name,"utf-8")
    # 设置钓鱼
    my_fish_tank.can_be_trolled = can_be_trolled
    if can_be_trolled:
        if troll_price &lt; 1:
            my_fish_tank.troll_price = 1
        elif troll_price &gt; 1000000:
            my_fish_tank.troll_price = 1000000
        else:
            my_fish_tank.troll_price = troll_price
        if troll_times &lt; 1:
            my_fish_tank.troll_times = 1
        elif troll_times &gt; 100:
            my_fish_tank.troll_times = 100 
        else:
            my_fish_tank.troll_times = troll_times

        #do task
        rewards, my_task = check_done_task(member,'t020','',1)
    else:
        my_fish_tank.troll_price = 0
        my_fish_tank.troll_times = 0
    # 设置密码保护
    if is_protected:
        my_fish_tank.troll_password = troll_password
    else:
        my_fish_tank.troll_password = ''

    my_fish_tank.save()
    task_list = ''
    rewards = ''
    return {'status':'success',
            'task_list':task_list,
            'rewards':rewards}

</t>
<t tx="newlife.20101220143820.1415">#卖出龙窝
def saleNestAMF(request, skey, my_tank_id):
    member = login_member(request, skey)

    my_tank_id = int(my_tank_id)
    get_shells = 0
    # 兑换用户的鱼缸    
    my_tank = get_my_fish_tank(member.id, my_tank_id)
    if my_tank is None:
        return {'error':'fish tank not exist'}
    # 当鱼缸中有物品（鱼，水草）时，不能卖出鱼缸
    my_fish_ids = get_my_fish_ids_in_tank(member.id, my_tank.id)
    my_deco_ids = get_my_deco_ids_in_tank(member.id, my_tank.id)
    if my_deco_ids or my_fish_ids:
        return {'error':'exist resource'}

    get_shells = my_tank.sell_price
    # TODO:移除自定义装饰
    # 删除用户的鱼缸

    delete_a_member_tank(member, my_tank_id)
    member.shells += get_shells
    member.save()


    rewards, my_task = check_done_task(member, 't010', my_tank.style, 1, my_tank.family, my_tank.p_type, my_tank.star) 
    if rewards:
        task_list = update_my_normal_task(member.id, my_task)
    else:
        task_list = ''
    return {'shells':member.shells,
            'get_shells':get_shells,
            'task_list':task_list,
            'rewards':rewards}

</t>
<t tx="newlife.20101220143820.1416">def getNPCAMF(request, skey):
    member = login_member(request, skey)

    my_tasks = get_my_all_tasks(member.id)
    my_task_list = []
    current_time = datetime.now()
    for my_task in my_tasks:
        if my_task.status in ['NO', 'OK']:
            #get task rewards information
            trs = get_task_rewards_info(my_task) 

            if my_task.categary=='a':
                end_time = my_task.end_time and my_task.end_time.strftime('%Y-%m-%d') or ''
            else:
                end_time = ''
            temp = {'task_id':my_task.categary+"_"+my_task.group_code+"_"+str(my_task.seq),
                    'style':my_task.categary+'_'+my_task.group_code+'_0',
                    'reward_list':trs,
                    'remain_time':end_time,
                    }
            my_task_list.append(temp)
    rewards = ''
    return {'task_list':my_task_list,
            'rewards':rewards}
</t>
<t tx="newlife.20101220143820.1417">@language python
@tabwidth -4
@others
@ignore
# -*- coding: utf-8 -*-






</t>
<t tx="newlife.20101220143820.1418">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20101220143820.1419"># -*- coding: utf-8 -*-

from datetime import datetime, timedelta
from apps.system.helper import login_member
from apps.members.helper import *
from apps.members.constants import DEFAULT_SYS_MAX_TANKS
from apps.shops.helper import *
from apps.shops.cache import *
from apps.shops.models import *
from apps.products.cache import *
from apps.tasks.helper import update_my_normal_task, check_done_task

</t>
<t tx="newlife.20101220143820.1420">#获得龙的出售列表
def getDragonsInShopAMF(request, skey):
    member = login_member(request, skey)

    styles = get_shop_fish_styles()
    dragons = get_shop_products(styles)
    dragon_list = []
    for p in dragons:
        if p.is_onsale():
            obj = {}
            obj['id'] = p.id
            obj['type'] = p.sp_type
            obj['sale_type'] = p.sale_type
            obj['price'] = p.price
            obj['level'] = p.level
            obj['description'] = ''
            obj['capacity'] = 0
            obj['style'] = p.p_style
            obj['start_date'] = p.start_date.strftime('%Y-%m-%d')
            if p.end_date is None:
                obj['end_date'] = ''
            else:
                obj['end_date'] = p.end_date.strftime('%Y-%m-%d')

            fish = get_fish_with_stylecolor(p.p_style)
            obj['name'] = fish.name
            obj['family'] = fish.family
            obj['star'] = fish.star
            obj['has_finished'] = has_finished_fish(member.id, p.p_style, fish.star)
            dragon_list.append(obj)
    dragon_list.sort(lambda x,y: cmp(x['price'], y['price']))
    task_list = ''
    rewards = ''
    return {'result':dragon_list,
            'task_list':task_list,
            'rewards':rewards,}

</t>
<t tx="newlife.20101220143820.1421">#获得伙伴的出售列表
def getPartisansInShopAMF(request, skey):
    member = login_member(request, skey)

    styles = get_shop_deco_styles()
    decos = get_shop_products(styles)
    deco_list = []
    for p in decos:
        if p.is_onsale():
            obj = {}
            obj['id'] = p.id
            obj['type'] = p.sp_type
            obj['sale_type'] = p.sale_type
            obj['price'] = p.price
            obj['level'] = p.level
            obj['description'] = ''
            obj['capacity'] = 0
            obj['style'] = p.p_style
            obj['start_date'] = p.start_date.strftime('%Y-%m-%d')
            if p.end_date is None:
                obj['end_date'] = ''
            else:
                obj['end_date'] = p.end_date.strftime('%Y-%m-%d')

            deco = get_deco(p.p_style)
            obj['name'] = deco.name
            obj['family'] = deco.family
            obj['star'] = deco.star
            obj['speed_up'] = deco.speed_up
            deco_list.append(obj)
    deco_list.sort(lambda x,y: cmp(x['price'], y['price']))

    rewards= ''
    task_list = ''
    return {'result':deco_list,
            'task_list':task_list,
            'rewards':rewards,}

</t>
<t tx="newlife.20101220143820.1422">#获取装饰的出售列表
def getOrnamentsInShopAMF(request, skey):
    member = login_member(request, skey)

    styles = get_shop_adorn_styles()
    adorns = get_shop_products(styles)
    adorn_list = []
    for p in adorns:
        if p.is_onsale():
            obj = {}
            obj['id'] = p.id
            obj['type'] = p.sp_type
            obj['sale_type'] = p.sale_type
            obj['price'] = p.price
            obj['level'] = p.level
            obj['description'] = ''
            obj['capacity'] = 0
            obj['style'] = p.p_style
            obj['start_date'] = p.start_date.strftime('%Y-%m-%d')
            if p.end_date is None:
                obj['end_date'] = ''
            else:
                obj['end_date'] = p.end_date.strftime('%Y-%m-%d')

            adorn = get_adorn(p.p_style)
            obj['name'] = adorn.name
            obj['family'] = adorn.family
            obj['a_type'] = adorn.a_type
            obj['description'] = adorn.description
            adorn_list.append(obj)
    adorn_list.sort(lambda x,y: cmp(x['price'], y['price']))

    rewards= ''
    task_list = ''
    return {'result':adorn_list,
            'rewards':rewards,
            'task_list':task_list,}

</t>
<t tx="newlife.20101220143820.1423">#获取道具的出售列表
def getItemsInShopAMF(request, skey):
    member = login_member(request, skey)

    styles = get_shop_item_styles()
    items = get_shop_products(styles)
    item_list = []
    for p in items:
        if p.is_onsale():
            obj = {}
            obj['id'] = p.id
            obj['type'] = p.sp_type
            obj['sale_type'] = p.sale_type
            obj['price'] = p.price
            obj['level'] = p.level
            obj['description'] = ''
            obj['capacity'] = 0
            obj['style'] = p.p_style
            obj['start_date'] = p.start_date.strftime('%Y-%m-%d')
            if p.end_date is None:
                obj['end_date'] = ''
            else:
                obj['end_date'] = p.end_date.strftime('%Y-%m-%d')

            item = get_item(p.p_style)
            obj['name'] = item.name
            obj['description'] = item.description
            item_list.append(obj)
    item_list.sort(lambda x,y: cmp(x['price'], y['price']))

    rewards= ''
    task_list = ''
    return {'result':item_list,
            'rewards':rewards,
            'task_list':task_list,}

</t>
<t tx="newlife.20101220143820.1424">#获取龙窝的出售列表
def getNestInShopAMF(request, skey):
    member = login_member(request, skey)

    styles = get_shop_fish_tank_styles()
    fish_tanks = get_shop_products(styles)
    fish_tank_list = []
    for p in fish_tanks:
        if p.is_onsale():
            obj = {}
            obj['id'] = p.id
            obj['type'] = p.sp_type
            obj['sale_type'] = p.sale_type
            obj['price'] = p.price
            obj['level'] = p.level
            obj['description'] = ''
            obj['capacity'] = 0
            obj['style'] = p.p_style
            obj['start_date'] = p.start_date.strftime('%Y-%m-%d')
            if p.end_date is None:
                obj['end_date'] = ''
            else:
                obj['end_date'] = p.end_date.strftime('%Y-%m-%d')

            tank = get_fish_tank(p.p_style)
            obj['name'] = tank.name
            obj['family'] = tank.family
            obj['star'] = tank.star
            obj['capacity'] = tank.capacity
            fish_tank_list.append(obj)
    fish_tank_list.sort(lambda x,y: cmp(x['price'], y['price']))

    rewards= ''
    task_list = ''
    return {'result':fish_tank_list,
            'rewards':rewards,
            'task_list':task_list,}

</t>
<t tx="newlife.20101220143820.1425">#获取活动物品出售列表
def getActivityEntriesInShopAMF(request, skey):
    member = login_member(request, skey)

    styles = get_shop_in_activity_styles()
    actv_products = get_shop_products(styles)
    actv_product_list = []
    for p in actv_products:
        if p.is_onsale():
            obj = {}
            obj['id'] = p.id
            obj['type'] = p.sp_type
            obj['sale_type'] = p.sale_type
            obj['price'] = p.price
            obj['level'] = p.level
            obj['description'] = ''
            obj['capacity'] = 0
            obj['style'] = p.p_style
            obj['start_date'] = p.start_date.strftime('%Y-%m-%d')
            if p.end_date is None:
                obj['end_date'] = ''
            else:
                obj['end_date'] = p.end_date.strftime('%Y-%m-%d')

            if p.sp_type == 'd':
                fish = get_fish_with_stylecolor(p.p_style)
                obj['name'] = fish.name
                obj['family'] = fish.family
                obj['star'] = fish.star
                obj['has_finished'] = has_finished_fish(member.id, p.p_style, fish.star)
            elif p.sp_type == 'c':
                deco = get_deco(p.p_style)
                obj['name'] = deco.name
                obj['family'] = deco.family
                obj['star'] = deco.star
                obj['speed_up'] = deco.speed_up
            elif p.sp_type == 'a':
                adorn = get_adorn(p.p_style)
                obj['name'] = adorn.name
                obj['family'] = adorn.family
                obj['a_type'] = adorn.a_type
                obj['description'] = adorn.description
            elif p.sp_type == 'n':
                tank = get_fish_tank(p.p_style)
                obj['name'] = tank.name
                obj['family'] = tank.family
                obj['star'] = tank.star
                obj['capacity'] = tank.capacity
            elif p.sp_type == 'p':
                item = get_item(p.p_style)
                obj['name'] = item.name
                obj['description'] = item.description
            actv_product_list.append(obj)
    actv_product_list.sort(lambda x,y: cmp(x['price'], y['price']))

    rewards= ''
    task_list = ''
    return {'result':actv_product_list,
            'rewards':rewards,
            'task_list':task_list,}

</t>
<t tx="newlife.20101220143820.1426">#获取新物品出售列表
def getNewEntriesInShopAMF(request, skey):
    member = login_member(request, skey)

    styles = get_shop_is_new_styles()
    new_products = get_shop_products(styles)
    new_product_list = []
    for p in new_products:
        if p.is_onsale():
            obj = {}
            obj['id'] = p.id
            obj['type'] = p.sp_type
            obj['sale_type'] = p.sale_type
            obj['price'] = p.price
            obj['level'] = p.level
            obj['description'] = ''
            obj['capacity'] = 0
            obj['style'] = p.p_style
            obj['start_date'] = p.start_date.strftime('%Y-%m-%d')
            if p.end_date is None:
                obj['end_date'] = ''
            else:
                obj['end_date'] = p.end_date.strftime('%Y-%m-%d')

            if p.sp_type == 'd':
                fish = get_fish_with_stylecolor(p.p_style)
                obj['name'] = fish.name
                obj['family'] = fish.family
                obj['star'] = fish.star
                obj['has_finished'] = has_finished_fish(member.id, p.p_style, fish.star)
            elif p.sp_type == 'c':
                deco = get_deco(p.p_style)
                obj['name'] = deco.name
                obj['family'] = deco.family
                obj['star'] = deco.star
                obj['speed_up'] = deco.speed_up
            elif p.sp_type == 'a':
                adorn = get_adorn(p.p_style)
                obj['name'] = adorn.name
                obj['family'] = adorn.family
                obj['a_type'] = adorn.a_type
                obj['description'] = adorn.description
            elif p.sp_type == 'n':
                tank = get_fish_tank(p.p_style)
                obj['name'] = tank.name
                obj['family'] = tank.family
                obj['star'] = tank.star
                obj['capacity'] = tank.capacity
            elif p.sp_type == 'p':
                item = get_item(p.p_style)
                obj['name'] = item.name
                obj['description'] = item.description
            new_product_list.append(obj)
    new_product_list.sort(lambda x,y: cmp(x['price'], y['price']))

    rewards= ''
    task_list = ''
    return {'result':new_product_list,
            'rewards':rewards,
            'task_list':task_list,}

</t>
<t tx="newlife.20101220143820.1427">#购买龙
def buyDragonAMF(request, skey, style):
    if style[0] is not 'd':
        return {'error':'wrong style.'}

    member = login_member(request, skey)
    shop_product = get_shop_product(style)
    if not shop_product:
        return {'error': 'not exist.'}

    if not shop_product.is_onsale():
        return {'error': 'not on sale(-10000)'}

    fish = get_fish_with_stylecolor(shop_product.p_style)
    if not fish:
        return {'error' : 'data error(-10001)'}

    #检查背包格数
    if len(get_my_fish_ids_in_bag(member.id)) &gt;= member.current_bags():
        return {'error':'Bag is not enough'}

    # 检查玩家等级
    member_level = get_almanac_level_info(member.id)[0]
    if member_level &lt; shop_product.level:
        return {'error' : 'your level is too low.'}

    # 扣除货币
    price = shop_product.price
    if shop_product.sale_type == 'g':
        if member.pearls &lt; price:
            return {'error' : 'not enough pearls'}
        member.pearls -= price
    elif shop_product.sale_type == 's':
        if member.shells &lt; price:
            return {'error' : 'not enough shells'}
        member.shells -= price
    elif shop_product.sale_type == 'j':
        if member.score &lt; price:
            return {'error' : 'not enough score'}
        member.score -= price
    else:
        return {'error': 'data error(-30001)'}

    # 增加购买记录
    shop_product_record = ShopProductRecord(member_id = member.id,
                          member_nickname = member.nickname,
                          sp_type = shop_product.sp_type,
                          p_style = shop_product.p_style,
                          sale_type = shop_product.sale_type,
                          num = 1,
                          price = price,
                          status = False
                          )
    shop_product_record.save()
    #保存用户信息
    member.save()

    my_fish = new_a_member_fish(member, fish)
    fish_info = {
        'id':my_fish.id,
        'name':my_fish.get_display_name(),
        'style':my_fish.get_display_style(),
        'star':my_fish.star,
        'family':my_fish.family,
        'is_highest_level':my_fish.is_highest_level(),
        'hungry':my_fish.hungry,
        'level':my_fish.level,
        'next_deformed_level': my_fish.next_deform_level(),
        'exp':my_fish.exp,
        'max_exp':60,
        'can_be_potion':my_fish.can_be_used_potion(),
        'property': get_fish_property(my_fish.star, my_fish.level, my_fish.color),
        'has_finished':has_finished_fish(member.id, my_fish.style, my_fish.star),
        'almanac_name':my_fish.almanac_name,
        }
    # 判断是否开图鉴
    if isopen_new_almanac(member, my_fish):
        open_new_almanac = True
        get_exp, open_all = update_member_almanac_exp(member, my_fish)
    else:
        open_new_almanac = False
        get_exp = 0
        open_all = False

    # 交易完成
    shop_product_record.status = True
    shop_product_record.save()
    member_level, remain_exp, next_level_exp = get_almanac_level_info(member.id)

    #do task
    rewards, my_task = check_done_task(member, 't011', my_fish.style, 1, my_fish.family, my_fish.p_type, my_fish.star) 
    if rewards:
        task_list = update_my_normal_task(member.id, my_task)
    else:
        task_list = ''
    result = {'shells':member.shells,
              'pearls':member.pearls,
              'score':member.score,
              'level':member_level,
              'remain_exp':remain_exp,
              'next_level_exp':next_level_exp,
              'open_new_almanac':open_new_almanac,
              'my_fish':fish_info,
              'get_exp':get_exp,
              'open_all':open_all,
              'rewards':rewards,
              'task_list':task_list}

    return result

</t>
<t tx="newlife.20101220143820.1428">#购买伙伴
def buyPartisanAMF(request, skey, style, days=30):
    days= int(days)
    if days not in (30,60,90):
        return {'error':'data error.'}

    if style[0] is not 'c':
        return {'error':'wrong style.'}

    member = login_member(request, skey)
    shop_product = get_shop_product(style)
    if not shop_product:
        return {'error': 'not exist'}

    if not shop_product.is_onsale():
        return {'error': 'not on sale(-10000)'}

    deco = get_deco(shop_product.p_style)
    if not deco:
        return {'error' : 'data error(-10001)'}

    # 检查玩家等级
    member_level = get_almanac_level_info(member.id)[0]
    if member_level &lt; shop_product.level:
        return {'error' : 'your level is too low.'}

    # 扣除货币
    price = int(shop_product.price * (days/30))
    if shop_product.sale_type == 'g':
        if member.pearls &lt; price:
            return {'error' : 'not enough pearls'}
        member.pearls -= price
    elif shop_product.sale_type == 's':
        if member.shells &lt; price:
            return {'error' : 'not enough shells'}
        member.shells -= price
    elif shop_product.sale_type == 'j':
        if member.score &lt; price:
            return {'error' : 'not enough score'}
        member.score -= price
    else:
        return {'error': 'data error(-30001)'}

    # 增加购买记录
    shop_product_record = ShopProductRecord(member_id = member.id,
                          member_nickname = member.nickname,
                          sp_type = shop_product.sp_type,
                          p_style = shop_product.p_style,
                          sale_type = shop_product.sale_type,
                          num = 1,
                          price = price,
                          status = False
                          )
    shop_product_record.save()
    #保存用户信息
    member.save()

    my_deco = new_a_member_deco(member, deco, days)

    # 交易完成
    shop_product_record.status = True
    shop_product_record.save()
    member_level,remain_exp,next_level_exp = get_almanac_level_info(member.id)

    #do task
    rewards, my_task = check_done_task(member, 't011', my_deco.style, 1, my_deco.family, my_deco.p_type, my_deco.star) 
    if rewards:
        task_list = update_my_normal_task(member.id, my_task)
    else:
        task_list = ''
    result = {'shells':member.shells,
              'pearls':member.pearls,
              'score':member.score,
              'level':member_level,
              'remain_exp':remain_exp,
              'next_level_exp':next_level_exp,
              'open_new_almanac':False,
              'my_fish':'',
              'get_exp':'',
              'open_all':'',
              'rewards':rewards,
              'task_list':task_list}
    return result


</t>
<t tx="newlife.20101220143820.1429">#购买装饰
def buyAdornmentAMF(request, skey, style, days=30):
    days= int(days)
    if days not in (30, 60, 90):
        return {'error':'data error.'}
    if style[0] is not 'a':
        return {'error':'wrong style.'}

    member = login_member(request, skey)
    shop_product = get_shop_product(style)
    if not shop_product:
        return {'error': 'not exist'}

    if not shop_product.is_onsale():
        return {'error': 'not on sale(-10000)'}

    adorn = get_adorn(shop_product.p_style)
    if not adorn:
        return {'error' : 'data error(-10001)'}

    # 检查玩家等级
    member_level = get_almanac_level_info(member.id)[0]
    if member_level &lt; shop_product.level:
        return {'error' : 'your level is too low.'}

    # 扣除货币
    price = int(shop_product.price * (days/30))
    if shop_product.sale_type == 'g':
        if member.pearls &lt; price:
            return {'error' : 'not enough pearls'}
        member.pearls -= price
    elif shop_product.sale_type == 's':
        if member.shells &lt; price:
            return {'error' : 'not enough shells'}
        member.shells -= price
    elif shop_product.sale_type == 'j':
        if member.score &lt; price:
            return {'error' : 'not enough score'}
        member.score -= price
    else:
        return {'error': 'data error(-30001)'}

    # 增加购买记录
    shop_product_record = ShopProductRecord(member_id = member.id,
                          member_nickname = member.nickname,
                          sp_type = shop_product.sp_type,
                          p_style = shop_product.p_style,
                          sale_type = shop_product.sale_type,
                          num = 1,
                          price = price,
                          status = False
                          )
    shop_product_record.save()
    #保存用户信息
    member.save()

    my_adorn = new_a_member_adorn(member, adorn, days)

    # 交易完成
    shop_product_record.status = True
    shop_product_record.save()
    member_level,remain_exp,next_level_exp = get_almanac_level_info(member.id)

    #do task
    rewards, my_task = check_done_task(member, 't011', my_adorn.style, 1, my_adorn.family, my_adorn.p_type, my_adorn.star)
    if rewards:
        task_list = update_my_normal_task(member.id, my_task)
    else:
        task_list = ''
    result = {'shells':member.shells,
              'pearls':member.pearls,
              'score':member.score,
              'level':member_level,
              'remain_exp':remain_exp,
              'next_level_exp':next_level_exp,
              'open_new_almanac':False,
              'my_fish':'',
              'get_exp':'',
              'open_all':'',
              'rewards':rewards,
              'task_list':task_list}
    return result

</t>
<t tx="newlife.20101220143820.1430">#购买道具
def buyItemAMF(request, skey, style, num=1):
    num = int(num)
    if num&lt;1:
        return {'error':'data error.'}
    if style[0] is not 'p':
        return {'error':'wrong style.'}

    member = login_member(request, skey)
    shop_product = get_shop_product(style)
    if not shop_product:
        return {'error': 'not exist'}

    if not shop_product.is_onsale():
        return {'error': 'not on sale(-10000)'}

    item = get_item(shop_product.p_style)
    if not item:
        return {'error' : 'data error(-10001)'}

    # 检查玩家等级
    member_level = get_almanac_level_info(member.id)[0]
    if member_level &lt; shop_product.level:
        return {'error' : 'your level is too low.'}

    # 扣除货币
    price = shop_product.price * num
    if shop_product.sale_type == 'g':
        if member.pearls &lt; price:
            return {'error' : 'not enough pearls'}
        member.pearls -= price
    elif shop_product.sale_type == 's':
        if member.shells &lt; price:
            return {'error' : 'not enough shells'}
        member.shells -= price
    elif shop_product.sale_type == 'j':
        if member.score &lt; price:
            return {'error' : 'not enough score'}
        member.score -= price
    else:
        return {'error': 'data error(-30001)'}

    # 增加购买记录
    shop_product_record = ShopProductRecord(member_id = member.id,
                          member_nickname = member.nickname,
                          sp_type = shop_product.sp_type,
                          p_style = shop_product.p_style,
                          sale_type = shop_product.sale_type,
                          num = num,
                          price = price,
                          status = False
                          )
    shop_product_record.save()
    #保存用户信息
    member.save()

    my_item = new_a_member_item(member, item, num)

    # 交易完成
    shop_product_record.status = True
    shop_product_record.save()
    member_level, remain_exp, next_level_exp = get_almanac_level_info(member.id)

    #do task
    rewards = check_done_task(member, 't011', my_item.style, 1) 
    if rewards:
        task_list = update_my_normal_task(member.id, my_task)
    else:
        task_list = ''
    result = {'shells':member.shells,
              'pearls':member.pearls,
              'score':member.score,
              'level':member_level,
              'remain_exp':remain_exp,
              'next_level_exp':next_level_exp,
              'open_new_almanac':False,
              'my_fish':'',
              'get_exp':'',
              'open_all':'',
              'reward_list':rewards,
              'task_list':task_list}
    return result


</t>
<t tx="newlife.20101220143820.1431">#购买龙窝
def buyNestAMF(request, skey, style):
    if style[0] is not 'b':
        return {'error':'wrong style.'}

    member = login_member(request, skey)
    shop_product = get_shop_product(style)
    if not shop_product:
        return {'error': 'not exist'}

    if not shop_product.is_onsale():
        return {'error': 'not on sale(-10000)'}

    fish_tank = get_fish_tank(shop_product.p_style)
    if not fish_tank:
        return {'error' : 'data error(-10001)'}

    # 检查玩家等级
    member_level = get_almanac_level_info(member.id)[0]
    if member_level &lt; shop_product.level:
        return {'error' : 'your level is too low.'}

    # 检查缸位
    total_tank_num = DEFAULT_SYS_MAX_TANKS+member.pearl_tanks+member.shell_tanks+member.friend_tanks
    if len(get_my_fish_tank_ids(member.id)) &gt;= total_tank_num:
        return {'error':'tank position is not enough'}

    # 扣除货币
    price = shop_product.price
    if shop_product.sale_type == 'g':
        if member.pearls &lt; price:
            return {'error' : 'not enough pearls'}
        member.pearls -= price
    elif shop_product.sale_type == 's':
        if member.shells &lt; price:
            return {'error' : 'not enough shells'}
        member.shells -= price
    elif shop_product.sale_type == 'j':
        if member.score &lt; price:
            return {'error' : 'not enough score'}
        member.score -= price
    else:
        return {'error': 'data error(-30001)'}

    # 增加购买记录
    shop_product_record = ShopProductRecord(member_id = member.id,
                          member_nickname = member.nickname,
                          sp_type = shop_product.sp_type,
                          p_style = shop_product.p_style,
                          sale_type = shop_product.sale_type,
                          num = 1,
                          price = price,
                          status = False
                          )
    shop_product_record.save()
    #保存用户信息
    member.save()

    my_fish_tank = new_a_member_tank(member, fish_tank)

    # 交易完成
    shop_product_record.status = True
    shop_product_record.save()
    member_level,remain_exp,next_level_exp = get_almanac_level_info(member.id)

    #do task
    rewards = check_done_task(member, 't011', my_fish_tank.style, 1, my_fish_tank.family, my_fish_tank.p_type, my_fish_tank.star) 
    if rewards:
        task_list = update_my_normal_task(member.id, my_task)
    else:
        task_list = ''
    result = {'shells':member.shells,
              'pearls':member.pearls,
              'score':member.score,
              'level':member_level,
              'remain_exp':remain_exp,
              'next_level_exp':next_level_exp,
              'open_new_almanac':False,
              'my_fish':'',
              'get_exp':'',
              'open_all':'',
              'rewards':rewards,
              'task_list':task_list,}

    return result

</t>
<t tx="newlife.20101220143820.1432">#续费
def renewObjectsAMF(request, skey, my_obj_id, my_obj_style, days=30):
    my_obj_id = int(my_obj_id)
    days = int(days)
    if days not in (30, 60, 90):
        return {'error': 'data error(-10000)'}

    if my_obj_style[0] not in ('c', 'a'):
        return {'error': 'data error(-10001)'}

    member = login_member(request, skey)
    my_obj = None
    if my_obj_style[0] == 'c':
        my_obj = get_my_deco(member.id, my_obj_id)
    elif my_obj_style[0] == 'a':
        my_obj = get_my_adorn(member.id, my_obj_id)

    if not my_obj:
        return {'error': 'data error(-10002)'}

    shop_product = get_shop_product(my_obj_style)
    if not shop_product:
        return {'error': 'not exist'}

    #计算价格
    price = int(shop_product.price * 0.8 * (days/30))

    # 扣除货币
    if shop_product.sale_type == 'g':
        if member.pearls &lt; price:
            return {'error' : 'not enough pearls'}
        member.pearls -= price
    elif shop_product.sale_type == 's':
        if member.shells &lt; price:
            return {'error' : 'not enough shells'}
        member.shells -= price
    elif shop_product.sale_type == 'j':
        if member.score &lt; price:
            return {'error' : 'not enough score'}
        member.score -= price
    else:
        return {'error': 'data error(-30001)'}

    # 增加购买记录
    shop_product_record = ShopProductRecord(member_id = member.id,
                          member_nickname = member.nickname,
                          sp_type = shop_product.sp_type,
                          p_style = shop_product.p_style,
                          sale_type = shop_product.sale_type,
                          price = price,
                          status = False,
                          )
    shop_product_record.save()
    #保存用户信息
    member.save()

    # 增加时间
    end_time = my_obj.expire_time + timedelta(days)
    my_obj.expire_time = end_time
    my_obj.save()

    # 交易完成
    shop_product_record.status = True
    shop_product_record.save()

    rewards= ''
    task_list = ''
    result = {'shells':member.shells,
              'pearls':member.pearls,
              'score':member.score,
              'rewards':rewards,
              'task_list':task_list,}

    return result


</t>
<t tx="newlife.20101220143820.1438">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20101220143820.1439"># -*- coding: utf-8 -*-

from datetime import datetime
from django.conf import settings
from apps.system.lock import *
from apps.system.helper import login_member
from apps.products.helper import get_product_bystyle
from apps.tasks.cache import *
from apps.tasks.helper import *


</t>
<t tx="newlife.20101220143820.1440">#获取用户所有任务
def getUserAllTasksAMF(request, skey):
    member = login_member(request, skey)

    my_tasks = get_my_all_tasks(member.id)
    my_task_list = []
    current_time = datetime.now()
    for my_task in my_tasks:
        if my_task.status in ['NO', 'OK']:
            #get task rewards information
            taskrewards = get_task_rewards(my_task.task_id)
            trs = []
            for taskreward in taskrewards:
                name = ''
                if taskreward.reward_type == 's':
                    name = u'铜币'
                elif taskreward.reward_type == 'g':
                    name = u'宝石'
                elif taskreward.reward_type == 'x':
                    name = u'经验'
                elif taskreward.reward_type in ['a','c','d','e','p','n']:
                    product = get_product_bystyle(taskreward.reward_style)
                    if product:
                        name = product.name
                tr_temp = {'type':taskreward.reward_type,
                           'name':name,
                           'style':taskreward.reward_style,
                           'num':taskreward.reward_num,
                           'months':taskreward.reward_val,}
                trs.append(tr_temp)

            if my_task.categary=='a':
                end_time = my_task.end_time and my_task.end_time.strftime('%Y-%m-%d') or ''
            else:
                end_time = ''
            temp = {'id':my_task.id,
                    'type':my_task.categary,
                    'style':my_task.type,
                    'status':my_task.status,
                    'rewards':trs,
                    'remain_time':end_time,
                    }
            #temp = {'id':my_task.id, 'title':my_task.title, 
            #    'type':my_task.categary, 'status':my_task.status,
            #    'story':my_task.story, 'desc':my_task.description,
            #    'name_1':my_task.name_1, 'num_1':my_task.num_1, 'num_done_1':my_task.num_done_1,
            #    'name_2':my_task.name_2, 'num_2':my_task.num_2, 'num_done_2':my_task.num_done_2,
            #    'name_3':my_task.name_3, 'num_3':my_task.num_3, 'num_done_3':my_task.num_done_3,
            #    'rewards':trs, 'remain_time': end_time,
            #    }
            my_task_list.append(temp)

    return my_task_list


</t>
<t tx="newlife.20101220143820.1441">#重新刷临时任务
def refreshTaskAMF(request, skey, my_task_id):
    my_task_id = int(my_task_id)
    member = login_member(request, skey)

    key = CACHE_KEY_REFRESH_RANDOM_TASK_LOCK % member.id
    if is_locked(key):
        return {'error': 'memory is locked'}

    set_mem_lock(key, 5)

    my_random_task_ids = get_my_random_task_ids(member.id)
    if my_task_id not in my_random_task_ids:
        return {'error':'data error'}

    if member.pearls &lt; REFRESH_RANDOM_TASH_FEE:
        return {'error': 'not enough pearls'}

    my_task = refresh_one_my_random_task(member.id, my_task_id)
    if not my_task:
        return {'error':'not refresh task'}

    #收费
    member.pearls -= REFRESH_RANDOM_TASH_FEE
    member.save()

    #取任务奖励信息
    taskrewards = get_task_rewards(my_task.task_id)
    trs = []
    for taskreward in taskrewards:
        name = ''
        if taskreward.reward_type == 's':
            name = u'铜币'
        elif taskreward.reward_type == 'g':
            name = u'宝石'
        elif taskreward.reward_type == 'x':
            name = u'经验'
        elif taskreward.reward_type in ['a','c','d','e','p','n']:
            product = get_product_bystyle(taskreward.reward_style)
            if product:
                name = product.name
        temp = {'type':taskreward.reward_type, 'name':name, 'style':taskreward.reward_style,
            'num':taskreward.reward_num, 'months':taskreward.reward_val}
        trs.append(temp)

    ret = { 'shells':member.shells,
            'pearls':member.pearls,
            'score':member.score,
            'id':my_task.id,
            'style':my_task.type,
            'type':my_task.categary,
            'status':my_task.status,
            'rewards':trs
            }

    #ret = {'shells':member.shells,'pearls':member.pearls,'score':member.score,
    #    'id':my_task.id, 'title':my_task.title,
    #    'type':my_task.categary, 'status':my_task.status,
    #    'story':my_task.story, 'desc':my_task.description,
    #    'name_1':my_task.name_1, 'num_1':my_task.num_1, 'num_done_1':my_task.num_done_1,
    #    'name_2':my_task.name_2, 'num_2':my_task.num_2, 'num_done_2':my_task.num_done_2,
    #    'name_3':my_task.name_3, 'num_3':my_task.num_3, 'num_done_3':my_task.num_done_3,
    #    'rewards':trs,
    #    }

    return ret


</t>
<t tx="newlife.20101220143820.1442">#领取任务奖励
def drawTaskRewardsAMF(request, skey, my_task_id):
    member = login_member(request, skey)

    try:
        my_task_id = int(my_task_id)
        my_task = get_my_task(member.id, my_task_id)
    except:
        return {'error':'data error(-10001)'}

    #已经领过礼物了
    if my_task.status == 'OV':
        return {'error':'task have been drawn'}

    #任务未完成
    if my_task.status != 'OK':
        return {'error':'task do not get end'}

    task_rewards = get_task_rewards(my_task.task_id)
    if not task_rewards:
        return {'error':'not find reward'}

    #检查龙位空余数量
    reward_dragon_num = 0
    for reward in task_rewards:
        if reward.reward_type=='d':
            reward_dragon_num += reward.reward_num
    # 判断背包位是否够放下龙和蛋
    if reward_dragon_num&gt;0:
        if len(get_my_fish_ids_in_bag(member.id)) + reward_dragon_num &gt; member.current_bags():
            return {'error':'Bag is not enough'}

    #update task status.
    my_task.status = 'OV'
    my_task.save()

    #update a new task
    if my_task.categary in ('a', 'n'):
        update_my_normal_task(member.id, my_task)

    #draw rewards
    reward_list = []
    for reward in task_rewards:
        name,member,objs = new_user_product(member, reward.reward_type, reward.reward_style, reward.reward_num)
        if reward.reward_type=='d':
            my_fish = objs[0]
            fish_info = {}
            if isopen_new_almanac(member, my_fish):
                open_new_almanac = True
                get_exp, open_all = update_member_almanac_exp(member, my_fish)
                fish_info = {
                    'name':my_fish.get_display_name(),
                    'style':my_fish.get_display_style(),
                    'star':my_fish.star,
                    'family':my_fish.family,
                    'level':my_fish.level,
                    'exp':my_fish.exp,
                }
            else:
                open_new_almanac = False
                open_all = False

            reward_list.append({'type':reward.reward_type, 'name':name, 'style':reward.reward_style, 'num':reward.reward_num,
                'open_new_almanac':open_new_almanac,'my_fish':fish_info,'open_all':open_all,
            })
        else:
            reward_list.append({'name':name, 'style':reward.reward_style, 'num':reward.reward_num})

    level, remain_exp, next_level_exp = get_almanac_level_info(member.id)
    result = {'userinfo':{'level':level,
                          'remain_exp':remain_exp,
                          'next_level_exp':next_level_exp,
                          'pearls':member.pearls ,
                          'shells':member.shells
                          },
              'list':reward_list,
             }

    return result
</t>
<t tx="newlife.20101220143820.1443">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20101220143820.1444"># -*- coding: utf-8 -*-

from django.conf import settings
from apps.system.helper import login_member
from apps.members.helper import *
from apps.members.constants import MEMBER_MAX_POWER


</t>
<t tx="newlife.20101220143820.1445">#获取用户信息
def getUserInfoAMF(request, skey):
    member = login_member(request, skey)
    from apps.tasks.helper import get_my_all_tasks, get_task_rewards_info
    #获取第一个任务
    if settings.DEBUG:
        update_my_tasks(member.id)
    my_tasks = get_my_all_tasks(member.id)
    my_task_list = []
    current_time = datetime.now()
    for my_task in my_tasks:
        if my_task.status in ['NO', 'OK']:
            #get task rewards information
            trs = get_task_rewards_info(my_task)             
            if my_task.categary=='a':
                end_time = my_task.end_time and my_task.end_time.strftime('%Y-%m-%d') or ''
            else:
                end_time = ''
            temp = {'task_id':my_task.categary+"_"+my_task.group_code+'_'+str(my_task.seq),
                    'reward_list':trs,
                    'remain_time':end_time,
                    }
            my_task_list.append(temp)
    if my_task_list:
        task_list = my_task_list[0]
    else:
        task_list = ''
    rewards = ''    
    level,remain_exp,next_level_ exp = get_almanac_level_info(member.id)
    #获得自己的信息
    if level in [1, 2]:
        power = member.get_power(is_grow=False)
    else:
        power = member.get_power()
    user_info = {'id':member.id, 
                'sns_id':member.sns_id,
                'nickname':member.nickname,
                'avatar':member.avatar,
                'shells':member.shells, 
                'pearls':member.pearls,
                'max_power':MEMBER_MAX_POWER,
                'power':power,
                'max_dispatch':member.max_dispatch,
                'tempo':member.tempo,
                'exp':remain_exp,
                'next_exp':next_level_exp,
                'level':level,}
    
    return {'user_info':user_info,
            'task_list':task_list,
            'rewards':rewards,}</t>
<t tx="newlife.20101220143820.1446">#获取其他用户信息
def getOtherUserInfoAMF(request, skey, sns_id):
    member = login_member(request, skey)

    sns_id = int(sns_id)
    otheruser = get_member_by_sns_id(sns_id)
    if not otheruser:
        return {'error':'member does not exist'}

    my_level,my_remain_exp,my_next_level_exp = get_almanac_level_info(member.id)

    #获取其他用户等级经验信息
    level,remain_exp,next_level_exp = get_almanac_level_info(otheruser.id)

    user_info = {'id':otheruser.id, 'sns_id':otheruser.sns_id, 'nickname':otheruser.nickname,
        'avatar':otheruser.avatar, 'almanac_level':level
    }
    task_list = ''
    rewards = ''
    return {'user_info':user_info,
            'task_list':task_list,
            'rewards':rewards,}

</t>
<t tx="newlife.20101220143820.1447">#获取好友列表
def getFriendsAMF(request, skey):
    member = login_member(request, skey)

    friend_sns_ids = get_friend_sns_ids(skey, member.id, settings.SNS)
    friend_list = []
    friends = get_members_by_sns_ids(friend_sns_ids)
    for friend in friends:
        try:
            level,remain_exp,next_level_exp = get_almanac_level_info(friend.id)
            #are_neighbor = are_friends(sKey, member.sns_id, friend.sns_id)
            are_neighbor = True
            friend_list.append({'id':friend.id, 'sns_id':friend.sns_id,
                'nickname':friend.nickname, 'avatar':friend.avatar,
                'level':level, 'are_neigbor':are_neighbor})
        except:
            raise

    friend_list.sort(lambda x,y: cmp(y['level'], x['level']))
    task_list = ''
    rewards = ''
    return {'friend_list':friend_list,
            'task_list':task_list,
            'rewards':rewards,}

</t>
<t tx="newlife.20101220143820.1448">@doc</t>
<t tx="newlife.20101220143820.1450">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20101220143820.1451"># -*- coding: utf-8 -*-

import types
from django.core.cache import cache
from apps.system.helper import choose_a_db, choose_a_fish_model
from apps.games.constants import *
from apps.members.constants import *
from apps.members.models import *
from apps.synthesis.constants import *
from apps.products.cache import *
from apps.sns.sns_api import get_app_friends


</t>
<t tx="newlife.20101220143820.1452">def get_member(member_id):
    key = CACHE_KEY_MEMBER % (member_id)
    member = cache.get(key)

    if member is None:
        member = Member.objects.get(id=member_id)
        cache.set(key, member)
    return member


</t>
<t tx="newlife.20101220143820.1453">def get_member_by_sns_id(sns_id):
    key = CACHE_KEY_MEMBER_FROM_SNS % (sns_id)
    member = cache.get(key)

    if member is None:
        try:
            member = Member.objects.get(sns_id=sns_id)
            cache.set(key, member)
        except Member.DoesNotExist:
            return None
    return member    


</t>
<t tx="newlife.20101220143820.1454">def get_members_by_sns_ids(sns_ids):
    members = []
    for sns_id in sns_ids:
        member = get_member_by_sns_id(sns_id)
        if member:
            members.append(member)

    return members

</t>
<t tx="newlife.20101220143820.1455"># 判断是否封号
def is_disabled_member(sns_id):
    key = CACHE_KEY_DISABLED_MEMBER % sns_id
    dm = cache.get(key)
    if dm is None:
        try:
            dm = DisabledMember.objects.get(sns_id=sns_id)
            cache.set(key, dm)
        except:
            dm = None

    if dm and dm.is_disabled:
        return True
    else:
        return False

</t>
<t tx="newlife.20101220143820.1456"># 自动封号函数    
def auto_disable_user(sns_id):
    dm = DisabledMember.objects.filter(sns_id=sns_id)
    if not dm:
        obj = DisabledMember(sns_id=member.sns_id, description = u'系统自动封号', is_disabled = False)
        obj.save()

</t>
<t tx="newlife.20101220143820.1457"># 获取用户图鉴等级实例，没有则为用户创建。
def get_or_create_almanac_info(member_id):
    key = CACHE_KEY_MY_ALMANAC_INFO % (member_id)
    almanac_info = cache.get(key)

    if almanac_info is None:
        try:
            chosen_db = choose_a_db(member_id)
            almanac_info = MyAlmanacInfo.objects.using(chosen_db).get(member_id=member_id)
        except MyAlmanacInfo.DoesNotExist:
            almanac_info = MyAlmanacInfo(member_id=member_id)
            almanac_info.save()
        cache.set(key,almanac_info)
    return almanac_info
@doc
这个东西ms我看过了，有些东西看一次是没有神马效果的，
@code
def choose_a_db(member_id):
    if member_id &lt;= LIMIT_USERS_ONE_DB:
        chosen_db = 'default'
    elif member_id &lt;= 2*LIMIT_USERS_ONE_DB:
        chosen_db = 'second'
    elif member_id &lt;= 3*LIMIT_USERS_ONE_DB:
        chosen_db = 'third'
    return chosen_db

@doc
 IMIT_USERS_ONE_DB = 400,0000，每个用户表有400k用户。
 
@code
class MyAlmanacInfo(MultiDB):
    #member_id = models.IntegerField(primary_key=True)
    fish_styles = models.TextField()
    exp = models.IntegerField(default=0)
    added_exp = models.IntegerField(default=0) #获得的经验值（除了图鉴经验）
    remain_add_exp = models.IntegerField(default=500) #当天剩余的可增加经验值（除了图鉴经验）
    last_append = models.DateTimeField(blank=True, null=True) # 每天增加经验，上次增加经验时间   
@doc
其中fish_styles是所有改用户的鱼的style，以逗号隔开。
其实这个表是用来计算用户的经验算级数的，细节看下面。
</t>
<t tx="newlife.20101220143820.1458"># 获取用户所有鱼缸id
def get_my_fish_tank_ids(member_id):
    key = CACHE_KEY_MY_FISH_TANK_IDS % member_id
    my_tank_ids = cache.get(key)

    if my_tank_ids is None:
        chosen_db = choose_a_db(member_id)
        my_tank_ids = list(MyFishTankInstance.objects.using(chosen_db).filter(member_id=member_id).values_list('id', flat=True))
        cache.set(key, my_tank_ids)

    return my_tank_ids

</t>
<t tx="newlife.20101220143820.1459"># 更新用户所有鱼缸id
def update_my_fish_tank_ids(member_id, my_tank_ids):
    key = CACHE_KEY_MY_FISH_TANK_IDS % member_id
    cache.set(key, list(set(my_tank_ids)))

</t>
<t tx="newlife.20101220143820.1460"># 获取用户一个鱼实例
def get_my_fish (member_id,my_fish_id):

    key = CACHE_KEY_MY_FISH % (member_id,my_fish_id)
    my_fish = cache.get(key)
    '''
    前面的东西都是处理缓存的，后面是实际的逻辑。
    '''
    if my_fish is None:
        chosen_db = choose_a_db(member_id)
        #Now ,"chosen_db" is one of ['one','two','third']
        chosen_model = choose_a_fish_model(member_id)
        #”chosen“返回的是member_id对10取余的整数。
        #FISH_MODEL = {
        #    0:'MyFishInstanceTen',
        #    1:'MyFishInstanceOne',
        #    2:'MyFishInstanceTwo',
        #    3:'MyFishInstanceThree',
        #    4:'MyFishInstanceFour',
        #    5:'MyFishInstanceFive',
        #    6:'MyFishInstanceSix',
        #    7:'MyFishInstanceSeven',
        #    8:'MyFishInstanceEight',
        #    9:'MyFishInstanceNine',
        #}
        #这个东西是用来分表的。。
        my_fish = globals() [chosen_model].objects.using(chosen_db).get(id=my_fish_id,member_id=member_id)
        #既然这里用globals()必然是有意义的，他一定再初始项目的时候导入了上面结果model然后取model对象，
        #这里用了多数据库，就是这个using，首先说这个数据库是按用户的id划分的，也就是说不同的用户是单独玩的，用户之间的交互是如何处理的？还是没有？？
        ##增加冗余信息
        fish = get_fish_with_stylecolor(my_fish.style)
        my_fish.name = fish.name
        my_fish.description = fish.description
        my_fish.star = fish.star
        my_fish.family = fish.family
        my_fish.p_type = fish.p_type
        my_fish.almanac_name = fish.almanac_name
        cache.set(key,my_fish)
        #这些东西是干啥用的？？预测：从数据中取出的model实例没有附加的信息

    return my_fish
@doc
原来这个方法我已经分析过了，
这个是有意义的，因为有缓存，缓存的存在使很多规则发生了变化，

</t>
<t tx="newlife.20101220143820.1461"># 获取用户多个鱼实例    
def get_my_fishes(member_id, my_fish_ids):
    my_fishes = []
    for my_fish_id in my_fish_ids:
        my_fish = get_my_fish(member_id, my_fish_id)
        if my_fish:
            my_fishes.append(my_fish)
    return my_fishes

@doc

这个写的很简约，就是获取用户的所有的鱼（或者龙）。
</t>
<t tx="newlife.20101220143820.1462"># 获取用户一个水草实例
def get_my_deco(member_id, my_deco_id):
    key = CACHE_KEY_MY_DECO % (member_id, my_deco_id)
    my_deco = cache.get(key)

    if my_deco is None:
        chosen_db = choose_a_db(member_id)
        my_deco = MyDecoInstance.objects.using(chosen_db).get(id=my_deco_id, member_id=member_id)
        # 冗余水草信息
        deco = get_deco(my_deco.style)
        my_deco.name = deco.name
        my_deco.description = deco.description
        my_deco.star = deco.star
        my_deco.family = deco.family
        my_deco.p_type = deco.p_type
        my_deco.speed_up = deco.speed_up
        cache.set(key, my_deco)

    return my_deco

</t>
<t tx="newlife.20101220143820.1463"># 获取用户多个水草实例
def get_my_decos(member_id, my_deco_ids):
    my_decos = []
    for my_deco_id in my_deco_ids:
        my_deco = get_my_deco(member_id, my_deco_id)
        if my_deco:
            my_decos.append(my_deco)
    return my_decos

</t>
<t tx="newlife.20101220143820.1464"># 获取用户一个装饰实例
def get_my_adorn(member_id, my_adorn_id):
    key = CACHE_KEY_MY_ADORN % (member_id, my_adorn_id)
    my_adorn = cache.get(key)

    if my_adorn is None:
        chosen_db = choose_a_db(member_id)
        my_adorn = MyAdornInstance.objects.using(chosen_db).get(id=my_adorn_id, member_id=member_id)
        # 冗余水草信息
        adorn = get_adorn(my_adorn.style)
        my_adorn.name = adorn.name
        my_adorn.description = adorn.description
        my_adorn.star = adorn.star
        my_adorn.family = adorn.family
        my_adorn.p_type = adorn.p_type
        my_adorn.a_type = adorn.a_type
        cache.set(key, my_adorn)

    return my_adorn

</t>
<t tx="newlife.20101220143820.1465"># 获取用户多个装饰实例
def get_my_adorns(member_id, my_adorn_ids):
    my_adorns = []
    for my_adorn_id in my_adorn_ids:
        my_adorn = get_my_adorn(member_id, my_adorn_id)
        if my_adorn:
            my_adorns.append(my_adorn)
    return my_adorns

</t>
<t tx="newlife.20101220143820.1466"># 获取用户当前道具的实例，没有则创建
def get_or_create_my_item(member_id, style):
    key = CACHE_KEY_MY_ITEM % (member_id, style)
    my_item = cache.get(key)

    if my_item is None:
        try:
            chosen_db = choose_a_db(member_id)
            my_item = MyItemInstance.objects.using(chosen_db).get(member_id=member_id, style=style)
        except MyItemInstance.DoesNotExist:
            my_item = MyItemInstance(member_id=member_id, style=style)
            my_item.save()
        # 冗余道具信息
        item = get_item(my_item.style)
        my_item.name = item.name
        my_item.description = item.description
        my_item.item_type = item.item_type
        my_item.growth = item.growth
        my_item.shorten_time = item.shorten_time
        my_item.success_percent = item.success_percent
        my_item.cool_down_time = item.cool_down_time
        my_item.disappear_time = item.disappear_time
        cache.set(key, my_item)

    return my_item


</t>
<t tx="newlife.20101220143820.1467"># 获取用户多个道具的实例
def get_my_items(member_id, styles):
    my_items = []
    for style in styles:
        my_item = get_or_create_my_item(member_id, style)
        my_items.append(my_item)
    return my_items

</t>
<t tx="newlife.20101220143820.1468"># 获取用户一个鱼缸实例
def get_my_fish_tank(member_id, my_tank_id):
    key = CACHE_KEY_MY_FISH_TANK % (member_id, my_tank_id)
    my_tank = cache.get(key)

    if my_tank is None:
        chosen_db = choose_a_db(member_id)
        try:
            my_tank = MyFishTankInstance.objects.using(chosen_db).get(id=my_tank_id, member_id=member_id)
            # 冗余鱼缸信息
            fish_tank = get_fish_tank(my_tank.style)
            my_tank.description = fish_tank.description
            my_tank.star = fish_tank.star
            my_tank.family = fish_tank.family
            my_tank.p_type = fish_tank.p_type
            my_tank.capacity = fish_tank.capacity
            cache.set(key, my_tank)
        except MyFishTankInstance.DoesNotExist:
            return None

    return my_tank

</t>
<t tx="newlife.20101220143820.1469"># 获取用户多个鱼缸实例
def get_my_fish_tanks(member_id, my_tank_ids):
    my_tanks = []
    for my_tank_id in my_tank_ids:
        my_tank = get_my_fish_tank(member_id, my_tank_id)
        if my_tank:
            my_tanks.append(my_tank)
    return my_tanks

</t>
<t tx="newlife.20101220143820.1470">#获取用户精华实例
def get_or_create_my_essence(member_id, style):
    key = CACHE_KEY_MY_ESSENCE % (member_id, style)
    my_essence = cache.get(key)

    if not my_essence:
        chosen_db = choose_a_db(member_id)
        try:
            my_essence = MyEssenceInstance.objects.using(chosen_db).get(member_id=member_id, style=style)
        except MyEssenceInstance.DoesNotExist:
            my_essence = MyEssenceInstance(member_id=member_id, style=style)
            my_essence.save()
        # 冗余信息
        essence = get_essence(style)
        my_essence.name = essence.name
        my_essence.color = essence.color
        my_essence.star = essence.star

        cache.set(key,my_essence)
    return my_essence

</t>
<t tx="newlife.20101220143820.1471">#获取用户多个精华实例
def get_my_essences(member_id,styles):
    my_essences = []
    for style in styles:
        my_essence = get_or_create_my_essence(member_id, style)
        my_essences.append(my_essence)
    return my_essences

</t>
<t tx="newlife.20101220143820.1472">#获取用户当前包中所有精华的id
def get_my_essence_ids_in_bag(member_id):
    key = CACHE_KEY_MY_ESSE_IDS % (member_id)
    my_essence_styles = cache.get(key)

    if not my_essence_styles:
        chosen_db = choose_a_db(member_id)
        my_essence_styles = list(MyEssenceInstance.objects.using(chosen_db).filter(member_id=member_id).values_list('style', flat=True))
        cache.set(key,my_essence_styles)
    return my_essence_styles

</t>
<t tx="newlife.20101220143820.1473"># 获取用户当前鱼缸中所有鱼的id
def get_my_fish_ids_in_tank(member_id, my_tank_id):
    key = CACHE_KEY_MY_FISH_IDS_IN_TANK %  (member_id, my_tank_id)
    my_fish_ids = cache.get(key)

    if my_fish_ids is None:
        chosen_db = choose_a_db(member_id)
        chosen_model = choose_a_fish_model(member_id)
        my_fish_ids = list(globals()[chosen_model].objects.using(chosen_db).filter(my_fish_tank_id=my_tank_id, member_id=member_id).values_list('id', flat=True))
        cache.set(key, my_fish_ids)

    return my_fish_ids

@doc
这个函数没有什么特别的，标注的用了，缓存，多表，globals，flat，
还有一个问题，就是多表的时候查询，
chosen_db根据用户id判断用户所在的数据库，处理的是多库的情况。

chosen_model根据用户id判断用户的所在的表，处理的是多表的情况。

values_list('id', flat=True)，这个是用来返回一个由id组成的list,类似[121,23432,432,324,23,,234,]</t>
<t tx="newlife.20101220143820.1474"># 更新用户当前鱼缸中所有鱼的id
def update_my_fish_ids_in_tank(member_id, my_tank_id, my_fish_ids):
    key = CACHE_KEY_MY_FISH_IDS_IN_TANK %  (member_id, my_tank_id)
    cache.set(key, list(set(my_fish_ids)))

</t>
<t tx="newlife.20101220143820.1475"># 获取用户当前鱼缸中所有水草的id
def get_my_deco_ids_in_tank(member_id, my_tank_id):
    key = CACHE_KEY_MY_DECO_IDS_IN_TANK % (member_id, my_tank_id)
    my_deco_ids = cache.get(key)

    if my_deco_ids is None:
        chosen_db = choose_a_db(member_id)
        my_deco_ids = list(MyDecoInstance.objects.using(chosen_db).filter(my_fish_tank_id=my_tank_id, member_id=member_id).values_list('id', flat=True))
        cache.set(key, my_deco_ids)

    return my_deco_ids

</t>
<t tx="newlife.20101220143820.1476"># 更新用户当前鱼缸中所有水草的id
def update_my_deco_ids_in_tank(member_id, my_tank_id, my_deco_ids):
    key = CACHE_KEY_MY_DECO_IDS_IN_TANK %  (member_id, my_tank_id)
    cache.set(key, list(set(my_deco_ids)))

</t>
<t tx="newlife.20101220143820.1477"># 2010-07-20
# 更改方法
# 获取用户塑料袋中所有鱼的id
def get_my_fish_ids_in_bag(member_id):
    key = CACHE_KEY_MY_FISH_IDS_IN_BAG % member_id
    my_fish_ids = cache.get(key)
    if my_fish_ids is None:
        chosen_db = choose_a_db(member_id)
        chosen_model = choose_a_fish_model(member_id)
        my_fish_ids = list(globals()[chosen_model].objects.using(chosen_db).filter(my_fish_tank_id=0, member_id=member_id).values_list('id', flat=True))

        # 移走伴鱼
        fishes = get_member_companion_fishs(member_id)
        companion_fish_ids = set([fish.fishinstance_id for fish in fishes])
        fish_ids = set(my_fish_ids)
        my_fish_ids = list(fish_ids.difference(companion_fish_ids))

    cache.set(key, my_fish_ids)

    return my_fish_ids

</t>
<t tx="newlife.20101220143820.1478"># 更新用户塑料袋中所有鱼的id
def update_my_fish_ids_in_bag(member_id, my_fish_ids):
    key = CACHE_KEY_MY_FISH_IDS_IN_BAG % member_id
    # 移走伴鱼
    fishes = get_member_companion_fishs(member_id)
    companion_fish_ids = set([fish.fishinstance_id for fish in fishes])
    fish_ids = set(my_fish_ids)
    my_fish_ids = list(fish_ids.difference(companion_fish_ids))

    cache.set(key, my_fish_ids)

</t>
<t tx="newlife.20101220143820.1479"># 获取用户塑料袋中所有水草的id 
def get_my_deco_ids_in_bag(member_id):
    key = CACHE_KEY_MY_DECO_IDS_IN_BAG % member_id
    my_deco_ids = cache.get(key)

    if my_deco_ids is None:
        chosen_db = choose_a_db(member_id)
        my_deco_ids = list(MyDecoInstance.objects.using(chosen_db).filter(my_fish_tank_id=0, member_id=member_id).values_list('id', flat=True))
        cache.set(key, my_deco_ids)

    return my_deco_ids

</t>
<t tx="newlife.20101220143820.1480"># 更新用户塑料袋中所有水草的id
def update_my_deco_ids_in_bag(member_id, my_deco_ids):
    key = CACHE_KEY_MY_DECO_IDS_IN_BAG % member_id
    cache.set(key, list(set(my_deco_ids)))

</t>
<t tx="newlife.20101220143820.1481"># 获取用用户塑料袋中所有装饰id
def get_my_adorn_ids_in_bag(member_id):
    key = CACHE_KEY_MY_ADORN_IDS_IN_BAG % member_id
    my_adorn_ids = cache.get(key)

    if my_adorn_ids is None:
        chosen_db = choose_a_db(member_id)
        my_adorn_ids = list(MyAdornInstance.objects.using(chosen_db).filter(my_fish_tank_id=0, member_id=member_id).values_list('id', flat=True))
        cache.set(key, my_adorn_ids)

    return my_adorn_ids

</t>
<t tx="newlife.20101220143820.1482"># 获取用户鱼缸中所有装饰id 
def get_my_adorn_ids_in_tank(member_id, my_tank_id):
    key = CACHE_KEY_MY_ADORN_IDS_IN_TANK % (member_id, my_tank_id)
    my_adorn_ids = cache.get(key)

    if my_adorn_ids is None:
        chosen_db = choose_a_db(member_id)
        my_adorn_ids = list(MyAdornInstance.objects.using(chosen_db).filter(my_fish_tank_id=my_tank_id, member_id=member_id).values_list('id', flat=True))
        cache.set(key, my_adorn_ids)

    return my_adorn_ids

</t>
<t tx="newlife.20101220143820.1483"># 更新用户塑料袋中装饰id
def update_my_adorn_ids_in_bag(member_id, my_adorn_ids):
    key = CACHE_KEY_MY_ADORN_IDS_IN_BAG % member_id
    cache.set(key, list(set(my_adorn_ids)))

</t>
<t tx="newlife.20101220143820.1484"># 更新用户当前鱼缸中所有装饰的id
def update_my_adorn_ids_in_tank(member_id, my_tank_id, my_adorn_ids):
    key = CACHE_KEY_MY_ADORN_IDS_IN_TANK %  (member_id, my_tank_id)
    cache.set(key, list(set(my_adorn_ids)))

</t>
<t tx="newlife.20101220143820.1485"># 获取用户塑料袋中所有道具 style
def get_my_item_styles_in_bag(member_id):
    key = CACHE_KEY_MY_ITEM_STYLES_IN_BAG % member_id
    my_item_styles = cache.get(key)

    if my_item_styles is None:
        chosen_db = choose_a_db(member_id)
        my_item_styles = list(MyItemInstance.objects.using(chosen_db).filter(member_id = member_id).values_list('style', flat=True))
        cache.set(key, my_item_styles)

    return my_item_styles

</t>
<t tx="newlife.20101220143820.1486"># 更新用户塑料袋中所有道具的id
def update_my_item_styles_in_bag(member_id, item_styles):
    key = CACHE_KEY_MY_ITEM_STYLES_IN_BAG % member_id
    cache.set(key, item_styles)

</t>
<t tx="newlife.20101220143820.1487"># 更新用户包中的所有精华id
def update_my_essence_styles_in_bag(member_id,essence_styles):
    key = CACHE_KEY_MY_ESSE_IDS % member_id
    cache.set(key,essence_styles)

</t>
<t tx="newlife.20101220143820.1488"># 获取好友列表    
def get_friend_sns_ids(skey, member_id, sns):
    if sns == 'sns_china_baidu':
        friend_sns_ids = _get_baidu_friend_list(skey, member.id)
    elif sns == 'sns_china_sohu':
        friend_sns_ids = _get_sohu_friend_list(skey, member.id)
    elif sns == 'sns_china_renren':
        friend_sns_ids = _get_renren_friend_list(skey, member.id)
    else:
        friend_sns_ids = get_app_friends(skey)

    return friend_sns_ids

</t>
<t tx="newlife.20101220143820.1489"># 取得我的好友列表，默认从缓存中取
def _get_baidu_friend_list(sKey, member_id):
    key = CACHE_KEY_MY_FRIEND_LIST % member_id
    friend_list = cache.get(key)
    if friend_list is None:
        from apps.sns.sns_api import get_app_friends
        friend_list = get_app_friends(sKey)
        import types
        if type(friend_list) == types.ListType:
            cache.set(key, friend_list, 900)
        else:
            return []
    return friend_list

</t>
<t tx="newlife.20101220143820.1490">def _get_sohu_friend_list(sKey, member_id):
    key = CACHE_KEY_SOHU_FRIEND_LIST % member_id
    friend_list = cache.get(key)
    if friend_list is None:
        sns_ids = get_app_friends(sKey)
        if type(sns_ids) == types.ListType:
            cache.set(key, sns_ids, 3600*8)
            return sns_ids
        else:
            return []
    return friend_list

</t>
<t tx="newlife.20101220143820.1491">def _get_renren_friend_list(sKey, member_id):
    key = CACHE_KEY_RENREN_FRIEND_LIST % member_id
    friend_list = cache.get(key)
    if friend_list is None:
        sns_ids = get_app_friends(sKey)
        if type(sns_ids) == types.ListType:
            cache.set(key, sns_ids, 86400)
            return sns_ids
        else:
            return []

    return friend_list

</t>
<t tx="newlife.20101220143820.1492">#date: 2010-07-19
#comment: 取得用户伴鱼
def get_member_companion_fishs(member_id):
    key = CACHE_KEY_MY_COMPANION_FISH % member_id
    fish_list = cache.get(key)
    if fish_list is None:
        chosen_db = choose_a_db(member_id)
        fish_list = MyCompanionFishInfo.objects.using(chosen_db).filter(member_id=member_id)
        cache.set(key, list(fish_list))

    return fish_list

</t>
<t tx="newlife.20101220143820.1493">#date: 2010-07-19
#comment: 更新伴鱼 Cache
def update_my_member_companion_fishs(member_id, fish_list):
    key = CACHE_KEY_MY_COMPANION_FISH % member_id
    cache.set(key, list(fish_list))

</t>
<t tx="newlife.20101220143820.1494">#date: 2010-08-06
#comment: 存升级的鱼 Cache
def save_upgraded_fish(member_id, fish_id):
    key = CACHE_KEY_UPGRADED_FISH % member_id
    fish_ids = cache.get(key)
    if fish_ids is None:
        cache.set(key, [fish_id,])
    else:
        fish_ids.append(fish_id)
        cache.set(key, fish_ids)

</t>
<t tx="newlife.20101220143820.1495">#date: 2010-08-06
#comment: 取升级的鱼 Cache       
def get_upgraded_fish(member_id):
    key = CACHE_KEY_UPGRADED_FISH % member_id
    fish_ids = cache.get(key)
    return fish_ids

</t>
<t tx="newlife.20101220143820.1496">#date: 2010-08-06
#comment: 删升级的鱼 Cache       
def delete_upgraded_fish(member_id):
    key = CACHE_KEY_UPGRADED_FISH % member_id
    cache.delete(key)


</t>
<t tx="newlife.20101220143820.1497"># date: 2010-07-27
# author: wudan
# comment: 获取用户访问过的好友
def get_visited_friend(member_id):
    key = CACHE_KEY_VISITED_FRIEND % member_id
    visited_friend = cache.get(key)

    if visited_friend is None:
        try:
            visited_friend = VisitedFriendRecord.objects.get(member_id=member_id)
            cache.set(key, visited_friend)
        except VisitedFriendRecord.DoesNotExist:
            visited_friend = VisitedFriendRecord(member_id=member_id)
            visited_friend.save()
    return visited_friend

</t>
<t tx="newlife.20101220143820.1498">#date: 2010-08-18
#comment: 获取求购列表 cache
def get_wanttobuy_ids(member_id):
    key = CACHE_KEY_WANTTOBUY_IDS % member_id
    wtb_ids = cache.get(key)

    if wtb_ids is None:
        chosen_db = choose_a_db(member_id)
        wtb_ids = list(MyWantToBuy.objects.using(chosen_db).filter(member_id=member_id).values_list('id', flat=True))
        cache.set(key, wtb_ids)

    return wtb_ids

</t>
<t tx="newlife.20101220143820.1499">#date: 2010-08-18
#comment: 更新求购列表 cache
def update_wanttobuy_ids(member_id, ids):
    key = CACHE_KEY_WANTTOBUY_IDS % member_id
    cache.set(key, list(set(ids)))

</t>
<t tx="newlife.20101220143820.1500">#date: 2010-08-18
#comment: 获取求购物品信息
def get_wanttobuy(member_id, wtb_id):
    key = CACHE_KEY_WANTTOBUY % (member_id, wtb_id)
    wtb_info = cache.get(key)

    if wtb_info is None:
        chosen_db = choose_a_db(member_id)
        try:
            wtb_info = MyWantToBuy.objects.using(chosen_db).get(id=wtb_id, member_id=member_id)
            cache.set(key, wtb_info)
        except:
            wtb_info =None

    return wtb_info

</t>
<t tx="newlife.20101220143820.1501">#date: 2010-08-18
#comment: 更新已求购到的列表
# friend_good = {
#    'sid':sns_id,
#    'n':friend_name,
#    'wid':wanttobuy_id,
#    'fstyle': fish_style,
#    'fid':new myfishinstance id}
def update_wanttobuy_friends_goods(member_id, friend_good):
    key = CACHE_KEY_WANTTOBUY_FRIENDS % member_id
    friend_good_list = cache.get(key)

    if friend_good_list:
        friend_good_list = list(friend_good_list)
        friend_good_list.append(friend_good)
    else:
        friend_good_list = [friend_good,]

    cache.set(key, friend_good_list)

</t>
<t tx="newlife.20101220143820.1502">#date: 2010-08-18
#comment: 读取已求购到的列表
def get_wanttobuy_friends_goods(member_id, clean_flag=True):
    key = CACHE_KEY_WANTTOBUY_FRIENDS % member_id
    friend_good_list = cache.get(key)

    if clean_flag:
        cache.delete(key)

    return friend_good_list


</t>
<t tx="newlife.20101220143820.1503"># 取得某一个寄存包中的信息
def get_my_temp_bag_info(member_id, temp_bag_id):
    key = CACHE_KEY_TEMP_BAG_INFO % (member_id, temp_bag_id)
    temp_bag_info = cache.get(key)
    if temp_bag_info is None:
        chosen_db = choose_a_db(member_id)
        try:
            temp_bag_info = MyTempBagInfo.objects.using(chosen_db).get(id=temp_bag_id, member_id=member_id)
            cache.set(key, temp_bag_info)
        except:
            return None

    return temp_bag_info


</t>
<t tx="newlife.20101220143820.1504"># 取得某些寄存包的对象列表
def get_my_temp_bag_infos(member_id, temp_bag_info_ids):
    temp_bag_infos = []
    for temp_bag_info_id in temp_bag_info_ids:
        temp_bag_info = get_my_temp_bag_info(member_id, temp_bag_info_id)
        if temp_bag_info:
            temp_bag_infos.append(temp_bag_info)

    return temp_bag_infos

</t>
<t tx="newlife.20101220143820.1505"># 取得系统赠送礼物的id列表
def get_limit_my_temp_bag_info_ids(member_id):
    key = CACHE_KEY_LIMIT_TEMP_BAG_INFO_IDS % member_id
    temp_bag_info_ids = cache.get(key)
    if temp_bag_info_ids is None:
        chosen_db = choose_a_db(member_id)
        temp_bag_info_ids = list(MyTempBagInfo.objects.using(chosen_db).filter(member_id=member_id, will_expire=True).values_list('id', flat=True))
        cache.set(key, temp_bag_info_ids)
    return temp_bag_info_ids

@doc
注意temp_bag_info_ids = list(MyTempBagInfo.objects.using(chosen_db).filter(member_id=member_id, will_expire=True).values_list('id', flat=True))
中的“flat”参数，其再value_list中发挥作用，返回的是id这个值的list，而不是一个（id,）这个tuple的list。
</t>
<t tx="newlife.20101220143820.1506"># 取得其他寄存包内容id列表
def get_other_my_temp_bag_info_ids(member_id):
    key = CACHE_KEY_OTHER_TEMP_BAG_INFO_IDS % member_id
    temp_bag_info_ids = cache.get(key)
    if temp_bag_info_ids is None:
        chosen_db = choose_a_db(member_id)
        temp_bag_info_ids = list(MyTempBagInfo.objects.using(chosen_db).filter(member_id=member_id, will_expire=False).values_list('id', flat=True))
        cache.set(key, temp_bag_info_ids)
    return temp_bag_info_ids

</t>
<t tx="newlife.20101220143820.1507"># 更新有时间限制寄存包缓存
def update_limit_my_temp_bag_info_ids(member_id, temp_bag_info_ids):
    key = CACHE_KEY_LIMIT_TEMP_BAG_INFO_IDS % member_id
    cache.set(key, temp_bag_info_ids)

</t>
<t tx="newlife.20101220143820.1508"># 更新无限制寄存包缓存
def update_other_my_temp_bag_info_ids(member_id, temp_bag_info_ids):
    key = CACHE_KEY_OTHER_TEMP_BAG_INFO_IDS % member_id
    cache.set(key, temp_bag_info_ids)</t>
<t tx="newlife.20101220143820.1509">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20101220143820.1510"># -*- coding: utf-8 -*-
from apps.system.constants import *
from apps.system.models import *
from apps.members.constants import *
from global_constants import *
from django.conf import settings
import random, time, hashlib

</t>
<t tx="newlife.20101220143820.1511">def choose_a_db(member_id):
    if member_id &lt;= LIMIT_USERS_ONE_DB:
        chosen_db = 'default'
    elif member_id &lt;= 2*LIMIT_USERS_ONE_DB:
        chosen_db = 'second'
    elif member_id &lt;= 3*LIMIT_USERS_ONE_DB:
        chosen_db = 'third'

    return chosen_db


</t>
<t tx="newlife.20101220143820.1512">def choose_a_fish_model(member_id):
    '''
    member_id对10取余，返回值{0~9}(1)
    '''
    num = member_id % FISH_MODEL_NUM
    #FISH_MODEL_NUM = 10
    #FISH_MODEL
    return FISH_MODEL[num]
    


</t>
<t tx="newlife.20101220143820.1513">def get_tax(price):
    if price &lt; 30:
        tax = 1
    else:
        tax = int(round(3.0*price/100.0))
    return tax


</t>
<t tx="newlife.20101220143820.1514">class Dice(object):
    @others
</t>
<t tx="newlife.20101220143820.1515">def __init__(self,chances):
    total = 0
    self.chances = []
    total = sum(chances)
    for chance in chances:
        self.chances.append(1.0*chance/total)

</t>
<t tx="newlife.20101220143820.1516">def throw_dice(self):
    chances = self.chances
    random.seed(time.time())
    ran = random.random()*sum(chances)
    total = 0
    for i in range(0,len(chances)):
        new_total = total+chances[i]
        if ran&gt;=total and ran&lt;new_total:
            return i
        total = new_total

    return 0

</t>
<t tx="newlife.20101220143820.1517">def login_member(request, sKey):
    from apps.members.cache import get_member
    from apps.members.helper import login_sns_user
    try:
        member = get_member(request.session[hashlib.md5(sKey).hexdigest()])
    except:
        member = login_sns_user(request, sKey)

    return member


</t>
<t tx="newlife.20101220143820.1518">def add_pearls_record_openstage(member_id, pearls, status='SU'):
    upr = UsePearlsRecord(member_id=member_id, type='OS', pearls=pearls, status=status)
    upr.save()


</t>
<t tx="newlife.20101220143820.1519">def add_pearls_record_tankposition(member_id, pearls, status='SU'):
    upr = UsePearlsRecord(member_id=member_id, type='TP', pearls=pearls, status=status)
    upr.save()

</t>
<t tx="newlife.20101220143820.1520">def add_pearls_record_synthrate(member_id, synth_id, pearls, status='PD'):
    upr = UsePearlsRecord(member_id=member_id, synth_id=synth_id, type='SR', pearls=pearls, status=status)
    upr.save()

</t>
<t tx="newlife.20101220143820.1521">def update_pearls_record_synthrate(member_id, synth_id, status='SU'):
    try:
        upr = UsePearlsRecord.objects.get(member_id=member_id, synth_id=synth_id, type='SR')
        upr.status = status
        upr.save()
    except UsePearlsRecord.DoesNotExist:
        pass

</t>
<t tx="newlife.20101220143820.1522">def add_pearls_record_synthformula(member_id, synth_id, pearls, status='PD'):
    upr = UsePearlsRecord(member_id=member_id, synth_id=synth_id, type='SF', pearls=pearls, status=status)
    upr.save()

</t>
<t tx="newlife.20101220143820.1523">def update_pearls_record_synthformula(member_id, synth_id, status='SU'):
    try:
        upr = UsePearlsRecord.objects.get(member_id=member_id, synth_id=synth_id, type='SF')
        upr.status = status
        upr.save()
    except UsePearlsRecord.DoesNotExist:
        pass

</t>
<t tx="newlife.20101220143820.1524">def add_pearls_record_synthposition(member_id, pearls, status='SU'):
    upr = UsePearlsRecord(member_id=member_id, type='SP', pearls=pearls, status=status)
    upr.save()


</t>
<t tx="newlife.20101220143820.1525">def generate_bd_sig(params, secret_key=settings.SNS_SECRET_KEY):
    hasher = hashlib.md5(''.join(['%s=%s' % (x[7:], params[x]) for x in sorted(params.keys())]))
    hasher.update(secret_key)
    return hasher.hexdigest()

</t>
<t tx="newlife.20101220143820.1526">def generate_4399_sig(params, secret_key=settings.SNS_SECRET_KEY):
    hasher = hashlib.md5(''.join(['%s=%s&amp;' % (x, params[x]) for x in sorted(params.keys())]))
    hasher.update(secret_key)
    return hasher.hexdigest()

</t>
<t tx="newlife.20101220143820.1527">def generate_sohu_sig(params, secret_key=settings.SNS_SECRET_KEY):
    hasher = hashlib.md5(''.join(['%s=%s' % (x, params[x]) for x in sorted(params.keys())]))
    hasher.update(secret_key)
    return hasher.hexdigest()

</t>
<t tx="newlife.20101220143820.1528">def generate_renren_sig(params, secret_key=settings.SNS_SECRET_KEY):
    hasher = hashlib.md5(''.join(['%s=%s' % (x[7:], params[x]) for x in sorted(params.keys())]))
    hasher.update(secret_key)
    return hasher.hexdigest()
</t>
<t tx="newlife.20101220143820.1531"></t>
<t tx="newlife.20101220143820.1532">可派遣的体力下限：5；
    def get_power(self):
        passed_time = datetime.now() - self.last_power_time
        powers = int(passed_time.seconds/3600)
        return min(DRAGON_MAX_POWER, powers)
上次派出5小时后可再次派出。</t>
<t tx="newlife.20101220143820.1534">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20101220143820.1535"># -*- coding: utf-8 -*-

from datetime import datetime
from django.db import models
from django.core.cache import cache
from apps.system.models import MultiDB
from apps.games.constants import *
from apps.products.constants import FISH_COLOR_CHOICES, FAMILY_CHOICES


</t>
<t tx="newlife.20101220143820.1536">class PetTempInfo(MultiDB):
    #member_id = models.IntegerField() # 用户id
    my_fish_id = models.IntegerField(default=0) #我的鱼ID，0--表示没有派遣鱼
    stage = models.IntegerField(default=0) # 所在场景
    status = models.CharField(max_length=1, default='c') # 状态
    caught_fish = models.CharField(max_length=20, default='') # 捉的鱼
    end_time = models.DateTimeField(blank=True, null=True) # 收获时间
    is_stolen = models.BooleanField(default=False) # 是否已被偷
    last_physic_used = models.DateTimeField(blank=True,null=True) #上一次收鱼药剂使用时间
    is_protected = models.BooleanField(default=False) # 是否被潜艇鱼保护器保护

    @others
    
@doc
print 继承MultiDB,谁派遣的，派遣的哪条鱼，派到哪关，抓的哪条鱼，啥时候抓完，有没有被偷，可不可以提前收，是否被保护。</t>
<t tx="newlife.20101220143820.1537">def update_cache(self):
    key = CACHE_KEY_MY_DISPATCH_PET_INFO % (self.member_id, self.my_fish_id)
    cache.set(key, self)

</t>
<t tx="newlife.20101220143820.1538">def delete_cache(self):
    key = CACHE_KEY_MY_DISPATCH_PET_INFO % (self.member_id, self.my_fish_id)
    cache.delete(key)

</t>
<t tx="newlife.20101220143820.1539">def save(self):
    super(PetTempInfo, self).save()
    self.update_cache()

</t>
<t tx="newlife.20101220143820.1540">def delete(self):
    self.delete_cache()
    super(PetTempInfo, self).delete()

</t>
<t tx="newlife.20101220143820.1541">def get_caught_fish_styles(self):
    if self.caught_fish:
        return self.caught_fish.split(',')
    else:
        return []

</t>
<t tx="newlife.20101220143820.1542">def can_be_used_physic(self):
    if self.last_physic_used is None:
        return False
    else:
        return True

</t>
<t tx="newlife.20101220143820.1543">class Meta:
    db_table = 'ppy_pettempinfo'


</t>
<t tx="newlife.20101220143820.1544">class CatchFishRefreshFish(models.Model):
    style = models.CharField(max_length=32) # Fish对象style:dxxxx_r
    stage = models.IntegerField() # 场景
    level = models.IntegerField() # 小关
    chance = models.FloatField() # 几率
    start_date = models.DateTimeField(default=datetime.now)
    end_date = models.DateTimeField(blank=True, null=True)

    @others
</t>
<t tx="newlife.20101220143820.1545">def update_cache(self):
    key = CACHE_KEY_REFRESH_FISH % (self.id)
    cache.set(key, self)

</t>
<t tx="newlife.20101220143820.1546">def delete_cache(self):
    key = CACHE_KEY_REFRESH_FISH_IDS % (self.stage, self.level)
    cache.delete(key)
    key = CACHE_KEY_REFRESH_FISH % (self.id)
    cache.delete(key)

</t>
<t tx="newlife.20101220143820.1547">def save(self):
    if not self.id:
        self.delete_cache()
    super(CatchFishRefreshFish, self).save()
    self.update_cache()

</t>
<t tx="newlife.20101220143820.1548">def delete(self):
    self.delete_cache()
    super(CatchFishRefreshFish, self).delete()

</t>
<t tx="newlife.20101220143820.1549">def get_fish_name(self):
    from apps.products.cache import get_fish_with_stylecolor
    fish = get_fish_with_stylecolor(self.style)
    return fish.name

</t>
<t tx="newlife.20101220143820.1550">class Meta:
    db_table = 'ppy_catchfishrefreshfish'


</t>
<t tx="newlife.20101220143820.1551"># For mini card game
class Card(models.Model):
    style = models.CharField(max_length=64)
    name = models.CharField(max_length=64)
    description = models.TextField(blank=True, null=True)
    type = models.IntegerField(choices=CARD_TYPES)
    group = models.IntegerField()   # 牌组别
    is_main = models.BooleanField() # 是否主牌
    helper_type = models.IntegerField(choices=HELPER_TYPES, blank=True, null=True)  # 辅助牌类型
    helper_val = models.IntegerField(blank=True, null=True)        # 辅助牌的加成数值

    @others
</t>
<t tx="newlife.20101220143820.1552">def update_cache(self):
    key = CACHE_KEY_CARD % (self.style)
    cache.set(key, self)

</t>
<t tx="newlife.20101220143820.1553">def delete_cache(self):
    key = CACHE_KEY_CARD % (self.style)
    cache.delete(key)

</t>
<t tx="newlife.20101220143820.1554">def save(self):
    super(Card, self).save()
    self.update_cache()

</t>
<t tx="newlife.20101220143820.1555">def delete(self):
    self.delete_cache()
    super(Card, self).delete()

</t>
<t tx="newlife.20101220143820.1556">class Meta:
    db_table = 'ddl_card'


</t>
<t tx="newlife.20101220143820.1557">class Skill(models.Model):
    style = models.CharField(max_length=64)
    name = models.CharField(max_length=64)
    description = models.TextField(blank=True, null=True)
    crystal = models.CharField(max_length=64)
    family_req = models.IntegerField(max_length=64)
    star_req = models.IntegerField(default=0)
    level_req = models.IntegerField(default=0)

    @others
</t>
<t tx="newlife.20101220143820.1558">def update_cache(self):
    key = CACHE_KEY_SKILL % (self.style)
    cache.set(key, self)

</t>
<t tx="newlife.20101220143820.1559">def delete_cache(self):
    key = CACHE_KEY_SKILL % (self.style)
    cache.delete(key)

</t>
<t tx="newlife.20101220143820.1560">def save(self):
    super(Skill, self).save()
    self.update_cache()

</t>
<t tx="newlife.20101220143820.1561">def delete(self):
    self.delete_cache()
    super(Skill, self).delete()

</t>
<t tx="newlife.20101220143820.1562">class Meta:
    db_table = 'ddl_skill'


</t>
<t tx="newlife.20101220143820.1563">class CardGameRefreshCard(models.Model):
    style = models.CharField(max_length=64) # Card base style
    chance = models.FloatField() # 几率

    @others
</t>
<t tx="newlife.20101220143820.1564">def update_cache(self):
    key = CACHE_KEY_REFRESH_CARD % (self.style)
    cache.set(key, self)

</t>
<t tx="newlife.20101220143820.1565">def delete_cache(self):
    key = CACHE_KEY_REFRESH_CARD % (self.style)
    cache.delete(key)

</t>
<t tx="newlife.20101220143820.1566">def save(self):
    super(CardGameRefreshCard, self).save()
    self.update_cache()

</t>
<t tx="newlife.20101220143820.1567">def delete(self):
    self.delete_cache()
    super(CardGameRefreshCard, self).delete()

</t>
<t tx="newlife.20101220143820.1568">def get_card_name(self):
    from apps.games.cache import get_card
    card = get_card(self.style)
    return card.name

</t>
<t tx="newlife.20101220143820.1569">class Meta:
    db_table = 'ddl_cardgamerefreshcard'


</t>
<t tx="newlife.20101220143820.1570">class CardGamelevelInfo(models.Model):
    stage = models.IntegerField()               # 大关
    level = models.IntegerField()               # 小关
    battle_field = models.IntegerField()        # 战场范围
    p_position = models.IntegerField()          # 玩家初始位置
    b_position = models.IntegerField()          # Boss初始位置
    b_property = models.IntegerField()          # Boss属性值
    b_attack = models.IntegerField()            # Boss基础攻击力
    b_defence = models.IntegerField()           # Boss基础防御力
    b_life = models.IntegerField()              # Boss基础生命值
    b_attack_range = models.IntegerField()      # Boss基本攻击范围
    b_speed = models.IntegerField()             # Boss基础移动速度
    b_crit = models.IntegerField()              # Boss基础暴击率
    b_skills = models.CharField(max_length=256, blank=True, null=True)  # Boss基本技能
    b_family = models.IntegerField(choices=FAMILY_CHOICES, blank=True, null=True)

    @others
</t>
<t tx="newlife.20101220143820.1571">def update_cache(self):
    key = CACHE_KEY_GAME_LEVEL_INFO % (self.stage, self.level)
    cache.set(key, self)

</t>
<t tx="newlife.20101220143820.1572">def delete_cache(self):
    key = CACHE_KEY_GAME_LEVEL_INFO % (self.stage, self.level)
    cache.delete(key)

</t>
<t tx="newlife.20101220143820.1573">def save(self):
    super(CardGamelevelInfo, self).save()
    self.update_cache()

</t>
<t tx="newlife.20101220143820.1574">def delete(self):
    self.delete_cache()
    super(CardGamelevelInfo, self).delete()

</t>
<t tx="newlife.20101220143820.1575">class Meta:
    db_table = 'ddl_cardgamelevelinfo'</t>
<t tx="newlife.20101221161857.1671"> @doc
时刻要记住，缓存，
但存在缓存的时候，一些平时考虑问题的规则要发生变化，</t>
<t tx="newlife.20101221161857.1672">@doc

关于周四要完成的一个认识总结；

说说我对这个项目的认识，虽然我不喜欢svn这种恶心的管理方式，但是在cvs后期svn还是有很大优势的，

缓存，

分表，


单元测试：因为我的机器的flashbug相对没有很稳定，所以这个测试就变得很重要了，


接口编写：

需要注意的问题，我们写的和flash交互的接口都再webservice里，
清晰的接口说明，返回的值，必须是标准的python对象，string，int，dict，tuple，list。
平时传给template的queryset对象就不能用了，所以在每次返回列表对象的时候，必须要把获取的对象“写实”（这个怎么描述比较好？），
具体就是我们返回的对象的列表，必须是由对象的属性和属性值组成的dict的list。返回的还是list，不过里面的对象变成dict。

时刻要记住，缓存。
</t>
<t tx="newlife.20101221174231.1675">代码仓库地址：
http://test.raytoon.cn/ddl_server
http://test.raytoon.cn/ddl_media
安装本地python，django，mysql环境，

1，修改setttings.py文件，指定本地数据库。
2，修改MEDIA_ROOT下profile.xml为localhpost:8000;
3，ms这个版本的代码没有包含amf的库，需要自己导入。
</t>
<t tx="newlife.20101222104201.1702">我们需要处理大数据量的访问：普通的架构是不适用的，为了提高系统的响应速度，给用户更好的体验，
用到的技术有，缓存，分表。</t>
<t tx="newlife.20101222104201.1703">class MyFishInstanceOne(MyFishInstance):
    pass

    def update_cache(self):
        key = CACHE_KEY_MY_FISH % (self.member_id, self.id)
        cache.set(key, self)
        
    def delete_cache(self):
        key = CACHE_KEY_MY_FISH % (self.member_id, self.id)
        cache.delete(key)
        
    def save(self):
        super(MyFishInstanceOne, self).save()
        self.delete_cache() #因为有冗余信息需要更新
        
    def delete(self):
        self.delete_cache()
        super(MyFishInstanceOne, self).delete()
        
    class Meta:
        db_table = 'ppy_myfishinstanceone'
@doc

缓存运行的方式采用django封装的底层方法，直接在缓存中对key进行操作，
CACHE_KEY_MY_FISH = 'mem__mf_%s_%s_v1' 
表明是谁的鱼，需要member的id，fish的id。
其实这个也是分表的实现。</t>
<t tx="newlife.20101222104201.1704">@doc

class Meta:
    abstract = True
定义抽象表，实际数据库中没有这个表
同时这个表还是继承了MultiDB，







</t>
<t tx="newlife.20101222104201.1705">这个东西还是真补好写啊，，，</t>
<t tx="newlife.20101222104201.1709">class MultiDB(models.Model):
    member_id = models.IntegerField()

    @others
</t>
<t tx="newlife.20101222104201.1710">def save(self):
    if self.member_id &lt;= LIMIT_USERS_ONE_DB:
        super(MultiDB,self).save(using='default')
    elif self.member_id &lt;= 2*LIMIT_USERS_ONE_DB:
        super(MultiDB,self).save(using='second')
    elif self.member_id &lt;= 3*LIMIT_USERS_ONE_DB:
        super(MultiDB,self).save(using='third')


</t>
<t tx="newlife.20101222104201.1711">def delete(self):
    if self.member_id &lt;= LIMIT_USERS_ONE_DB:
        super(MultiDB,self).delete(using='default')
    elif self.member_id &lt;= 2*LIMIT_USERS_ONE_DB:
        super(MultiDB,self).delete(using='second')
    elif self.member_id &lt;= 3*LIMIT_USERS_ONE_DB:
        super(MultiDB,self).delete(using='third')

</t>
<t tx="newlife.20101222104201.1712">class Meta:
    abstract = True


</t>
<t tx="newlife.20101222104201.1777">class MyFishInstance(MultiDB):
    #member_id = models.IntegerField() # 用户id
    my_fish_tank_id = models.IntegerField(default=0) # 收藏鱼所在鱼缸id，注意是MyFishTankInstance模型的id
    style = models.CharField(max_length=32) # 标志是鱼的种类，颜色，等级
    hungry = models.FloatField(default=0.0) # 饱食度
    exp = models.FloatField(default=0.0) # 成长值
    has_deformed = models.BooleanField(default=False) # 是否变形
    last_calculated = models.DateTimeField(auto_now=True) # 上一次重新计算属性的时间
    last_potion_used = models.DateTimeField(blank=True,null=True) # 上一次使用药丸时间
    last_dispatched = models.DateTimeField(blank=True,null=True) # 最后派出回来时间
    last_power_time = models.DateTimeField(auto_now_add=True) #最后更新体力时间

    @others
</t>
<t tx="newlife.20101222104201.1778">def can_be_used_potion(self):
    today = date.today()
    if not self.last_potion_used or (self.last_potion_used and self.last_potion_used.date() &lt; today):
        return True
    else:
        return False

</t>
<t tx="newlife.20101222104201.1779">def _get_base_style(self):
    return self.style.split('_')[0]
</t>
<t tx="newlife.20101222104201.1780">base_style = property(_get_base_style)

def _get_color(self):
    return self.style.split('_')[1]
</t>
<t tx="newlife.20101222104201.1781">color = property(_get_color)

def _get_level(self):
    return int(self.style.split('_')[2])
</t>
<t tx="newlife.20101222104201.1782">level = property(_get_level)

def is_highest_level(self):
    stars = STAR_LEVEL_DEFORMATION.keys()
    stars = sorted(stars)
    for count in range(0,len(stars)):
        if self.star &lt;= stars[count]:
            highest_level = STAR_LEVEL_DEFORMATION[stars[count]]['highest_level']
            break

    return self.level &gt;= highest_level

</t>
<t tx="newlife.20101222104201.1783"># 获取最大的变形次数  
def get_deform_levels(self):
    stars = STAR_LEVEL_DEFORMATION.keys()
    stars = sorted(stars)
    for count in range(0,len(stars)):
        if self.star &lt;= stars[count]:
            deform_levels = STAR_LEVEL_DEFORMATION[stars[count]]['deform_levels']
            break

    return deform_levels

</t>
<t tx="newlife.20101222104201.1784">def get_display_name(self):
    if hasattr(self, 'name'):
        if self._get_level()==1:
            return u'%s蛋' % self.name
        return self.name
    return ''

</t>
<t tx="newlife.20101222104201.1785"># 判断用户的某条鱼应该显示哪个style
def get_display_style(self):
    deform_levels = self.get_deform_levels()
    for count in range(0, len(deform_levels)):
        if self.level &gt;= deform_levels[-(count+1)]:
            style = '_'.join([self.base_style, self.color, str(len(deform_levels)-count)])
            break

    return style

</t>
<t tx="newlife.20101222104201.1786">#派遣休息剩余时间
def get_dispatch_rest_time(self):
    res = 0
    if self.last_dispatched:
        rest_time = self.last_dispatched + timedelta(0, 4*DEFAULT_PET_TIME) - datetime.now()
        res = rest_time.days*24*3600 + rest_time.seconds
    return res

</t>
<t tx="newlife.20101222104201.1787">def get_power(self):
    passed_time = datetime.now() - self.last_power_time
    powers = int(passed_time.seconds/3600)
    return min(DRAGON_MAX_POWER, powers)

</t>
<t tx="newlife.20101222104201.1788"># 下一个变形等级
def next_deform_level(self):
    deform_levels = self.get_deform_levels()
    for deform_level in deform_levels:
        if self.level &lt; deform_level:
            return deform_level
    return deform_levels[-1]

</t>
<t tx="newlife.20101222104201.1789"># 卖出价格
def sell_price(self):
    return 5*(self.level-1)*int(pow(self.star,1.3))

</t>
<t tx="newlife.20101222104201.1790">class Meta:
    abstract = True


</t>
<t tx="newlife.20101222104201.1907"></t>
<t tx="newlife.20101222104201.1908">|-- crossdomain.xml
|-- docs/
|   |-- 20101217.sql
|   |-- db_index.sql
|   |-- images/
|   |   |-- IMG_0482.JPG
|   |   |-- IMG_0483.JPG
|   |   |-- IMG_0484.JPG
|   |   `-- IMG_0485.JPG
|   `-- task.sql
|-- global_constants.py
|-- invite/
|   |-- __init__.py
|   `-- invite_renren/
|       |-- __init__.py
|       |-- cache.py
|       |-- constants.py
|       |-- helper.py
|       |-- models.py
|       |-- urls.py
|       `-- views.py
|-- manage.py
|-- ok.html
|-- payment/
|   |-- __init__.py
|   |-- payment_163/
|   |   |-- __init__.py
|   |   |-- helper.py
|   |   |-- models.py
|   |   |-- urls.py
|   |   `-- views.py
|   |-- payment_4399/
|   |   |-- __init__.py
|   |   |-- helper.py
|   |   |-- models.py
|   |   |-- urls.py
|   |   `-- views.py
|   |-- payment_baidu/
|   |   |-- __init__.py
|   |   |-- helper.py
|   |   |-- models.py
|   |   |-- urls.py
|   |   `-- views.py
|   |-- payment_facebook/
|   |   |-- __init__.py
|   |   |-- constants.py
|   |   |-- helper.py
|   |   |-- models.py
|   |   |-- object_dict.py
|   |   |-- urls.py
|   |   |-- views.py
|   |   `-- xml2dict.py
|   |-- payment_gummy/
|   |   |-- __init__.py
|   |   |-- helper.py
|   |   |-- models.py
|   |   |-- urls.py
|   |   `-- views.py
|   |-- payment_office/
|   |   |-- __init__.py
|   |   |-- helper.py
|   |   |-- models.py
|   |   |-- urls.py
|   |   `-- views.py
|   |-- payment_renren/
|   |   |-- __init__.py
|   |   |-- helper.py
|   |   |-- models.py
|   |   |-- urls.py
|   |   `-- views.py
|   |-- payment_sdo/
|   |   |-- __init__.py
|   |   |-- helper.py
|   |   |-- models.py
|   |   |-- urls.py
|   |   `-- views.py
|   `-- payment_sohu/
|       |-- __init__.py
|       |-- helper.py
|       |-- models.py
|       |-- urls.py
|       `-- views.py
|-- ppy.db
|-- resource/
|-- scripts/
|   |-- __init__.py
|   |-- append_fish.py
|   |-- create_numbers_sdo.py
|   |-- create_user.py
|   |-- delete_shop_gt5.py
|   |-- delete_shopitem.py
|   |-- reinituser.py
|   `-- update_cache.py
|-- settings.py
|-- templates/
|   |-- 404.html
|   |-- 500.html
|   |-- captcha/
|   |-- freegift/
|   |   |-- freegift_index.html
|   |   |-- freegift_receive.html
|   |   `-- redirect.html
|   |-- invite/
|   |   |-- invite_163/
|   |   |   |-- is_invitation.html
|   |   |   `-- isinvite.html
|   |   |-- invite_4399/
|   |   |   |-- isinvite.html
|   |   |   `-- isinvite_send.html
|   |   |-- invite_baidu/
|   |   |   |-- isinvite.html
|   |   |   `-- isinvite_send.html
|   |   |-- invite_renren/
|   |   |   |-- isinvite_info.html
|   |   |   `-- isinvite_send.html
|   |   |-- invite_sdo/
|   |   |   |-- is_invitation.html
|   |   |   |-- is_invitation_result.html
|   |   |   `-- os_invitation.html
|   |   `-- invite_sohu/
|   |       `-- isinvite.html
|   |-- kf/
|   |   |-- decoinfo.html
|   |   |-- disabled.html
|   |   |-- disabledlist.html
|   |   |-- enabled.html
|   |   |-- enabledlist.html
|   |   |-- essenceinfo.html
|   |   |-- fishinfo.html
|   |   |-- fishtankinfo.html
|   |   |-- hf_almanac.html
|   |   |-- hf_cache.html
|   |   |-- hf_deco.html
|   |   |-- hf_essence.html
|   |   |-- hf_exp.html
|   |   |-- hf_fish.html
|   |   |-- hf_fishtank.html
|   |   |-- hf_item.html
|   |   |-- hf_member.html
|   |   |-- iteminfo.html
|   |   |-- main.html
|   |   |-- mainb.html
|   |   |-- mainc.html
|   |   |-- maind.html
|   |   |-- none.html
|   |   |-- none_b.html
|   |   |-- none_c.html
|   |   |-- ok.html
|   |   |-- payrecord.html
|   |   |-- paytotal.html
|   |   |-- pearlrecord.html
|   |   |-- shellrecord.html
|   |   |-- spendtotal.html
|   |   `-- upnotice.html
|   |-- main/
|   |   `-- main_frame.html
|   |-- office/
|   |   |-- index.html
|   |   `-- login_failed.html
|   |-- payment/
|   |   |-- payment_163/
|   |   |   |-- confirm.html
|   |   |   |-- index.html
|   |   |   `-- paopaoyuProxy.html
|   |   |-- payment_4399/
|   |   |   `-- index.html
|   |   |-- payment_baidu/
|   |   |   |-- confirm.html
|   |   |   `-- index.html
|   |   |-- payment_facebook/
|   |   |   |-- confirm.html
|   |   |   |-- index.html
|   |   |   |-- index_mycard.html
|   |   |   |-- mycard_ingame.html
|   |   |   |-- ppindex.html
|   |   |   |-- redirect.html
|   |   |   `-- success.html
|   |   |-- payment_gummy/
|   |   |   |-- confirm.html
|   |   |   `-- index.html
|   |   |-- payment_renren/
|   |   |   |-- confirm.html
|   |   |   `-- index.html
|   |   |-- payment_sdo/
|   |   |   |-- confirm.html
|   |   |   |-- confirm_activity.html
|   |   |   |-- index.html
|   |   |   |-- index_activity.html
|   |   |   `-- result.html
|   |   `-- payment_sohu/
|   |       |-- confirm.html
|   |       `-- index.html
|   |-- sns/
|   |   |-- auth_sns.html
|   |   |-- base_facebook.html
|   |   |-- base_mr.html
|   |   |-- base_sdo.html
|   |   |-- disabled.html
|   |   |-- errors.html
|   |   |-- exchange_sdo.html
|   |   |-- fb_feeds.js
|   |   |-- feeds_reward.html
|   |   |-- index.html
|   |   |-- index_163.html
|   |   |-- index_4399.html
|   |   |-- index_baidu.html
|   |   |-- index_facebook.html
|   |   |-- index_gummy.html
|   |   |-- index_mr.html
|   |   |-- index_myspace.html
|   |   |-- index_office.html
|   |   |-- index_renren.html
|   |   |-- index_sdo.html
|   |   |-- index_sohu.html
|   |   |-- insite_invite_info.html
|   |   |-- outsite_invite_info-010716.html
|   |   |-- outsite_invite_info-010802.html
|   |   |-- outsite_invite_info.html
|   |   |-- score.html
|   |   |-- score_163.html
|   |   |-- score_4399.html
|   |   |-- score_baidu.html
|   |   |-- score_renren.html
|   |   |-- score_sdo.html
|   |   `-- score_sohu.html
|   |-- users/
|   |   |-- account_not_active_failed.html
|   |   |-- active_account_success.html
|   |   |-- active_email.html
|   |   |-- change_password.html
|   |   |-- forgot_password.html
|   |   |-- forgot_password_email.html
|   |   |-- index.html
|   |   |-- invite.html
|   |   |-- just_for_fun.html
|   |   |-- login_failed.html
|   |   |-- register.html
|   |   |-- register_success.html
|   |   |-- reset_password.html
|   |   |-- reset_password_email.html
|   |   |-- reset_password_success.html
|   |   `-- settings.html
|   `-- wap/
|       |-- buy_food.html
|       |-- disabled.html
|       |-- dispatch.html
|       |-- feed.html
|       |-- friends.html
|       |-- tanks.html
|       `-- user_info.html
|-- tests/
|   |-- __init__.py
|   |-- almanactest.py
|   |-- amf-client-test.py
|   |-- catchfishtest.py
|   |-- logintest.py
|   |-- membertest.py
|   |-- myspacetest.py
|   |-- pubseatest.py
|   |-- ranktest.py
|   |-- reward_test.py
|   |-- shoppingtest.py
|   |-- synthesistest.py
|   `-- test_init.sql
|-- urls.py
`-- users/
    |-- __init__.py
    |-- admin.py
    |-- cache.py
    |-- constants.py
    |-- forms.py
    |-- helper.py
    |-- models.py
    |-- urls.py
    `-- views.py</t>
<t tx="newlife.20101222104201.1909">|-- apps/#系统中真正工作的部分。
|   |-- __init__.py
|   |-- games/
|   |   |-- __init__.py
|   |   |-- cache.py
|   |   |-- constants.py
|   |   |-- helper.py
|   |   `-- models.py#|PetTempInfo|CatchFishRefreshFish|Card|Skill|CardGameRefreshCard
|   |-- KeywordsFilter/
|   |   |-- __init__.py
|   |   |-- cache.py
|   |   `-- models.py
|   |-- kf/
|   |   |-- __init__.py
|   |   |-- forms.py
|   |   |-- helper.py
|   |   |-- models.py
|   |   |-- tests.py
|   |   |-- urls.py
|   |   `-- views.py
|   |-- members/
|   |   |-- __init__.py
|   |   |-- cache.py
|   |   |-- constants.py
|   |   |-- helper.py
|   |   `-- models.py#|Member|MyItemInstance|MyFishTankInstance|MyFishInstance|MyDecoInstance|MyAdornInstance|MyEssenceInstance|MyAlmanacInfo|DisabledMember|MyCompanionFishInfo|VisitedFriendRecord|MyWantToBuy|MyTempBagInfo
|   |-- messages/
|   |   |-- __init__.py
|   |   |-- cache.py
|   |   |-- constants.py
|   |   |-- helper.py
|   |   `-- models.py#|MotionMsg|FishStatusMsg|RewardMsg
|   |-- products/
|   |   |-- __init__.py
|   |   |-- cache.py
|   |   |-- constants.py
|   |   |-- helper.py
|   |   `-- models.py#Essence|Item|Product|Fish|Deco|Adorn|FishTank
|   |-- ranking/
|   |   |-- __init__.py
|   |   |-- cache.py
|   |   |-- constants.py
|   |   |-- helper.py
|   |   `-- models.py
|   |-- score/
|   |   |-- __init__.py
|   |   |-- cache.py
|   |   |-- constants.py
|   |   |-- helper.py
|   |   `-- models.py
|   |-- shops/
|   |   |-- __init__.py
|   |   |-- cache.py
|   |   |-- constants.py
|   |   |-- helper.py
|   |   `-- models.py#|ShopProduct|ShopProductRecord|
|   |-- sns/
|   |   |-- __init__.py
|   |   |-- cache.py
|   |   |-- constants.py
|   |   |-- helper.py
|   |   |-- models.py
|   |   |-- sns_api.py
|   |   |-- sns_api_163.py
|   |   |-- sns_api_4399.py
|   |   |-- sns_api_baidu.py
|   |   |-- sns_api_facebook.py
|   |   |-- sns_api_mr.py
|   |   |-- sns_api_myspace.py
|   |   |-- sns_api_office.py
|   |   |-- sns_api_renren.py
|   |   |-- sns_api_sdo.py
|   |   |-- sns_api_sohu.py
|   |   |-- sns_api_test.py
|   |   |-- sns_msg.py
|   |   |-- sns_msg_163.py
|   |   |-- sns_msg_4399.py
|   |   |-- sns_msg_baidu.py
|   |   |-- sns_msg_myspace.py
|   |   |-- sns_msg_renren.py
|   |   |-- sns_msg_sdo.py
|   |   |-- sns_msg_sohu.py
|   |   `-- views.py
|   |-- synthesis/
|   |   |-- __init__.py
|   |   |-- cache.py
|   |   |-- constants.py
|   |   |-- helper.py
|   |   `-- models.py
|   |-- system/
|   |   |-- __init__.py
|   |   |-- admin.py
|   |   |-- cache.py
|   |   |-- constants.py
|   |   |-- helper.py
|   |   |-- lock.py
|   |   `-- models.py
|   |-- tasks/
|   |   |-- __init__.py
|   |   |-- cache.py
|   |   |-- checktask.py
|   |   |-- constants.py
|   |   |-- helper.py
|   |   `-- models.py
|   |-- wap/
|   |   |-- __init__.py
|   |   |-- helper.py
|   |   `-- views.py
</t>
<t tx="newlife.20101222104201.1910">|   `-- webservice/
|       |-- __init__.py
|       |-- almanac.py
|       |-- assist.py
|       |-- cardgame.py
|       |-- dragon.py
|       |-- gift.py
|       |-- item.py
|       |-- nest.py
|       |-- platform/
|       |   |-- __init__.py
|       |   |-- login.py
|       |   |-- office.py
|       |   `-- urls.py
|       |-- score.py
|       |-- shop.py
|       |-- system.py
|       |-- task.py
|       `-- user.py

@doc
整个系统的入口是apps/webservice/platform/office.py中的login_from_web这个函数，
登录成功后flash就接管了所有的输入输出，
没有django什么事情了，
只是flash会调用django进行读写操作，
</t>
<t tx="newlife.20101223112128.1755">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20101223112128.1756"># -*- coding: utf-8 -*-

from datetime import datetime, timedelta
from apps.system.helper import login_member
from apps.members.helper import *
from apps.members.constants import DEFAULT_SYS_MAX_TANKS
from apps.shops.helper import *
from apps.shops.cache import *
from apps.shops.models import *
from apps.products.cache import *
from apps.tasks.helper import update_my_normal_task, check_done_task

</t>
<t tx="newlife.20101223112128.1757">#获得龙的出售列表
def getDragonsInShopAMF(request, skey):
    member = login_member(request, skey)

    styles = get_shop_fish_styles()
    dragons = get_shop_products(styles)
    dragon_list = []
    for p in dragons:
        if p.is_onsale():
            obj = {}
            obj['id'] = p.id
            obj['type'] = p.sp_type
            obj['sale_type'] = p.sale_type
            obj['price'] = p.price
            obj['level'] = p.level
            obj['description'] = ''
            obj['capacity'] = 0
            obj['style'] = p.p_style
            obj['start_date'] = p.start_date.strftime('%Y-%m-%d')
            if p.end_date is None:
                obj['end_date'] = ''
            else:
                obj['end_date'] = p.end_date.strftime('%Y-%m-%d')

            fish = get_fish_with_stylecolor(p.p_style)
            obj['name'] = fish.name
            obj['family'] = fish.family
            obj['star'] = fish.star
            obj['has_finished'] = has_finished_fish(member.id, p.p_style, fish.star)
            dragon_list.append(obj)
    dragon_list.sort(lambda x,y: cmp(x['price'], y['price']))
    task_list = ''
    rewards = ''
    return {'result':dragon_list,
            'task_list':task_list,
            'rewards':rewards,}



</t>
<t tx="newlife.20101223112128.1758">#获得伙伴的出售列表
def getPartisansInShopAMF(request, skey):
    member = login_member(request, skey)

    styles = get_shop_deco_styles()
    decos = get_shop_products(styles)
    deco_list = []
    for p in decos:
        if p.is_onsale():
            obj = {}
            obj['id'] = p.id
            obj['type'] = p.sp_type
            obj['sale_type'] = p.sale_type
            obj['price'] = p.price
            obj['level'] = p.level
            obj['description'] = ''
            obj['capacity'] = 0
            obj['style'] = p.p_style
            obj['start_date'] = p.start_date.strftime('%Y-%m-%d')
            if p.end_date is None:
                obj['end_date'] = ''
            else:
                obj['end_date'] = p.end_date.strftime('%Y-%m-%d')

            deco = get_deco(p.p_style)
            obj['name'] = deco.name
            obj['family'] = deco.family
            obj['star'] = deco.star
            obj['speed_up'] = deco.speed_up
            deco_list.append(obj)
    deco_list.sort(lambda x,y: cmp(x['price'], y['price']))

    rewards= ''
    task_list = ''
    return {'result':deco_list,
            'task_list':task_list,
            'rewards':rewards,}

</t>
<t tx="newlife.20101223112128.1759">#获取装饰的出售列表
def getOrnamentsInShopAMF(request, skey):
    member = login_member(request, skey)

    styles = get_shop_adorn_styles()
    adorns = get_shop_products(styles)
    adorn_list = []
    for p in adorns:
        if p.is_onsale():
            obj = {}
            obj['id'] = p.id
            obj['type'] = p.sp_type
            obj['sale_type'] = p.sale_type
            obj['price'] = p.price
            obj['level'] = p.level
            obj['description'] = ''
            obj['capacity'] = 0
            obj['style'] = p.p_style
            obj['start_date'] = p.start_date.strftime('%Y-%m-%d')
            if p.end_date is None:
                obj['end_date'] = ''
            else:
                obj['end_date'] = p.end_date.strftime('%Y-%m-%d')

            adorn = get_adorn(p.p_style)
            obj['name'] = adorn.name
            obj['family'] = adorn.family
            obj['a_type'] = adorn.a_type
            obj['description'] = adorn.description
            adorn_list.append(obj)
    adorn_list.sort(lambda x,y: cmp(x['price'], y['price']))

    rewards= ''
    task_list = ''
    return {'result':adorn_list,
            'rewards':rewards,
            'task_list':task_list,}

</t>
<t tx="newlife.20101223112128.1760">#获取道具的出售列表
def getItemsInShopAMF(request, skey):
    member = login_member(request, skey)

    styles = get_shop_item_styles()
    items = get_shop_products(styles)
    item_list = []
    for p in items:
        if p.is_onsale():
            obj = {}
            obj['id'] = p.id
            obj['type'] = p.sp_type
            obj['sale_type'] = p.sale_type
            obj['price'] = p.price
            obj['level'] = p.level
            obj['description'] = ''
            obj['capacity'] = 0
            obj['style'] = p.p_style
            obj['start_date'] = p.start_date.strftime('%Y-%m-%d')
            if p.end_date is None:
                obj['end_date'] = ''
            else:
                obj['end_date'] = p.end_date.strftime('%Y-%m-%d')

            item = get_item(p.p_style)
            obj['name'] = item.name
            obj['description'] = item.description
            item_list.append(obj)
    item_list.sort(lambda x,y: cmp(x['price'], y['price']))

    rewards= ''
    task_list = ''
    return {'result':item_list,
            'rewards':rewards,
            'task_list':task_list,}

</t>
<t tx="newlife.20101223112128.1761">#获取龙窝的出售列表
def getNestInShopAMF(request, skey):
    member = login_member(request, skey)

    styles = get_shop_fish_tank_styles()
    fish_tanks = get_shop_products(styles)
    fish_tank_list = []
    for p in fish_tanks:
        if p.is_onsale():
            obj = {}
            obj['id'] = p.id
            obj['type'] = p.sp_type
            obj['sale_type'] = p.sale_type
            obj['price'] = p.price
            obj['level'] = p.level
            obj['description'] = ''
            obj['capacity'] = 0
            obj['style'] = p.p_style
            obj['start_date'] = p.start_date.strftime('%Y-%m-%d')
            if p.end_date is None:
                obj['end_date'] = ''
            else:
                obj['end_date'] = p.end_date.strftime('%Y-%m-%d')

            tank = get_fish_tank(p.p_style)
            obj['name'] = tank.name
            obj['family'] = tank.family
            obj['star'] = tank.star
            obj['capacity'] = tank.capacity
            fish_tank_list.append(obj)
    fish_tank_list.sort(lambda x,y: cmp(x['price'], y['price']))

    rewards= ''
    task_list = ''
    return {'result':fish_tank_list,
            'rewards':rewards,
            'task_list':task_list,}

</t>
<t tx="newlife.20101223112128.1762">#获取活动物品出售列表
def getActivityEntriesInShopAMF(request, skey):
    member = login_member(request, skey)

    styles = get_shop_in_activity_styles()
    actv_products = get_shop_products(styles)
    actv_product_list = []
    for p in actv_products:
        if p.is_onsale():
            obj = {}
            obj['id'] = p.id
            obj['type'] = p.sp_type
            obj['sale_type'] = p.sale_type
            obj['price'] = p.price
            obj['level'] = p.level
            obj['description'] = ''
            obj['capacity'] = 0
            obj['style'] = p.p_style
            obj['start_date'] = p.start_date.strftime('%Y-%m-%d')
            if p.end_date is None:
                obj['end_date'] = ''
            else:
                obj['end_date'] = p.end_date.strftime('%Y-%m-%d')

            if p.sp_type == 'd':
                fish = get_fish_with_stylecolor(p.p_style)
                obj['name'] = fish.name
                obj['family'] = fish.family
                obj['star'] = fish.star
                obj['has_finished'] = has_finished_fish(member.id, p.p_style, fish.star)
            elif p.sp_type == 'c':
                deco = get_deco(p.p_style)
                obj['name'] = deco.name
                obj['family'] = deco.family
                obj['star'] = deco.star
                obj['speed_up'] = deco.speed_up
            elif p.sp_type == 'a':
                adorn = get_adorn(p.p_style)
                obj['name'] = adorn.name
                obj['family'] = adorn.family
                obj['a_type'] = adorn.a_type
                obj['description'] = adorn.description
            elif p.sp_type == 'n':
                tank = get_fish_tank(p.p_style)
                obj['name'] = tank.name
                obj['family'] = tank.family
                obj['star'] = tank.star
                obj['capacity'] = tank.capacity
            elif p.sp_type == 'p':
                item = get_item(p.p_style)
                obj['name'] = item.name
                obj['description'] = item.description
            actv_product_list.append(obj)
    actv_product_list.sort(lambda x,y: cmp(x['price'], y['price']))

    rewards= ''
    task_list = ''
    return {'result':actv_product_list,
            'rewards':rewards,
            'task_list':task_list,}

</t>
<t tx="newlife.20101223112128.1763">#获取新物品出售列表
def getNewEntriesInShopAMF(request, skey):
    member = login_member(request, skey)

    styles = get_shop_is_new_styles()
    new_products = get_shop_products(styles)
    new_product_list = []
    for p in new_products:
        if p.is_onsale():
            obj = {}
            obj['id'] = p.id
            obj['type'] = p.sp_type
            obj['sale_type'] = p.sale_type
            obj['price'] = p.price
            obj['level'] = p.level
            obj['description'] = ''
            obj['capacity'] = 0
            obj['style'] = p.p_style
            obj['start_date'] = p.start_date.strftime('%Y-%m-%d')
            if p.end_date is None:
                obj['end_date'] = ''
            else:
                obj['end_date'] = p.end_date.strftime('%Y-%m-%d')

            if p.sp_type == 'd':
                fish = get_fish_with_stylecolor(p.p_style)
                obj['name'] = fish.name
                obj['family'] = fish.family
                obj['star'] = fish.star
                obj['has_finished'] = has_finished_fish(member.id, p.p_style, fish.star)
            elif p.sp_type == 'c':
                deco = get_deco(p.p_style)
                obj['name'] = deco.name
                obj['family'] = deco.family
                obj['star'] = deco.star
                obj['speed_up'] = deco.speed_up
            elif p.sp_type == 'a':
                adorn = get_adorn(p.p_style)
                obj['name'] = adorn.name
                obj['family'] = adorn.family
                obj['a_type'] = adorn.a_type
                obj['description'] = adorn.description
            elif p.sp_type == 'n':
                tank = get_fish_tank(p.p_style)
                obj['name'] = tank.name
                obj['family'] = tank.family
                obj['star'] = tank.star
                obj['capacity'] = tank.capacity
            elif p.sp_type == 'p':
                item = get_item(p.p_style)
                obj['name'] = item.name
                obj['description'] = item.description
            new_product_list.append(obj)
    new_product_list.sort(lambda x,y: cmp(x['price'], y['price']))

    rewards= ''
    task_list = ''
    return {'result':new_product_list,
            'rewards':rewards,
            'task_list':task_list,}

</t>
<t tx="newlife.20101223112128.1764">#购买龙
def buyDragonAMF(request, skey, style):
    if style[0] is not 'd':
        return {'error':'wrong style.'}

    member = login_member(request, skey)
    shop_product = get_shop_product(style)
    if not shop_product:
        return {'error': 'not exist.'}

    if not shop_product.is_onsale():
        return {'error': 'not on sale(-10000)'}

    fish = get_fish_with_stylecolor(shop_product.p_style)
    if not fish:
        return {'error' : 'data error(-10001)'}

    #检查背包格数
    if len(get_my_fish_ids_in_bag(member.id)) &gt;= member.current_bags():
        return {'error':'Bag is not enough'}

    # 检查玩家等级
    member_level = get_almanac_level_info(member.id)[0]
    if member_level &lt; shop_product.level:
        return {'error' : 'your level is too low.'}

    # 扣除货币
    price = shop_product.price
    if shop_product.sale_type == 'g':
        if member.pearls &lt; price:
            return {'error' : 'not enough pearls'}
        member.pearls -= price
    elif shop_product.sale_type == 's':
        if member.shells &lt; price:
            return {'error' : 'not enough shells'}
        member.shells -= price
    elif shop_product.sale_type == 'j':
        if member.score &lt; price:
            return {'error' : 'not enough score'}
        member.score -= price
    else:
        return {'error': 'data error(-30001)'}

    # 增加购买记录
    shop_product_record = ShopProductRecord(member_id = member.id,
                          member_nickname = member.nickname,
                          sp_type = shop_product.sp_type,
                          p_style = shop_product.p_style,
                          sale_type = shop_product.sale_type,
                          num = 1,
                          price = price,
                          status = False
                          )
    shop_product_record.save()
    #保存用户信息
    member.save()

    my_fish = new_a_member_fish(member, fish)
    has_finished = has_finished_fish(member.id, my_fish.style, my_fish.star)
    fish_info = {
        'id':my_fish.id,
        'name':my_fish.get_display_name(),
        'style':my_fish.get_display_style(),
        'star':my_fish.star,
        'family':my_fish.family,
        'is_highest_level':my_fish.is_highest_level(),
        'hungry':my_fish.hungry,
        'level':my_fish.level,
        'next_deformed_level': my_fish.next_deform_level(),
        'exp':my_fish.exp,
        'max_exp':60,
        'can_be_potion':my_fish.can_be_used_potion(),
        'property': get_fish_property(my_fish.star, my_fish.level, my_fish.color),
        'has_finished':has_finished,
        'almanac_name':my_fish.almanac_name,
        }
    # 判断是否开图鉴
    if isopen_new_almanac(member, my_fish):
        open_new_almanac = True
        get_exp, open_all = update_member_almanac_exp(member, my_fish)
    else:
        open_new_almanac = False
        get_exp = 0
        open_all = False

    # 交易完成
    shop_product_record.status = True
    shop_product_record.save()
    member_level, remain_exp, next_level_exp = get_almanac_level_info(member.id)

    #do task

    task_list = ''
    reward_almanac = ''
    reward_all_almanac = ''

    if open_new_almanac:
        reward_almanac, task_almanac = check_done_task(member, 't019', my_fish.style,
                1, my_fish.family, my_fish.p_type, my_fish.star)

    if has_finished:
        reward_all_almanac, task_all_almanac = check_done_task(member, 't020', my_fish.base_style, 1)

    if reward_almanac:
        rewards = reward_almanac
        task_list = update_my_normal_task(member.id, task_almanac)
    elif reward_all_almanac:
        rewards = reward_all_almanac
        task_list = update_my_normal_task(member.id, task_all_almanac)
    else:
        rewards, my_task = check_done_task(member, 't011', my_fish.style, 1, my_fish.family, my_fish.p_type, my_fish.star) 
        if rewards:
            task_list = update_my_normal_task(member.id, my_task)

    result = {'shells':member.shells,
              'pearls':member.pearls,
              'score':member.score,
              'level':member_level,
              'remain_exp':remain_exp,
              'next_level_exp':next_level_exp,
              'open_new_almanac':open_new_almanac,
              'my_fish':fish_info,
              'get_exp':get_exp,
              'open_all':open_all,
              'rewards':rewards,
              'task_list':task_list}

    return result

</t>
<t tx="newlife.20101223112128.1765">#购买伙伴
def buyPartisanAMF(request, skey, style, days=30):
    days= int(days)
    if days not in (30,60,90):
        return {'error':'data error.'}

    if style[0] is not 'c':
        return {'error':'wrong style.'}

    member = login_member(request, skey)
    shop_product = get_shop_product(style)
    if not shop_product:
        return {'error': 'not exist'}

    if not shop_product.is_onsale():
        return {'error': 'not on sale(-10000)'}

    deco = get_deco(shop_product.p_style)
    if not deco:
        return {'error' : 'data error(-10001)'}

    # 检查玩家等级
    member_level = get_almanac_level_info(member.id)[0]
    if member_level &lt; shop_product.level:
        return {'error' : 'your level is too low.'}

    # 扣除货币
    price = int(shop_product.price * (days/30))
    if shop_product.sale_type == 'g':
        if member.pearls &lt; price:
            return {'error' : 'not enough pearls'}
        member.pearls -= price
    elif shop_product.sale_type == 's':
        if member.shells &lt; price:
            return {'error' : 'not enough shells'}
        member.shells -= price
    elif shop_product.sale_type == 'j':
        if member.score &lt; price:
            return {'error' : 'not enough score'}
        member.score -= price
    else:
        return {'error': 'data error(-30001)'}

    # 增加购买记录
    shop_product_record = ShopProductRecord(member_id = member.id,
                          member_nickname = member.nickname,
                          sp_type = shop_product.sp_type,
                          p_style = shop_product.p_style,
                          sale_type = shop_product.sale_type,
                          num = 1,
                          price = price,
                          status = False
                          )
    shop_product_record.save()
    #保存用户信息
    member.save()

    my_deco = new_a_member_deco(member, deco, days)

    # 交易完成
    shop_product_record.status = True
    shop_product_record.save()
    member_level, remain_exp, next_level_exp = get_almanac_level_info(member.id)

    #do task
    open_new_almanac = False
    task_list = ''
    reward_almanac = ''
    if open_new_almanac:
        reward_almanac, task_almanac = check_done_task(member, 't021', my_deco.style,
                1, my_deco.family, my_deco.p_type, my_deco.star)

    if reward_almanac:
        reward = reward_almanac
        task_list = update_my_normal_task(member.id, task_almanac)
    else:
        rewards, my_task = check_done_task(member, 't011', my_deco.style, 1, my_deco.family, my_deco.p_type, my_deco.star) 
        if rewards:
            task_list = update_my_normal_task(member.id, my_task)

    result = {'shells':member.shells,
              'pearls':member.pearls,
              'score':member.score,
              'level':member_level,
              'remain_exp':remain_exp,
              'next_level_exp':next_level_exp,
              'open_new_almanac':False,
              'my_fish':'',
              'get_exp':'',
              'open_all':'',
              'rewards':rewards,
              'task_list':task_list}
    return result


</t>
<t tx="newlife.20101223112128.1766">#购买装饰
def buyAdornmentAMF(request, skey, style, days=30):
    days= int(days)
    if days not in (30, 60, 90):
        return {'error':'data error.'}
    if style[0] is not 'a':
        return {'error':'wrong style.'}

    member = login_member(request, skey)
    shop_product = get_shop_product(style)
    if not shop_product:
        return {'error': 'not exist'}

    if not shop_product.is_onsale():
        return {'error': 'not on sale(-10000)'}

    adorn = get_adorn(shop_product.p_style)
    if not adorn:
        return {'error' : 'data error(-10001)'}

    # 检查玩家等级
    member_level = get_almanac_level_info(member.id)[0]
    if member_level &lt; shop_product.level:
        return {'error' : 'your level is too low.'}

    # 扣除货币
    price = int(shop_product.price * (days/30))
    if shop_product.sale_type == 'g':
        if member.pearls &lt; price:
            return {'error' : 'not enough pearls'}
        member.pearls -= price
    elif shop_product.sale_type == 's':
        if member.shells &lt; price:
            return {'error' : 'not enough shells'}
        member.shells -= price
    elif shop_product.sale_type == 'j':
        if member.score &lt; price:
            return {'error' : 'not enough score'}
        member.score -= price
    else:
        return {'error': 'data error(-30001)'}

    # 增加购买记录
    shop_product_record = ShopProductRecord(member_id = member.id,
                          member_nickname = member.nickname,
                          sp_type = shop_product.sp_type,
                          p_style = shop_product.p_style,
                          sale_type = shop_product.sale_type,
                          num = 1,
                          price = price,
                          status = False
                          )
    shop_product_record.save()
    #保存用户信息
    member.save()

    my_adorn = new_a_member_adorn(member, adorn, days)

    # 交易完成
    shop_product_record.status = True
    shop_product_record.save()
    member_level,remain_exp,next_level_exp = get_almanac_level_info(member.id)

    #do task
    rewards, my_task = check_done_task(member, 't011', my_adorn.style, 1, my_adorn.family, my_adorn.p_type, my_adorn.star)
    if rewards:
        task_list = update_my_normal_task(member.id, my_task)
    else:
        task_list = ''
    result = {'shells':member.shells,
              'pearls':member.pearls,
              'score':member.score,
              'level':member_level,
              'remain_exp':remain_exp,
              'next_level_exp':next_level_exp,
              'open_new_almanac':False,
              'my_fish':'',
              'get_exp':'',
              'open_all':'',
              'rewards':rewards,
              'task_list':task_list}
    return result

</t>
<t tx="newlife.20101223112128.1767">#购买道具
def buyItemAMF(request, skey, style, num=1):
    num = int(num)
    if num&lt;1:
        return {'error':'data error.'}
    if style[0] is not 'p':
        return {'error':'wrong style.'}

    member = login_member(request, skey)
    shop_product = get_shop_product(style)
    if not shop_product:
        return {'error': 'not exist'}

    if not shop_product.is_onsale():
        return {'error': 'not on sale(-10000)'}

    item = get_item(shop_product.p_style)
    if not item:
        return {'error' : 'data error(-10001)'}

    # 检查玩家等级
    member_level = get_almanac_level_info(member.id)[0]
    if member_level &lt; shop_product.level:
        return {'error' : 'your level is too low.'}

    # 扣除货币
    price = shop_product.price * num
    if shop_product.sale_type == 'g':
        if member.pearls &lt; price:
            return {'error' : 'not enough pearls'}
        member.pearls -= price
    elif shop_product.sale_type == 's':
        if member.shells &lt; price:
            return {'error' : 'not enough shells'}
        member.shells -= price
    elif shop_product.sale_type == 'j':
        if member.score &lt; price:
            return {'error' : 'not enough score'}
        member.score -= price
    else:
        return {'error': 'data error(-30001)'}

    # 增加购买记录
    shop_product_record = ShopProductRecord(member_id = member.id,
                          member_nickname = member.nickname,
                          sp_type = shop_product.sp_type,
                          p_style = shop_product.p_style,
                          sale_type = shop_product.sale_type,
                          num = num,
                          price = price,
                          status = False
                          )
    shop_product_record.save()
    #保存用户信息
    member.save()

    my_item = new_a_member_item(member, item, num)

    # 交易完成
    shop_product_record.status = True
    shop_product_record.save()
    member_level, remain_exp, next_level_exp = get_almanac_level_info(member.id)

    #do task
    rewards, my_task = check_done_task(member, 't011', my_item.style, 1) 
    if rewards:
        task_list = update_my_normal_task(member.id, my_task)
    else:
        task_list = ''
    result = {'shells':member.shells,
              'pearls':member.pearls,
              'score':member.score,
              'level':member_level,
              'remain_exp':remain_exp,
              'next_level_exp':next_level_exp,
              'open_new_almanac':False,
              'my_fish':'',
              'get_exp':'',
              'open_all':'',
              'reward_list':rewards,
              'task_list':task_list}
    return result


</t>
<t tx="newlife.20101223112128.1768">#购买龙窝
def buyNestAMF(request, skey, style):
    if style[0] is not 'b':
        return {'error':'wrong style.'}

    member = login_member(request, skey)
    shop_product = get_shop_product(style)
    if not shop_product:
        return {'error': 'not exist'}

    if not shop_product.is_onsale():
        return {'error': 'not on sale(-10000)'}

    fish_tank = get_fish_tank(shop_product.p_style)
    if not fish_tank:
        return {'error' : 'data error(-10001)'}

    # 检查玩家等级
    member_level = get_almanac_level_info(member.id)[0]
    if member_level &lt; shop_product.level:
        return {'error' : 'your level is too low.'}

    # 检查缸位
    total_tank_num = DEFAULT_SYS_MAX_TANKS+member.pearl_tanks+member.shell_tanks+member.friend_tanks
    if len(get_my_fish_tank_ids(member.id)) &gt;= total_tank_num:
        return {'error':'tank position is not enough'}

    # 扣除货币
    price = shop_product.price
    if shop_product.sale_type == 'g':
        if member.pearls &lt; price:
            return {'error' : 'not enough pearls'}
        member.pearls -= price
    elif shop_product.sale_type == 's':
        if member.shells &lt; price:
            return {'error' : 'not enough shells'}
        member.shells -= price
    elif shop_product.sale_type == 'j':
        if member.score &lt; price:
            return {'error' : 'not enough score'}
        member.score -= price
    else:
        return {'error': 'data error(-30001)'}

    # 增加购买记录
    shop_product_record = ShopProductRecord(member_id = member.id,
                          member_nickname = member.nickname,
                          sp_type = shop_product.sp_type,
                          p_style = shop_product.p_style,
                          sale_type = shop_product.sale_type,
                          num = 1,
                          price = price,
                          status = False
                          )
    shop_product_record.save()
    #保存用户信息
    member.save()

    my_fish_tank = new_a_member_tank(member, fish_tank)

    # 交易完成
    shop_product_record.status = True
    shop_product_record.save()
    member_level,remain_exp,next_level_exp = get_almanac_level_info(member.id)

    #do task
    rewards, my_task = check_done_task(member, 't011', my_fish_tank.style, 1,
            my_fish_tank.family, my_fish_tank.p_type, my_fish_tank.star) 
    if rewards:
        task_list = update_my_normal_task(member.id, my_task)
    else:
        task_list = ''
    result = {'shells':member.shells,
              'pearls':member.pearls,
              'score':member.score,
              'level':member_level,
              'remain_exp':remain_exp,
              'next_level_exp':next_level_exp,
              'open_new_almanac':False,
              'my_fish':'',
              'get_exp':'',
              'open_all':'',
              'rewards':rewards,
              'task_list':task_list,}

    return result

</t>
<t tx="newlife.20101223112128.1769">#续费
def renewObjectsAMF(request, skey, my_obj_id, my_obj_style, days=30):
    my_obj_id = int(my_obj_id)
    days = int(days)
    if days not in (30, 60, 90):
        return {'error': 'data error(-10000)'}

    if my_obj_style[0] not in ('c', 'a'):
        return {'error': 'data error(-10001)'}

    member = login_member(request, skey)
    my_obj = None
    if my_obj_style[0] == 'c':
        my_obj = get_my_deco(member.id, my_obj_id)
    elif my_obj_style[0] == 'a':
        my_obj = get_my_adorn(member.id, my_obj_id)

    if not my_obj:
        return {'error': 'data error(-10002)'}

    shop_product = get_shop_product(my_obj_style)
    if not shop_product:
        return {'error': 'not exist'}

    #计算价格
    price = int(shop_product.price * 0.8 * (days/30))

    # 扣除货币
    if shop_product.sale_type == 'g':
        if member.pearls &lt; price:
            return {'error' : 'not enough pearls'}
        member.pearls -= price
    elif shop_product.sale_type == 's':
        if member.shells &lt; price:
            return {'error' : 'not enough shells'}
        member.shells -= price
    elif shop_product.sale_type == 'j':
        if member.score &lt; price:
            return {'error' : 'not enough score'}
        member.score -= price
    else:
        return {'error': 'data error(-30001)'}

    # 增加购买记录
    shop_product_record = ShopProductRecord(member_id = member.id,
                          member_nickname = member.nickname,
                          sp_type = shop_product.sp_type,
                          p_style = shop_product.p_style,
                          sale_type = shop_product.sale_type,
                          price = price,
                          status = False,
                          )
    shop_product_record.save()
    #保存用户信息
    member.save()

    # 增加时间
    end_time = my_obj.expire_time + timedelta(days)
    my_obj.expire_time = end_time
    my_obj.save()

    # 交易完成
    shop_product_record.status = True
    shop_product_record.save()

    rewards= ''
    task_list = ''
    result = {'shells':member.shells,
              'pearls':member.pearls,
              'score':member.score,
              'rewards':rewards,
              'task_list':task_list,}

    return result


</t>
<t tx="newlife.20101223141853.1784">getSysNoticeAMF


getIndexAdsAMF
getUserInfoAMF
getGiftsCountAMF
getDragonsInBagAMF
requestAvailableSkillAMF
cardGameStartLevelAMF
playCardsAMF
endRoundAMF</t>
<t tx="newlife.20101223141853.1785">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20101223141853.1786"># -*- coding: utf-8 -*-
from apps.system.cache import *

</t>
<t tx="newlife.20101223141853.1787">#获取首页中广告
def getIndexAdsAMF(request, skey):
    index_ads = get_sys_notices('IAD')

    index_ads = list(index_ads)
    index_ads.sort(lambda x,y: cmp(y.position, x.position))
    #这个还是逆序的。
    index_ad_list = []
    for ad in index_ads:
        image, link = ad.content.split(',')
        temp = {'position':ad.position,'image':image,'link':link,}
        index_ad_list.append(temp)
    task_list = ''
    rewards = ''
    return {'index_ad_list':index_ad_list,
            'task_list':task_list,
            'rewards':rewards,}

</t>
<t tx="newlife.20101223141853.1788">#获取系统公告
def getSysNoticeAMF(request, skey, notice_type):
    sys_notices = get_sys_notices(notice_type)
    sys_notices = list(sys_notices)
    sys_notices.sort(lambda x,y: cmp(y.position, x.position))
    notice_list = []
    for notice in sys_notices:
        notice_list.append(notice.content)
    task_list = ''
    rewards = ''
    return {'sys_notice_list':notice_list,
            'task_list':task_list,
            'rewards':rewards,}

def getSysNoticeAMF(request, skey, notice_type):
    sys_notices = get_sys_notices(notice_type)
    
    
    
/apps/system/cache.py

def get_sys_notices(notice_type):
    key = CACHE_KEY_SYS_NOTICE % notice_type
    notices = cache.get(key)    
    if not notices:
        notices = SysNotice.objects.filter(notice_type = notice_type)
        if not notices:
            return []
        cache.set(key, notices)
    
    ret = []
    for notice in notices:
        if notice.can_show():
            ret.append(notice)
            
    return ret</t>
<t tx="newlife.20101223141853.1789">#获取小窝中广告
def getHomeAdsAMF(request, skey):
    home_ads = get_sys_notices('HAD')

    home_ads = list(home_ads)
    home_ads.sort(lambda x,y: cmp(y.position, x.position))
    home_ad_list = []
    for ad in home_ads:
        image, link = ad.content.split(',')
        temp = {'image':image,'link':link,}
        home_ad_list.append(temp)

    task_list = ''
    rewards = ''
    return {'home_ad_list':home_ad_list,
            'task_list':task_list,
            'rewards':rewards}
</t>
<t tx="newlife.20101223141853.1791">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20101223141853.1792"># -*- coding: utf-8 -*-

import hashlib
import copy
from datetime import datetime, timedelta

from django.conf import settings
from global_constants import ADD_EXP_DAILY_MAX
from apps.system.helper import choose_a_fish_model
from apps.games.cache import *
from apps.games.helper import *
from apps.products.cache import *
from apps.products.models import *
from apps.members.cache import *
from apps.members.models import *
from apps.members.helper import *
from apps.messages.helper import *

from apps.sns.sns_api import *
from apps.sns.models import InSiteInvitation
from apps.sns.helper import *

</t>
<t tx="newlife.20101223141853.1793"># 获取用户当前种族当前种类所有鱼的style
def get_my_almanac_family_code_fish_styles(member_id, base_style):
    fish_styles, al_info = get_my_almanac_fish_styles(member_id)
    my_al_fish_styles = []
    for fish_style in set(fish_styles):
        if base_style in fish_style:
            my_al_fish_styles.append(fish_style)

    return my_al_fish_styles


</t>
<t tx="newlife.20101223141853.1794">def get_my_almanac_fish_styles(member_id):
    al_info = get_or_create_almanac_info(member_id)
    fish_styles = al_info.fish_styles
    if fish_styles:
        fish_styles = fish_styles.split(",")
    else:
        fish_styles = [] 

    return fish_styles, al_info


</t>
<t tx="newlife.20101223141853.1795"># 获取用户图鉴等级信息
def get_almanac_level_info(member_id):
    level=1
    al_info = get_or_create_almanac_info(member_id)
    almanac_exp = al_info.exp + al_info.added_exp

    for i in xrange(1,93):
        if almanac_exp&lt;EXP_LEVEL[i]:
            level = i
            break

    remain_exp = EXP_LEVEL[level]-almanac_exp
    #next_level_exp = int(level**1.7)*250
    next_level_exp = EXP_LEVEL[level]

    return level,remain_exp,next_level_exp


</t>
<t tx="newlife.20101223141853.1796"># 根据星级和等级判断鱼是否变形
def will_deform(my_fish, old_level, new_level):
    deform_levels = my_fish.get_deform_levels()
    _will_deform = False
    deform_level = 0
    for d_level in deform_levels:
        if old_level &lt; d_level and new_level &gt;= d_level:
            _will_deform = True
            deform_level = d_level
            break

    return _will_deform,deform_level


</t>
<t tx="newlife.20101223141853.1797"># 获得鱼的属性值
def get_fish_property(star, level, color):
    cpv = FISH_COLOR_PROPERTY_VALUE.has_key(color) and FISH_COLOR_PROPERTY_VALUE.get(color) or 6
    ret = star*(cpv**0.5)*(level**0.65)
    return ret

</t>
<t tx="newlife.20101223141853.1798"># 判断鱼是否已经开了所有图鉴    
def has_finished_fish(member_id, fish_style, star):
    my_fish_styles = get_my_almanac_fish_styles(member_id)[0]
    deform_levels = get_deform_levels(star)
    max_deform_times = int(len(deform_levels))
    base_style, color, level = fish_style.split('_')
    style = '_'.join([base_style, color, str(max_deform_times)])
    return style in my_fish_styles


</t>
<t tx="newlife.20101223141853.1799"># 获取最大的变形次数  
def get_deform_levels(star):
    stars = STAR_LEVEL_DEFORMATION.keys()
    stars = sorted(stars)
    for count in range(0,len(stars)):
        if star &lt;= stars[count]:
            deform_levels = STAR_LEVEL_DEFORMATION[stars[count]]['deform_levels']
            break

    return deform_levels

</t>
<t tx="newlife.20101223141853.1800"># 获取鱼缸中所有的鱼和水草，并且重新计算鱼的数值
def get_and_caculate_objects_in_tank(member_id, my_tank_id, must_save=False):
    my_fish_ids = get_my_fish_ids_in_tank(member_id, my_tank_id)
    my_fishes = get_my_fishes(member_id, my_fish_ids)
    my_fish_tank = get_my_fish_tank(member_id, my_tank_id)
    fish_tank = get_fish_tank(my_fish_tank.style)
    my_deco_ids = get_my_deco_ids_in_tank(member_id, my_fish_tank.id)
    my_decos = get_my_decos(member_id, my_deco_ids)
    deco_styles = [my_deco.style for my_deco in my_decos]
    decos = get_decos(deco_styles)
    level, remain_exp, next_level_exp = get_almanac_level_info(member_id)

    for my_fish in my_fishes:
        dt = datetime.now() - my_fish.last_calculated
        time_changed = dt.days*24.0*3600.0+dt.seconds
        # 减饱食度
        dhungry = BASIC_HUNGRY_SPEED*time_changed/3600.0
        valid_growth_time = time_changed/3600.0
        if my_fish.hungry-dhungry&lt;=0.0:
            valid_growth_time = my_fish.hungry/BASIC_HUNGRY_SPEED
            my_fish.hungry = 0.0
        else:
            my_fish.hungry = my_fish.hungry-dhungry   
        # 加成长
        if fish_tank.star &lt; my_fish.star:
            growth_speed = 0.0
        else:
            temp = 1.0
            for deco in decos:
                if deco.star &gt;= my_fish.star:
                    temp = temp+deco.speed_up
            growth_speed = BASIC_GROWTH_SPEED*temp

        if level in [1, 2, 3]:
            dexp = 0
        else:
            dexp = growth_speed * valid_growth_time

        # 判断鱼是否为最高等级
        if not my_fish.is_highest_level() and not my_fish.has_deformed:
            all_exp = int(my_fish.exp + dexp)
            dlevel, rexp = divmod(all_exp, LEVEL_UP_EXP)
            _will_deform, deform_level = will_deform(my_fish, my_fish.level, my_fish.level+dlevel)

            if _will_deform: # 这次升级会变形，停止生长
                my_fish.style = '_'.join([my_fish.base_style, my_fish.color, str(deform_level-1)])
                my_fish.exp = LEVEL_UP_EXP
                my_fish.has_deformed = True
            else:# 升级不会引起变形
                my_fish.style = '_'.join([my_fish.base_style, my_fish.color, str(my_fish.level+dlevel)])
                my_fish.exp =rexp
                my_fish.has_deformed = False

            my_fish.last_calculated = datetime.now()
            # 鱼升级需要保存
            if dlevel &gt; 0:
                my_fish.save()
        else:
            if my_fish.has_deformed:
                my_fish.exp = LEVEL_UP_EXP
            else:
                my_fish.exp = 0.0

    return my_fish_tank, my_fishes, my_decos

</t>
<t tx="newlife.20101223141853.1801"># 重算鱼缸中某一条鱼的数值
def caculate_my_fish_in_tank(member_id, my_fish_tank, my_fish, must_save=False):
    fish_tank = get_fish_tank(my_fish_tank.style)
    my_deco_ids = get_my_deco_ids_in_tank(member_id, my_fish_tank.id)
    my_decos = get_my_decos(member_id, my_deco_ids)
    deco_styles = [my_deco.style for my_deco in my_decos]
    decos = get_decos(deco_styles)
    dt = datetime.now() - my_fish.last_calculated
    time_changed = dt.days*24.0*3600.0+dt.seconds
    # 减饱食度
    dhungry = BASIC_HUNGRY_SPEED*time_changed/3600.0
    valid_growth_time = time_changed/3600.0
    level, remain_exp, next_level_exp = get_almanac_level_info(member_id)

    if my_fish.hungry-dhungry&lt;=0.0:
        valid_growth_time = my_fish.hungry/BASIC_HUNGRY_SPEED
        my_fish.hungry = 0.0
    else:
        my_fish.hungry = my_fish.hungry-dhungry   
    # 加成长
    if fish_tank.star &lt; my_fish.star:
        growth_speed = 0.0
    else:
        temp = 1.0
        for deco in decos:
            if deco.star &gt;= my_fish.star:
                temp = temp+deco.speed_up
        growth_speed = BASIC_GROWTH_SPEED*temp

    if level in [1, 2, 3]:
        dexp = 0
    else:
        dexp = growth_speed * valid_growth_time

    # 判断鱼是否为最高等级
    b_saved = False
    if not my_fish.is_highest_level() and not my_fish.has_deformed:
        all_exp = int(my_fish.exp + dexp)
        dlevel, rexp = divmod(all_exp, LEVEL_UP_EXP)
        _will_deform, deform_level = will_deform(my_fish, my_fish.level, my_fish.level+dlevel)

        if _will_deform: # 这次升级会变形，停止生长
            my_fish.style = '_'.join([my_fish.base_style, my_fish.color, str(deform_level-1)])
            my_fish.exp = LEVEL_UP_EXP
            my_fish.has_deformed = True
        else:# 升级不会引起变形
            my_fish.style = '_'.join([my_fish.base_style, my_fish.color, str(my_fish.level+dlevel)])
            my_fish.exp =rexp
            my_fish.has_deformed = False

        my_fish.last_calculated = datetime.now()
        # 鱼升级需要保存
        if dlevel &gt; 0:
            my_fish.save()
            b_saved = True
    else:
        if my_fish.has_deformed:
            my_fish.exp = LEVEL_UP_EXP
        else:
            my_fish.exp = 0.0

    if must_save and not b_saved:
        my_fish.save()

    return my_fish

</t>
<t tx="newlife.20101223141853.1802"># 计算塑料袋中鱼的数值    
def calculate_my_fishes_in_bag(my_fishes):
    for my_fish in my_fishes:
        dt = datetime.now() - my_fish.last_calculated
        time_changed = dt.days*24.0*3600.0+dt.seconds
        # 减饥饿
        dhungry = BASIC_HUNGRY_SPEED*time_changed/3600.0
        valid_growth_time = time_changed/3600.0
        if my_fish.hungry-dhungry &lt;= 0.0:
            valid_growth_time = my_fish.hungry/BASIC_HUNGRY_SPEED
            my_fish.hungry = 0.0
        else:
            my_fish.hungry = my_fish.hungry-dhungry

        my_fish.last_calculated = datetime.now()
    return my_fishes


</t>
<t tx="newlife.20101223141853.1803"># 获取用户塑料袋中当前家族所有的水草
def get_my_family_decos_in_bag(member_id, family):
    my_deco_ids = get_my_deco_ids_in_bag(member_id)
    my_decos = get_my_decos(member_id, my_deco_ids)
    for my_deco in my_decos:
        if my_deco.family != family:
            my_decos.remove(my_deco)
    return my_decos

</t>
<t tx="newlife.20101223141853.1804"># 获取用户塑料袋中所有的道具
def get_my_items_in_bag(member_id):
    my_item_styles = get_my_item_styles_in_bag(member_id)
    my_items = get_my_items(member_id, my_item_styles)
    return my_items


</t>
<t tx="newlife.20101223141853.1805">def update_member_almanac_exp(member, my_fish):
    from apps.tasks.helper import do_task

    level,remain_exp,next_level_exp = get_almanac_level_info(member.id)
    # 用户同一种类所有颜色鱼的style
    my_alf_fish_styles = get_my_almanac_family_code_fish_styles(member.id, my_fish.base_style)

    fish_styles, al_info = get_my_almanac_fish_styles(member.id)
    # 判断是否已经存在这个颜色的图鉴，存在则替换掉
    display_style = my_fish.get_display_style()
    remove_style = '_'.join([my_fish.base_style, my_fish.color, str(int(display_style.split('_')[-1])-1)])
    if remove_style in fish_styles:
        fish_styles.remove(remove_style)
    if remove_style in my_alf_fish_styles:
        my_alf_fish_styles.remove(remove_style)
    fish_styles.append(display_style)
    my_alf_fish_styles.append(display_style)
    al_info.fish_styles = ','.join(fish_styles)

    # 算经验
    alf_fish_colors = get_almanac_family_code_fish_colors(my_fish.base_style)
    deform_levels = my_fish.get_deform_levels()
    max_deform_times = int(len(deform_levels))
    alf_fish_styles = []
    for alf_fish_color in alf_fish_colors:
        style = '_'.join([my_fish.base_style, alf_fish_color, str(max_deform_times)])
        alf_fish_styles.append(style)

    get_exp = get_fish_property(my_fish.star, my_fish.level, my_fish.color)*10
    icr_exp = 0
    open_all = False
    # 收集成功一套鱼
    if set(my_alf_fish_styles) == set(alf_fish_styles):
        # 发送开全套图鉴的动态消息
        # TODO:
        open_all = True
        for color in alf_fish_colors:
            for dlevel in deform_levels:
                icr_exp += get_fish_property(my_fish.star, dlevel, color)*10

        do_task(member.id, 't017',my_fish.base_style, 1, my_fish.family, my_fish.p_type, my_fish.star)

    all_exp = get_exp + int(icr_exp*EXP_RATE)
    al_info.exp += all_exp
    al_info.save()
    # 判断用户是否升级
    if remain_exp+get_exp + int(icr_exp*EXP_RATE) &gt; next_level_exp:
        pass
        # 发送用户升级动态信息
        # TODO:
    # 发送打开新图鉴动态消息
    # TODO:
    return all_exp, open_all


</t>
<t tx="newlife.20101223141853.1806">def new_a_member_fish(member, fish, level=1):
    my_bag_fish_ids = get_my_fish_ids_in_bag(member.id)
    chosen_model = choose_a_fish_model(member.id)
    style = '_'.join([fish.style, fish.color, str(level)])
    my_fish = globals()[chosen_model](member_id=member.id, style=style)
    # 增加冗余信息
    my_fish.name = fish.name
    my_fish.description = fish.description
    my_fish.star = fish.star
    my_fish.family = fish.family
    my_fish.p_type = fish.p_type
    my_fish.almanac_name = fish.almanac_name
    my_fish.save()
    # 更新用户塑料袋缓存
    if my_fish.id not in my_bag_fish_ids:
        my_bag_fish_ids.append(my_fish.id)
        update_my_fish_ids_in_bag(member.id, my_bag_fish_ids)

    return my_fish


</t>
<t tx="newlife.20101223141853.1807">def delete_a_member_fish_in_bag(member, my_fish_id):
    my_fish_ids_in_bag = get_my_fish_ids_in_bag(member.id)
    my_fish = get_my_fish(member.id, my_fish_id)
    my_fish.delete()
    # 更新用户塑料袋中鱼的缓存
    if my_fish_id in my_fish_ids_in_bag:
        my_fish_ids_in_bag.remove(my_fish_id)
        update_my_fish_ids_in_bag(member.id, my_fish_ids_in_bag)


</t>
<t tx="newlife.20101223141853.1808">def delete_a_member_fish_in_tank(member, my_tank_id, my_fish_id):
    my_fish_ids_in_tank = get_my_fish_ids_in_tank(member.id, my_tank_id)
    my_fish = get_my_fish(member.id, my_fish_id)
    my_fish.delete()
    # 更新用户鱼缸中鱼的缓存
    if my_fish_id in my_fish_ids_in_tank:
        my_fish_ids_in_tank.remove(my_fish_id)
        update_my_fish_ids_in_tank(member.id, my_tank_id, my_fish_ids_in_tank)


</t>
<t tx="newlife.20101223141853.1809">def new_a_member_deco(member, deco, days):
    my_deco_ids_in_bag = get_my_deco_ids_in_bag(member.id)
    end_time = datetime.now() + timedelta(days)
    my_deco = MyDecoInstance(member_id=member.id, style=deco.style, expire_time=end_time)
    # 冗余水草信息
    my_deco.name = deco.name
    my_deco.description = deco.description
    my_deco.star = deco.star
    my_deco.family = deco.family
    my_deco.p_type = deco.p_type
    my_deco.speed_up = deco.speed_up
    my_deco.save()
    # 更新用户塑料袋缓存
    if my_deco.id not in my_deco_ids_in_bag:
        my_deco_ids_in_bag.append(my_deco.id)
        update_my_deco_ids_in_bag(member.id, my_deco_ids_in_bag)
    return my_deco


</t>
<t tx="newlife.20101223141853.1810">def delete_a_member_deco_in_bag(member, my_deco_id):
    my_deco_ids_in_bag = get_my_deco_ids_in_bag(member.id)
    my_deco = get_my_deco(member.id, my_deco_id)
    my_deco.delete()
    # 更新用户塑料袋中水草的缓存
    if my_deco_id in my_deco_ids_in_bag:
        my_deco_ids_in_bag.remove(my_deco_id)
        update_my_deco_ids_in_bag(member.id, my_deco_ids_in_bag)


</t>
<t tx="newlife.20101223141853.1811">def delete_a_member_deco_in_tank(member, my_tank_id, my_deco_id):
    my_deco_ids_in_tank = get_my_deco_ids_in_tank(member.id, my_tank_id)
    my_deco = get_my_deco(member.id, my_deco_id)
    my_deco.delete()
    # 更新用户鱼缸中水草的缓存
    if my_deco_id in my_deco_ids_in_tank:
        my_deco_ids_in_tank.remove(my_deco_id)
        update_my_deco_ids_in_tank(member.id, my_deco_ids_in_tank)


</t>
<t tx="newlife.20101223141853.1812">def new_a_member_adorn(member, adorn, days):
    my_adorn_ids_in_bag = get_my_adorn_ids_in_bag(member.id)
    end_time = datetime.now() + timedelta(days)
    my_adorn = MyAdornInstance(member_id=member.id, style=adorn.style, expire_time=end_time)
    # 冗余装饰信息
    my_adorn.name = adorn.name
    my_adorn.description = adorn.description
    my_adorn.star = adorn.star
    my_adorn.family = adorn.family
    my_adorn.p_type = adorn.p_type
    my_adorn.a_type = adorn.a_type
    my_adorn.save()
    # 更新用户塑料袋缓存
    if my_adorn.id not in my_adorn_ids_in_bag:
        my_adorn_ids_in_bag.append(my_adorn.id)
        update_my_adorn_ids_in_bag(member.id, my_adorn_ids_in_bag)
    return my_adorn


</t>
<t tx="newlife.20101223141853.1813">def delete_a_member_adorn_in_bag(member, my_adorn_id):
    my_adorn_ids_in_bag = get_my_adorn_ids_in_bag(member.id)
    my_adorn = get_my_adorn(member.id, my_adorn_id)
    my_adorn.delete()
    # 更新用户塑料袋中装饰的缓存
    if my_adorn_id in my_adorn_ids_in_bag:
        my_adorn_ids_in_bag.remove(my_adorn_id)
        update_my_adorn_ids_in_bag(member.id, my_adorn_ids_in_bag)


</t>
<t tx="newlife.20101223141853.1814">def delete_a_member_adorn_in_tank(member, my_tank_id, my_adorn_id):
    my_adorn_ids_in_tank = get_my_adorn_ids_in_tank(member.id, my_tank_id)
    my_adorn = get_my_adorn(member.id, my_adorn_id)
    my_adorn.delete()
    # 更新用户鱼缸中装饰的缓存
    if my_adorn_id in my_adorn_ids_in_tank:
        my_adorn_ids_in_tank.remove(my_adorn_id)
        update_my_adorn_ids_in_tank(member.id, my_adorn_ids_in_tank)


</t>
<t tx="newlife.20101223141853.1815">def new_a_member_tank(member, fish_tank):
    my_fish_tank_ids = get_my_fish_tank_ids(member.id)
    my_fish_tank = MyFishTankInstance(member_id=member.id,
                                          name=fish_tank.name,
                                          style=fish_tank.style
                                          )
    # 冗余鱼缸信息
    my_fish_tank.description = fish_tank.description
    my_fish_tank.star = fish_tank.star
    my_fish_tank.family = fish_tank.family
    my_fish_tank.p_type = fish_tank.p_type
    my_fish_tank.capacity = fish_tank.capacity
    my_fish_tank.save()
    # 更新用户鱼缸id缓存
    if my_fish_tank.id not in my_fish_tank_ids:
        my_fish_tank_ids.append(my_fish_tank.id)
        update_my_fish_tank_ids(member.id, my_fish_tank_ids)
    return my_fish_tank


</t>
<t tx="newlife.20101223141853.1816">def delete_a_member_tank(member, my_tank_id):
    my_fish_tank_ids = get_my_fish_tank_ids(member.id)
    my_fish_tank = get_my_fish_tank(member.id, my_tank_id)
    my_fish_tank.delete()
    # 更新用户鱼缸缓存
    if my_tank_id in my_fish_tank_ids:
        my_fish_tank_ids.remove(my_tank_id)
        update_my_fish_tank_ids(member.id, my_fish_tank_ids)


</t>
<t tx="newlife.20101223141853.1817">def new_a_member_item(member, item, num=1):
    my_item_styles_in_bag = get_my_item_styles_in_bag(member.id)
    my_item = get_or_create_my_item(member.id, item.style)
    my_item.total_num += num
    # 冗余道具信息
    my_item.name = item.name
    my_item.description = item.description
    my_item.style = item.style
    my_item.item_type = item.item_type
    my_item.growth = item.growth
    my_item.shorten_time = item.shorten_time
    my_item.success_percent = item.success_percent
    my_item.cool_down_time = item.cool_down_time
    my_item.disappear_time = item.disappear_time
    my_item.save()
    # 更新用户道具缓存
    if my_item.style not in my_item_styles_in_bag:
        my_item_styles_in_bag.append(my_item.style)
        update_my_item_styles_in_bag(member.id, my_item_styles_in_bag)
    return my_item


</t>
<t tx="newlife.20101223141853.1818">def new_a_member_essence(member, essence, num=1):
    my_essence_styles_in_bag = get_my_essence_ids_in_bag(member.id)
    my_essence = get_or_create_my_essence(member.id, essence.style)
    my_essence.total_num += num
    # 冗余信息
    my_essence.name = essence.name
    my_essence.color = essence.color
    my_essence.star = essence.star
    my_essence.save()
    #更新用户缓存
    if my_essence.style not in my_essence_styles_in_bag:
        my_essence_styles_in_bag.append(my_essence.style)
        update_my_essence_styles_in_bag(member.id, my_essence_styles_in_bag)
    return my_essence


</t>
<t tx="newlife.20101223141853.1819">def delete_a_member_item(member, style, num=1):
    my_item = get_or_create_my_item(member.id, style)
    my_item.total_num -= num
    my_item.save()

</t>
<t tx="newlife.20101223141853.1820"># 获取冷却的百分比
def get_my_item_cooldown_precent(member_id, my_item):
    item = my_item
    if item.cool_down_time != 0:
        # 有公用冷却时间类型的道具
        same_type_item_styles = get_type_item_styles(item.item_type)
        for style in same_type_item_styles:
            my_item = get_or_create_my_item(member_id, style)
            if my_item and my_item.last_used:
                cool_down_time = datetime.now() - my_item.last_used 
                if cool_down_time &lt; timedelta(0, 1*3600):
                    return int(cool_down_time.seconds/3600.0*100)
                else:
                    continue
            else:
                continue
        return 100
    else:
        return 100

</t>
<t tx="newlife.20101223141853.1821"># 为潜艇鱼用道具
def use_physic_for_pet(pet_info, item, count=1):
    cur_time = datetime.now()
    if pet_info.end_time - timedelta(0, item.shorten_time*count*3600) &gt;= cur_time:
        pet_info.end_time -= timedelta(0, item.shorten_time*count*3600)
        pet_info.last_physic_used = cur_time
    else:
        pet_info.status = 'b'
        pet_info.end_time = None
        pet_info.caught_fish = refresh_all_fish(pet_info.stage)
        pet_info.last_physic_used = None
    pet_info.save()

    return pet_info

</t>
<t tx="newlife.20101223141853.1822"># 为鱼使用成长道具
def use_physic_for_fish(member, my_fish, item):
    my_fish_tank = get_my_fish_tank(member.id, my_fish.my_fish_tank_id)
    my_fish = caculate_my_fish_in_tank(member.id, my_fish_tank, my_fish)
    my_fish.exp += item.growth
    my_fish.last_potion_used=datetime.now()
    my_fish = caculate_my_fish_in_tank(member.id, my_fish_tank, my_fish, must_save=True)
    return my_fish

</t>
<t tx="newlife.20101223141853.1823">def login_sns_user(request, session_key):
    sns_id = get_sns_id(request, session_key)
    member = get_member_by_sns_id(sns_id)
    # 新注册安装用户
    if member is None:
        member = register_member(request, session_key, sns_id)

    request.session[hashlib.md5(session_key).hexdigest()] = member.id
    request.session.set_expiry(3600*12)
    request.session.save()
    return member

</t>
<t tx="newlife.20101223141853.1824">def register_member(request, session_key, sns_id):
    from apps.tasks.helper import update_my_tasks

    sns_user_name, sns_user_avatar = get_sns_user(request, session_key, sns_id)
    member = Member(sns_id=sns_id,
                    nickname=sns_user_name,
                    avatar=sns_user_avatar,
                    shells=DEFAULT_MEMBER_SHELLS,
                    pearls=DEFAULT_MEMBER_PEARLS,
                    max_dispatch='1_0',
                    power=1,
                    )
    member.save()
    # 新手默认鱼塘
    for tank_style in DEFAULT_FISH_TANK_STYLES:
        try:
            fish_tank = get_fish_tank(tank_style)
            if fish_tank:
                new_a_member_tank(member, fish_tank)
        except:
            pass
    # 新手默认鱼
    for fish_style in DEFAULT_MEMBER_FISH_STYLES:
        try:
            fish = get_fish_with_stylecolor(fish_style)
            if fish:
                level = 1
                try:
                    slevel = fish_style.split('_')[-1]
                    level = int(slevel)
                except:
                    pass
                my_fish= new_a_member_fish(member, fish, level)
        except:
            pass
    # 新手默认水草
    for deco_style in DEFAULT_MEMBER_DECO_STYLES:
        try:
            deco = get_deco(deco_style)
            if deco:
                new_a_member_deco(member, deco)
        except:
            pass
    # 新手默认道具
    for item_style in DEFAULT_MEMBER_ITEM_STYLES:
        try:
            item = get_item(item_style)
            if item:
                new_a_member_item(member, item, 10)
        except:
            pass
    # 新手宠物鱼
    #pet_info = get_or_create_pet_info(member.id)
    #pet_info.status = 'b'
    #pet_info.caught_fish = refresh_all_fish(2)
    #pet_info.save()

    # 初始化任务
    update_my_tasks(member.id)

    return member

</t>
<t tx="newlife.20101223141853.1825">def are_friends(session_key, own_uid, friend_uid):
    if ',' in session_key:
        friend_list = get_friend_list(session_key, own_uid)
        if friend_uid in friend_list:
            return True
        else:
            return False
    elif settings.SNS == 'facebook': # facebook邻居
        own_neighbor_sns_ids = get_neighbor_sns_ids(str(int(own_uid)))
        return (str(int(friend_uid)) in own_neighbor_sns_ids)
    else:
        return get_are_friends(session_key, own_uid, friend_uid)

</t>
<t tx="newlife.20101223141853.1826">#重算经验
# TODO:
def recal_exp(sns_id):
    member = get_member_by_sns_id(sns_id=sns_id)
    key = CACHE_KEY_MY_ALMANAC_INFO % (member.id)
    cache.delete(key)
    fish_styles, al_info = get_my_almanac_fish_styles(member.id)
    remain_styles = copy.copy(fish_styles)
    get_exp = 0
    for fish_style in list(set(fish_styles)):
        fish = get_fish_with_stylecolor(fish_style)
        alf_fish_styles = get_almanac_family_code_fish_styles(fish.family, fish.almanac_code)
        finish = True
        for alf_fish_style in alf_fish_styles:
            if alf_fish_style not in remain_styles:
                finish = False
        if finish:
            al_fishes = get_fishes(alf_fish_styles)
            for f in al_fishes:
                remain_styles.remove(f.style)
                get_exp += 2*f.bonus

    remain_fishes = get_fishes(remain_styles)
    for f in remain_fishes:
        get_exp += f.bonus

    al_info.exp = get_exp
    al_info.save()

</t>
<t tx="newlife.20101223141853.1827">#author: dan.wu
#date: 2010-07-14
#是否有新图鉴打开
def isopen_new_almanac(member, my_fish):
    # 用户同一种类所有颜色鱼的style
    my_alf_fish_styles = get_my_almanac_family_code_fish_styles(member.id, my_fish.base_style)

    base_color_style = '_'.join([my_fish.base_style, my_fish.color])
    display_style = my_fish.get_display_style()
    is_new_almanac = False
    not_exist = True
    for fish_style in my_alf_fish_styles:
        if fish_style.startswith(base_color_style):
            not_exist = False
            if int(fish_style.split('_')[-1]) &lt; int(display_style.split('_')[-1]):
                is_new_almanac = True
            break

    ret = is_new_almanac or not_exist
    return ret

</t>
<t tx="newlife.20101223141853.1828">#author: dan.wu
#date: 2010-07-14
#comment: 增加图鉴之外的经验获得，每天每个用户的上限值为500
def add_exp_daily(member, exp, visited_friend_id=None):
    al_info = get_or_create_almanac_info(member.id)
    last_append = al_info.last_append

    if not last_append or last_append.date() &lt; date.today():
        al_info.remain_add_exp = ADD_EXP_DAILY_MAX
        vi_friend = get_visited_friend(member.id)
        if vi_friend:
            vi_friend.delete()

    if visited_friend_id:     
        add_exp = js_visited_friend(member.id, int(visited_friend_id))
        add_value = min(add_exp, al_info.remain_add_exp)
    else:        
        add_value = min(int(exp), al_info.remain_add_exp)

    al_info.added_exp += add_value
    al_info.remain_add_exp = al_info.remain_add_exp - add_value
    al_info.last_append = datetime.now()
    al_info.save()
    level,remain_exp,next_level_exp = get_almanac_level_info(member.id)
    return level,remain_exp,next_level_exp

</t>
<t tx="newlife.20101223141853.1829">#author: dan.wu
#date: 2010-07-23
#comment: 是否访问过该好友
def js_visited_friend(member_id, visited_friend_id):
    vi_friend = get_visited_friend(member_id)
    vi_friend_ids = vi_friend.visited_friend_id
    if vi_friend_ids:
        vi_friend_ids = str(vi_friend_ids)
        vi_friend_ids_list = map(lambda x:int(x),vi_friend_ids.split(","))
        if visited_friend_id in vi_friend_ids_list:
            add_exp = 0
        else:
            vi_friend_ids_list.append(visited_friend_id)
            vi_friend.visited_friend_id = ','.join(map(str, vi_friend_ids_list))
            vi_friend.save()
            add_exp = 1
    else:
        vi_friend.visited_friend_id = visited_friend_id
        vi_friend.save()
        add_exp = 1

    return add_exp


</t>
<t tx="newlife.20101223141853.1830">#date: 2010-08-18
#commnet: 增加一条求购记录
def new_a_member_wanttobuy(member_id, fish, price=0, num=1):
    wtb = MyWantToBuy(member_id=member_id,
                    style=fish.style,
                    total_num = num,
                    bought_num = 0,
                    price=price)
    wtb.save()

    #更新用户相关缓存
    wtb_ids = list(get_wanttobuy_ids(member_id))
    wtb_ids.append(wtb.id)
    update_wanttobuy_ids(member_id, wtb_ids)

    return wtb

</t>
<t tx="newlife.20101223141853.1831">#date: 2010-08-18
#commnet: 删除一条求购记录
def remove_a_member_wanttobuy(member_id, wtb_id):
    wtb = get_wanttobuy(member_id, wtb_id)
    if wtb:
        wtb.delete()

    #更新用户相关缓存
    wtb_ids = list(get_wanttobuy_ids(member_id))
    if wtb_id in wtb_ids:
        wtb_ids.remove(wtb_id)
        update_wanttobuy_ids(member_id, wtb_ids)

    return wtb_ids


</t>
<t tx="newlife.20101223141853.1832">#date: 2010-08-23
#comment: 取得赠送鱼食数量
def getFishReward(member_id):
    level,remain_exp,next_level_exp = get_almanac_level_info(member_id)
    if level&lt;11:
        return 100
    elif level&lt;21:
        return 200
    elif level&lt;31:
        return 300
    elif level&lt;41:
        return 400
    elif level&lt;51:
        return 500
    elif level&lt;61:
        return 600
    else:
        return 300


</t>
<t tx="newlife.20101223141853.1833"># 新建一个寄存包中的物品
def new_my_temp_bag_info(member_id, sender_id, type, style, name, time_limit, quantity, will_expire):
    # 创建寄存包的实例对象
    temp_bag_info = MyTempBagInfo(member_id=member_id, 
                                  sender_id=sender_id,
                                  type=type,
                                  style=style,
                                  name=name,
                                  time_limit=time_limit,
                                  quantity=quantity,
                                  will_expire=will_expire)
    temp_bag_info.save()
    # 更新缓存
    if will_expire:
        temp_bag_info_ids = get_limit_my_temp_bag_info_ids(member_id)
        if temp_bag_info.id not in temp_bag_info_ids:
            temp_bag_info_ids.append(temp_bag_info.id)
        update_limit_my_temp_bag_info_ids(member_id, temp_bag_info_ids)
    else:
        temp_bag_info_ids = get_other_my_temp_bag_info_ids(member_id)
        if temp_bag_info.id not in temp_bag_info_ids:
            temp_bag_info_ids.append(temp_bag_info.id)
        update_other_my_temp_bag_info_ids(member_id, temp_bag_info_ids)


</t>
<t tx="newlife.20101223141853.1834"># 删除过期的系统礼物并返回有效的礼物id列表
def get_valid_temp_bag_info_ids(member_id):
    temp_bag_info_ids = get_limit_my_temp_bag_info_ids(member_id)
    i = 0
    j = 0
    for temp_bag_info_id in temp_bag_info_ids:
        temp_bag_info = get_my_temp_bag_info(member_id, temp_bag_info_id)
        if datetime.now() - timedelta(0, DEFAULT_GIFTS_EXPIRE_DICT[temp_bag_info.type]) &gt; temp_bag_info.create_time:
            j = i
            break
        i += 1
    # 删除礼物包中过期的物品
    for temp_bag_info_id in temp_bag_info_ids[:j]:
        temp_bag_info = get_my_temp_bag_info(member_id, temp_bag_info_id)
        temp_bag_info.delete()
    temp_bag_info_ids = temp_bag_info_ids[j:]
    update_limit_my_temp_bag_info_ids(member_id, temp_bag_info_ids)

    return temp_bag_info_ids


</t>
<t tx="newlife.20101223141853.1835">#添加用户物品
def new_user_product(member, rtype, rstyle, rnum=1, rval=30):
    name = ''
    objs = []

    if rtype=='s': #铜币
        name = 'shell'
        member.shells += rnum
        member.save()
    elif rtype=='g': #宝石
        name = 'pearl'
        member.pearls += rnum
        member.save()
    elif rtype=='x': #经验
        al_info = get_or_create_almanac_info(member.id)
        al_info.added_exp += rnum
        al_info.save()
        name = 'exp'
    elif rtype=='p': #道具
        item = get_item(rstyle)
        if item:
            name = item.name
            new_a_member_item(member, item, rnum)
    elif rtype=='a': #装饰
        adorn = get_adorn(rstyle)
        if adorn:
            name = adorn.name
            for i in xrange(rnum):
                new_a_member_adorn(member, adorn, rval)
    elif rtype=='d': #龙蛋
        fish = get_fish_with_stylecolor(rstyle)
        if fish:
            name = u'%s蛋' % fish.name
            for i in xrange(rnum):
                objs.append(new_a_member_fish(member, fish))
    elif rtype=='n': #龙窝
        fish_tank = get_fish_tank(rstyle)
        if fish_tank:
            name = fish_tank.name
            for i in xrange(rnum):
                new_a_member_tank(member, fish_tank)
    elif rtype=='e': #材料
        essence = get_essence(rstyle)
        if essence:
            name = essence.name
            new_a_member_essence(member, essence, rnum)
    elif rtype=='c': #伙伴
        deco = get_deco(rstyle)
        if deco:
            name = deco.name
            for i in xrange(rnum):
                new_a_member_deco(member, deco, rval)

    return name, member, objs


</t>
<t tx="newlife.20101223141853.1836">def can_send_to_level(my_fish, stage):
    fish_star = my_fish.star
    fish_property = get_fish_property(my_fish.star, my_fish.level, my_fish.color)
    if stage == 1:
        if fish_star &gt;= 5 and fish_property &gt;= 100:
            return 5
        if fish_star &gt;= 4 and fish_property &gt;= 15:
            return 4
        if fish_star &gt;= 3 and fish_property &gt;= 8:
            return 3
        if fish_star &gt;= 2 and fish_property &gt;= 4:
            return 2
        if fish_star &gt;= 1 and fish_property &gt;= 1:
            return 1
    elif stage == 2:
        if fish_star &gt;= 10 and fish_property &gt;= 250:
            return 5
        if fish_star &gt;= 9 and fish_property &gt;= 160:
            return 4
        if fish_star &gt;= 8 and fish_property &gt;= 100:
            return 3
        if fish_star &gt;= 7 and fish_property &gt;= 40:
            return 2
        if fish_star &gt;= 6 and fish_property &gt;= 6:
            return 1
</t>
<t tx="newlife.20101223141853.1842"># 获取用户图鉴等级信息
def get_almanac_level_info(member_id):
    level=1
    al_info = get_or_create_almanac_info(member_id)
    almanac_exp = al_info.exp + al_info.added_exp
    for i in xrange(1,93):
        if almanac_exp&lt;EXP_LEVEL[i]:
            level = i
            break
    remain_exp = EXP_LEVEL[level]-almanac_exp
    #next_level_exp = int(level**1.7)*250
    next_level_exp = EXP_LEVEL[level]
    return level,remain_exp,next_level_exp


@doc
“”“ 根据用户经验获取用户级别”“”
import bisect
level_exp = EXP_LEVEL.values()
level = bisect.bisect(level_exp,almanac_exp)+1</t>
<t tx="newlife.20101223141853.1884">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20101223141853.1885"># -*- coding: utf-8 -*-

from datetime import datetime
from apps.system.lock import *
from apps.system.helper import Dice
from apps.members.helper import *
from apps.members.cache import *
from apps.tasks.cache import *
from apps.tasks.constants import *
from apps.tasks.checktask import *
from apps.products.helper import get_product_bystyle

</t>
<t tx="newlife.20101223141853.1886">#重新刷没有完成的任务，回刷三条
def refresh_my_random_tasks(member_id):
    my_random_task_ids = get_my_random_task_ids(member_id)
    my_random_tasks = get_my_tasks(member_id, my_random_task_ids)

    my_current_task_taskids = []
    for my_task in my_random_tasks:
        if my_task.status == 'OK': #保留已完成未领取奖品的随机任务
            my_current_task_taskids.append(my_task.task_id)
        else: #清除未完成和已经领取过礼物的任务
            my_task.delete()

    keeped_ids_len = len(my_current_task_taskids)
    new_my_tasks = []
    if keeped_ids_len&lt;MAX_RANDOM_TASK_LEN:
        task_ids = get_random_task_ids()
        tasks = get_and_filter_intime_tasks(task_ids, my_current_task_taskids)
        level,remain_exp,next_level_exp = get_almanac_level_info(member_id)
        user_tasks = []

        #过滤用户可以刷的任务
        for task in tasks:
            if task.level&lt;=level:
                user_tasks.append(task)
        if len(user_tasks)&gt;0:
            for i in xrange(MAX_RANDOM_TASK_LEN-keeped_ids_len):
                chances = []
                for task in user_tasks:
                    chances.append(task.refresh_rate(level))
                dice = Dice(chances)

                ran_num=dice.throw_dice()
                task = user_tasks[ran_num]
                my_task = MyTaskInfo(member_id=member_id, task_id=task.id,type=task.type,
                        group_code=task.group_code,categary=task.categary)
                my_task.save()

                #补充冗余信息
                my_task = append_my_task_redundancy(my_task)

                new_my_tasks.append(my_task)

                #移除已经出现的task
                user_tasks.remove(task)
                if len(user_tasks)&lt;=0:
                    break
        else:
            return new_my_tasks

        #清除用户的随机任务
        clear_my_random_task_cache(member_id)

    return new_my_tasks


</t>
<t tx="newlife.20101223141853.1887">#对于一个存在的任务，重新刷取一个随机任务
def refresh_one_my_random_task(member_id, my_task_id):
    my_random_task_ids = get_my_random_task_ids(member_id)
    my_random_tasks = get_my_tasks(member_id, my_random_task_ids)

    my_current_task_taskids = []
    my_old_task = None
    for my_task in my_random_tasks:
        if my_task.id == my_task_id:
            my_old_task = my_task
        my_current_task_taskids.append(my_task.task_id)
    keeped_ids_len = len(my_current_task_taskids)

    #取随机任务
    task_ids = get_random_task_ids()
    tasks = get_and_filter_intime_tasks(task_ids, my_current_task_taskids)
    level,remain_exp,next_level_exp = get_almanac_level_info(member_id)
    user_tasks = []

    #过滤用户可以刷的任务
    for task in tasks:
        if task.level&lt;=level:
            if task.id not in my_current_task_taskids:
                user_tasks.append(task)

    my_task = None
    if len(user_tasks)&gt;0:
        chances = []
        for task in user_tasks:
            chances.append(task.refresh_rate(level))
        dice = Dice(chances)

        ran_num=dice.throw_dice()
        task = user_tasks[ran_num]

        my_old_task.delete()
        my_task = MyTaskInfo(member_id=member_id, task_id=task.id,type=task.type,
                group_code=task.group_code,categary=task.categary)
        my_task.save()

        #补充冗余信息
        my_task = append_my_task_redundancy(my_task)

        key = CACHE_KEY_MYTASK_INFO % (member_id, my_task.id)
        cache.set(key, my_task)

        my_random_task_ids.remove(my_task_id)
        my_random_task_ids.append(my_task.id)
        update_my_random_task_ids(member_id, my_random_task_ids)

    return my_task

</t>
<t tx="newlife.20101223141853.1888">#获取任务的奖励
def get_task_rewards_info(task):
    taskrewards = get_task_rewards(task.task_id)
    trs = []
    for taskreward in taskrewards:
        name = ''
        if taskreward.reward_type == 's':
            name = u'铜币'
        elif taskreward.reward_type == 'g':
            name = u'宝石'
        elif taskreward.reward_type == 'x':
            name = u'经验'
        elif taskreward.reward_type in ['a','c','d','e','p','n']:
            product = get_product_bystyle(taskreward.reward_style)
            if product:
                name = product.name

        tr_temp = {'type':taskreward.reward_type,
                   'name':name,
                   'style':taskreward.reward_style,
                   'num':taskreward.reward_num,
                   'months':taskreward.reward_val,}
        trs.append(tr_temp)
    return trs

</t>
<t tx="newlife.20101223141853.1889">def get_next_task(member_id, my_task, key, level, has_reward=False ):
    #已经领过礼物了,切换任务
    trs = ''
    end_time = ''
    if my_task and my_task.status=='OV':
        group_task_ids = get_group_task_ids(key)
        if not group_task_ids:
            return (my_task, trs, end_time)

        task_index = group_task_ids.index(my_task.task_id)
        #无任务可做了
        if (task_index+1)&gt;= len(group_task_ids):
            return (my_task, trs, end_time)
        #更改任务信息
        task_id = group_task_ids[task_index+1]
        task = get_task(task_id)
        if task.level &lt;= level and task.is_intime():
            my_task.task_id = task.id
            my_task.type = task.type
            my_task.group_code = task.group_code
            my_task.categary = task.categary
            my_task.status = 'NO'
            my_task.num_done_1 = 0
            my_task.num_done_2 = 0
            my_task.num_done_3 = 0
            my_task.start_time = datetime.now()
            my_task.save()

            #补充冗余信息
            my_task = append_my_task_redundancy(my_task)

            if has_reward:
                trs = get_task_rewards_info(my_task)

            if my_task.categary=='a':
                end_time = my_task.end_time and my_task.end_time.strftime('%Y-%m-%d') or ''

            clear_my_group_task_cache(member_id, key)

    return (my_task, trs, end_time)


</t>
<t tx="newlife.20101223141853.1890">#得到用户的所有的任务
def get_my_all_tasks(member_id):
    my_all_tasks = []

    #normal tasks
    for key in get_normal_task_group_codes():
        my_task = get_or_create_group_task(member_id, key)
        if my_task:
            my_all_tasks.append(my_task)

    #random tasks
    my_random_task_ids = get_my_random_task_ids(member_id)
    my_random_tasks = get_my_tasks(member_id, my_random_task_ids)
    for my_task in my_random_tasks:
        my_all_tasks.append(my_task)

    #activity tasks
    for key in get_activity_task_group_codes():
        my_task = get_or_create_group_task(member_id, key)
        if my_task:
            my_all_tasks.append(my_task)

    return my_all_tasks
@doc
 
看这意思，有3种任务：
任务系统这么复杂。。。。。
等等再看吧。。




</t>
<t tx="newlife.20101223141853.1891">#检查是否做了哪个任务
def do_task(member_id, task_type, style, num=1, family=None, location=None, star=None):
    #不能让任务影响游戏正常执行，加入 try/except
    try:
        #检查任务合法性
        n_task_type = int(str(task_type[1:]))
        if n_task_type &gt; len(TYPE_CHOICES):
            return ''

        my_all_tasks = get_my_all_tasks(member_id)

        for my_task in my_all_tasks:
            if my_task.type == task_type:
                ctf_keys = CHECK_TASK_FUNCTIONS.keys()
                fun = None
                task_seq = None
                task_style = None
                if my_task.num_1&gt;0 and my_task.prop_type_1 in ctf_keys:
                    fun = CHECK_TASK_FUNCTIONS.get(my_task.prop_type_1)
                    task_seq = 1
                    task_style = my_task.style_1
                elif my_task.num_2&gt;0 and my_task.prop_type_2 in ctf_keys:
                    fun = CHECK_TASK_FUNCTIONS.get(my_task.prop_type_2)
                    task_seq = 2
                    task_style = my_task.style_2
                elif my_task.num_3&gt;0 and my_task.prop_type_3 in ctf_keys:
                    fun = CHECK_TASK_FUNCTIONS.get(my_task.prop_type_3)
                    task_seq = 3
                    task_style = my_task.style_3

                if callable(fun):
                    my_task.is_modify = False
                    task = fun(my_task, task_style, style, task_seq, num, family, location, star)
                    if task.is_modify:
                        return task
        return ''
    except:
        return ''

</t>
<t tx="newlife.20101223141853.1892">#更新一个普通或者活动任务
def update_my_normal_task(member_id, my_task, only_group=True):
    if not my_task or my_task.categary not in ('a', 'n'):
        return ''

    level, remain_exp, next_level_exp = get_almanac_level_info(member_id)
    if only_group:
        if int(my_task.group_code) != 1:
            return '' 

    task, trs, end_time = get_next_task(member_id, my_task, my_task.group_code, level, has_reward=True)

    return {'task_id':task.categary+"_"+task.group_code+'_'+str(task.seq),
            'reward_list':trs,
            'remain_time':end_time,
            }


</t>
<t tx="newlife.20101223141853.1893">#更新任务，有完成的任务补充新的任务，一天执行一次
def update_my_tasks(member_id):
    #随机任务
    refresh_my_random_tasks(member_id)

    level,remain_exp,next_level_exp = get_almanac_level_info(member_id)

    #活动任务
    for key in get_activity_task_group_codes():
        my_task = get_or_create_group_task(member_id, key)
        my_task, trs, end_time = get_next_task(member_id, my_task, key, level)

    #普通任务
    for key in get_normal_task_group_codes():
        my_task = get_or_create_group_task(member_id, key)
        my_task, trs, end_time = get_next_task(member_id, my_task, key, level)


</t>
<t tx="newlife.20101223141853.1894">#领取奖品
def draw_task_rewards(my_task, member):  

    task_rewards = get_task_rewards(my_task.task_id)
    #检查龙位空余数量
    reward_dragon_num = 0
    for reward in task_rewards:
        if reward.reward_type=='d':
            reward_dragon_num += reward.reward_num

    # 判断背包位是否够放下龙和蛋
    if reward_dragon_num &gt; 0:
        if len(get_my_fish_ids_in_bag(member.id)) + reward_dragon_num &gt; member.current_bags():
            for reward in task_rewards:
                new_my_temp_bag_info(member.id, member.id, reward.reward_type,
                        reward.reward_style, '', 30, reward.reward_num, True)
            return {'is_full':True}

    #update task status.
    my_task.status = 'OV'
    my_task.save()

    #draw rewards
    reward_list = []
    for reward in task_rewards:
        name, member, objs = new_user_product(member, reward.reward_type, reward.reward_style, reward.reward_num)
        open_new_almanac = False
        open_all = False
        fish_info = ''
        if reward.reward_type=='d':
            my_fish = objs[0]
            fish_info = {}
            if isopen_new_almanac(member, my_fish):
                open_new_almanac = True
                get_exp, open_all = update_member_almanac_exp(member, my_fish)
                fish_info = {
                    'name':my_fish.get_display_name(),
                    'style':my_fish.get_display_style(),
                    'star':my_fish.star,
                    'family':my_fish.family,
                    'level':my_fish.level,
                    'exp':my_fish.exp,
                }

        reward_list.append({'type':reward.reward_type,
                            'name':name,
                            'style':reward.reward_style,
                            'num':reward.reward_num,
                            'open_new_almanac':open_new_almanac,
                            'my_fish':fish_info,
                            'open_all':open_all,
                            })

    level, remain_exp, next_level_exp = get_almanac_level_info(member.id)
    result = {'userinfo':{'level':level,
                          'remain_exp':remain_exp,
                          'next_level_exp':next_level_exp,
                          'pearls':member.pearls ,
                          'shells':member.shells
                          },
              'reward_list':reward_list,
             }
    return result

</t>
<t tx="newlife.20101223141853.1895">def check_done_task(member, *args, **kwargs):
    my_task = do_task(member.id, *args, **kwargs)
    if my_task and my_task.status == 'OK':
        rewards = draw_task_rewards(my_task, member)
        return (rewards, my_task)
    return ('', my_task)
</t>
<t tx="newlife.20101223141853.1896">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20101223141853.1897"># -*- coding: utf-8 -*-

from django.core.cache import cache
from apps.tasks.models import *
from apps.system.helper import choose_a_db

</t>
<t tx="newlife.20101223141853.1898">def get_task(task_id):
    key = CACHE_KEY_TASK % task_id
    task = cache.get(key)

    if not task:
        task = Task.objects.get(id=task_id)
        cache.set(key, task)

    return task


</t>
<t tx="newlife.20101223141853.1899">def get_normal_task_group_codes():
    key = CACHE_KEY_TASK_NORMAL_GROUP_CODES
    gcs = cache.get(key)

    if not gcs:
        gcs = list(Task.objects.filter(categary='n').values_list('group_code', flat=True))
        gcs = list(set(gcs))
        cache.set(key, gcs)

    return gcs

</t>
<t tx="newlife.20101223141853.1900">def get_activity_task_group_codes():
    key = CACHE_KEY_TASK_ACTIVITY_GROUP_CODES
    gcs = cache.get(key)

    if not gcs:
        gcs = list(Task.objects.filter(categary='a').values_list('group_code', flat=True))
        gcs = list(set(gcs))
        cache.set(key, gcs)

    return gcs

</t>
<t tx="newlife.20101223141853.1901">def get_group_task_ids(groupcode):
    key = CACHE_KEY_TASK_GROUP_IDS % groupcode
    task_ids = cache.get(key)

    if not task_ids:
        task_ids = list(Task.objects.filter(group_code=groupcode).order_by('seq').values_list('id', flat=True))
        cache.set(key, task_ids)

    return task_ids


</t>
<t tx="newlife.20101223141853.1902">def get_random_task_ids():
    key = CACHE_KEY_TASK_RANDOM_IDS
    task_ids = cache.get(key)

    if not task_ids:
        task_ids = list(Task.objects.filter(categary='r').order_by('seq').values_list('id', flat=True))
        cache.set(key, task_ids)

    return task_ids


</t>
<t tx="newlife.20101223141853.1903">def get_and_filter_intime_tasks(task_ids, exclude_task_ids=[]):
    tasks = []
    for task_id in task_ids:
        #移除不应包含的task id, 为了刷任务时不刷出重复的任务
        if task_id in exclude_task_ids:
            continue

        task = get_task(task_id)
        if task.is_intime():        
            tasks.append(task)

    return tasks


</t>
<t tx="newlife.20101223141853.1904">def get_task_rewards(task_id):
    key = CACHE_KEY_TASK_REWARD_IDS % task_id
    taskrewards = cache.get(key)

    if not taskrewards:
        taskrewards = list(TaskRewards.objects.filter(task_id=task_id))
        if taskrewards:
            cache.set(key, taskrewards)

    return taskrewards


</t>
<t tx="newlife.20101223141853.1905">#增加冗余信息
def append_my_task_redundancy(my_task):
    task = get_task(my_task.task_id)

    my_task.title = task.title
    my_task.story = task.story
    my_task.seq = task.seq
    my_task.description = task.description
    my_task.prop_type_1 = task.prop_type_1
    my_task.prop_type_2 = task.prop_type_2
    my_task.prop_type_3 = task.prop_type_3
    my_task.style_1 = task.style_1
    my_task.style_2 = task.style_2
    my_task.style_3 = task.style_3
    my_task.name_1 = task.name_1
    my_task.name_2 = task.name_2
    my_task.name_3 = task.name_3
    my_task.num_1 = task.num_1
    my_task.num_2 = task.num_2
    my_task.num_3 = task.num_3
    my_task.end_time = task.end_time
    my_task.npc_style = task.npc_style

    return my_task


</t>
<t tx="newlife.20101223141853.1906">def get_my_task(member_id, my_task_id):
    key = CACHE_KEY_MYTASK_INFO % (member_id, my_task_id)
    my_task = cache.get(key)

    if not my_task:
        chosen_db = choose_a_db(member_id)
        my_task = MyTaskInfo.objects.using(chosen_db).get(member_id=member_id, id=my_task_id)
        #增加冗余信息
        my_task = append_my_task_redundancy(my_task)

        cache.set(key, my_task)

    return my_task


</t>
<t tx="newlife.20101223141853.1907">def get_my_tasks(member_id, my_task_ids):
    my_tasks = []
    for my_task_id in my_task_ids:
        my_task = get_my_task(member_id, my_task_id)
        my_tasks.append(my_task)

    return my_tasks


</t>
<t tx="newlife.20101223141853.1908">def get_my_random_task_ids(member_id):
    key = CACHE_KEY_MYTASK_RANDOM_IDS % member_id
    my_task_ids = cache.get(key)

    if not my_task_ids:
        chosen_db = choose_a_db(member_id)
        my_task_ids = list(MyTaskInfo.objects.using(chosen_db).filter(member_id=member_id, categary='r').order_by('status').values_list('id', flat=True))
        cache.set(key, my_task_ids)

    return my_task_ids


</t>
<t tx="newlife.20101223141853.1909">def get_or_create_group_task(member_id, groupcode):
    key = CACHE_KEY_MYTASK_GROUP_ID % (member_id, groupcode)
    my_task = cache.get(key)

    if not my_task:
        try:
            chosen_db = choose_a_db(member_id)
            my_task = MyTaskInfo.objects.using(chosen_db).get(member_id=member_id, group_code=groupcode)
        except MyTaskInfo.DoesNotExist:
            group_task_ids = get_group_task_ids(groupcode)
            if not group_task_ids:
                return None

            from apps.members.helper import get_almanac_level_info

            task = get_task(group_task_ids[0])
            level,remain_exp,next_level_exp = get_almanac_level_info(member_id)
            if task.level&lt;=level and task.is_intime():
                my_task = MyTaskInfo(member_id=member_id, task_id=task.id, type=task.type,
                        group_code=task.group_code, categary=task.categary, status='NO')
                my_task.save()
            else:
                return None

        #增加冗余信息
        my_task = append_my_task_redundancy(my_task)

        cache.set(key, my_task)

    return my_task

</t>
<t tx="newlife.20101223141853.1910">def clear_my_random_task_cache(member_id):
    key = CACHE_KEY_MYTASK_RANDOM_IDS % (member_id)
    cache.delete(key)

</t>
<t tx="newlife.20101223141853.1911">def update_my_random_task_ids(member_id, my_rt_ids):
    key = CACHE_KEY_MYTASK_RANDOM_IDS % (member_id)
    cache.set(key, list(set(my_rt_ids)))

</t>
<t tx="newlife.20101223141853.1912">def clear_my_group_task_cache(member_id, group_code):
    key = CACHE_KEY_MYTASK_GROUP_ID % (member_id, group_code)
    cache.delete(key)

</t>
<t tx="newlife.20101224111641.1940">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20101224111641.1941"># -*- coding: utf-8 -*-

from django.core.cache import cache
from apps.products.models import *
from apps.products.constants import FISH_COLOR_CHOICES
from apps.system.helper import choose_a_db


</t>
<t tx="newlife.20101224111641.1942"># 获取当前家族当前种类的所有鱼的颜色
def get_almanac_family_code_fish_colors(base_style):
    key = CACHE_KEY_FAMILY_CODE_FISH_COLORS % (base_style)
    fish_colors = cache.get(key)
    if fish_colors is None:
        fish_colors = list(Fish.objects.filter(style=base_style).values_list('color', flat=True))
        cache.set(key, fish_colors)

    return fish_colors


</t>
<t tx="newlife.20101224111641.1943"># 获取当前种族的所有鱼的种类
def get_family_base_styles(family):
    key = CACHE_KEY_FAMILY_FISH_STYLES % family
    styles = cache.get(key)
    if styles is None:
        styles = list(Fish.objects.filter(family=family,is_almanac=True).values_list('style', flat=True))
        styles = list(set(styles))
        cache.set(key, styles)

    return styles


</t>
<t tx="newlife.20101224111641.1944"># 获取当前家族用来显示图鉴的那条鱼
def get_base_style_show_fish(base_style):
    key = CACHE_KEY_FAMILY_STYLE_SHOW_FISH % (base_style)
    fish = cache.get(key)
    if fish is None:
        try:
            fish = Fish.objects.get(style=base_style, is_show=True, is_almanac=True)
            cache.set(key, fish)
        except:
            fish = None

    return fish

</t>
<t tx="newlife.20101224111641.1945">#comment: style=xxxx_r_1
def get_fish_with_stylecolor(style):
    if '_' not in style:
        return None
    style_list = style.split('_')
    if len(style_list)&lt;2:
        return None
    return get_fish(style_list[0],style_list[1])


@doc
这个函数写的真是多余啊，这2个if判断真是多余啊。
首先，</t>
<t tx="newlife.20101224111641.1946">#comment: styles=[xxxx_r_1, xxxxx_g_2, ...]
def get_fishes(styles):
    fishs = []
    for style in styles:
        fish = get_fish_with_stylecolor(style)
        if fish:
            fishs.append(fish)

    return fishs


</t>
<t tx="newlife.20101224111641.1947">#comment: style=xxxxx, color='r'
def get_fish(style, color):
    key = CACHE_KEY_FISH % (style, color)
    fish = cache.get(key)
    if fish is None:
        try:
            fish = Fish.objects.get(style=style, color=color)
            cache.set(key, fish)
        except:
            fish = None
    return fish
@doc

我就太阳啊，谁给图鉴的model命名成Fish的,
</t>
<t tx="newlife.20101224111641.1948">#comment: styles=[xxxxxx, xxxxxx]
def get_family_fishs(styles):
    fishs = {}
    for style in styles:
        style_fishs = []
        for (color,name) in FISH_COLOR_CHOICES:
            fish = get_fish(style, color)
            if fish:
                style_fishs.append(fish)
        fishs.update(style_fishs)

    return fishs


</t>
<t tx="newlife.20101224111641.1949">def get_deco(style):
    key = CACHE_KEY_DECO % style
    deco = cache.get(key)

    if deco is None:
        try:
            deco = Deco.objects.get(style=style)
            cache.set(key, deco)
        except:
            deco = None

    return deco


</t>
<t tx="newlife.20101224111641.1950">def get_decos(deco_styles):
    decos = []
    for deco_style in deco_styles:
        deco = get_deco(deco_style)
        if deco:
            decos.append(deco)
    return decos


</t>
<t tx="newlife.20101224111641.1951">def get_adorn(style):
    key = CACHE_KEY_ADORN % style
    adorn = cache.get(key)

    if adorn is None:
        try:
            adorn = Adorn.objects.get(style=style)
            cache.set(key, adorn)
        except:
            adorn = None

    return adorn


</t>
<t tx="newlife.20101224111641.1952">def get_adorns(adorn_styles):
    adorns = []
    for adorn_style in adorn_styles:
        adorn = get_adorn(adorn_style)
        if adorn:
            adorns.append(adorn)
    return adorns


</t>
<t tx="newlife.20101224111641.1953"># 获取一个鱼缸素材 by style
def get_fish_tank(style):
    key = CACHE_KEY_TANK % style
    fish_tank = cache.get(key)

    if fish_tank is None:
        try:
            fish_tank = FishTank.objects.get(style=style)
            cache.set(key, fish_tank)
        except:
            fish_tank = None

    return fish_tank


</t>
<t tx="newlife.20101224111641.1954"># 获取多个鱼缸素材
def get_fish_tanks(tank_styles):
    tanks = []
    for tank_style in tank_styles:
        tank = get_fish_tank(tank_style)
        if tank:
            tanks.append(tank)
    return tanks


</t>
<t tx="newlife.20101224111641.1955">def get_item(item_style):
    key = CACHE_KEY_ITEM % item_style
    item = cache.get(key)

    if item is None:
        try:
            item = Item.objects.get(style=item_style)
            cache.set(key, item)
        except:
            item = None

    return item


</t>
<t tx="newlife.20101224111641.1956"># 获取当前类型的所有道具
def get_type_item_styles(i_type):
    key = CACHE_KEY_TYPE_ITEM_STYLES % i_type
    type_item_styles = cache.get(key)

    if type_item_styles is None:
        try:
            type_item_styles = list(Item.objects.filter(item_type=i_type).values_list('style', flat=True))
            cache.set(key,type_item_styles)
        except:
            return None

    return type_item_styles

</t>
<t tx="newlife.20101224111641.1957">def get_essence(essence_style):
    key=CACHE_KEY_ESSE % essence_style
    essence = cache.get(key)

    if essence is None:
        try:
            essence = Essence.objects.get(style=essence_style)
            cache.set(key,essence)
        except:
            essence = None

    return essence

</t>
<t tx="newlife.20101224111641.1958">def get_essences(essence_styles):
    essences = []
    for essence_style in essence_styles:
        essence = get_essence(essence_style)
        if essence:
            essences.append(essence)
    return essences

</t>
<t tx="newlife.20101224111641.1959">def get_star_essence(star):
    key = CACHE_KEY_STAR_ESSENCE % star
    star_esse_ids = cache.get(key)

    if star_esse_ids is None:
        star_esse_ids = list(Essence.objects.filter(star=star).values_list('style', flat=True))
        cache.set(key,star_esse_ids)
    return star_esse_ids

</t>
<t tx="newlife.20101224111641.1961">@language python
@tabwidth -4
@others
@ignore

</t>
<t tx="newlife.20101224111641.1962"># -*- coding: utf-8 -*-
from django.db import models
from django.core.cache import cache
from apps.products.constants import *

</t>
<t tx="newlife.20101224111641.1963">class Essence(models.Model):
    name = models.CharField(max_length=10) #精华名称
    style = models.CharField(max_length=20) # 样式
    color = models.CharField(max_length=1,choices=COLOR_VALUE) #素材颜色
    star = models.IntegerField() #素材星级

    @others
</t>
<t tx="newlife.20101224111641.1964">def update_cache(self):
    key = CACHE_KEY_ESSE % (self.style)
    cache.set(key, self)

</t>
<t tx="newlife.20101224111641.1965">def delete_cache(self):
    key = CACHE_KEY_ESSE % (self.style)
    cache.delete(key)

</t>
<t tx="newlife.20101224111641.1966">def save(self):
    super(Essence, self).save()
    self.update_cache()

</t>
<t tx="newlife.20101224111641.1967">def delete(self):
    self.delete_cache()
    super(Essence, self).delete()

</t>
<t tx="newlife.20101224111641.1968">class Meta:
    db_table = 'ppy_essence'


</t>
<t tx="newlife.20101224111641.1969">class Item(models.Model):
    name = models.CharField(max_length=50)
    description = models.TextField(blank=True, null=True) # 描述
    style = models.CharField(max_length=20) # 样式
    item_type = models.CharField(max_length=3,choices=ITEM_TYPE) #道具类型
    growth = models.IntegerField(blank=True,null=True) #道具效果，成长药水为成长值
    shorten_time = models.IntegerField(blank=True,null=True) #派遣鱼缩短时间为小时数
    success_percent = models.IntegerField(blank=True,null=True) #合成成功率为百分比
    cool_down_time = models.IntegerField(default=0) #道具冷却时间小时数
    disappear_time = models.IntegerField(default=0) #自动消失时间天数

    @others
</t>
<t tx="newlife.20101224111641.1970">def update_cache(self):
    key = CACHE_KEY_ITEM % (self.style)
    cache.set(key, self)

</t>
<t tx="newlife.20101224111641.1971">def delete_cache(self):
    key = CACHE_KEY_ITEM % (self.style)
    cache.delete(key)

</t>
<t tx="newlife.20101224111641.1972">def save(self):
    super(Item, self).save()
    self.update_cache()

</t>
<t tx="newlife.20101224111641.1973">def delete(self):
    self.delete_cache()
    super(Item, self).delete()

</t>
<t tx="newlife.20101224111641.1974">class Meta:
    db_table = 'ppy_item'


</t>
<t tx="newlife.20101224111641.1975">class Product(models.Model):
    name = models.CharField(max_length=50) # 名称
    description = models.TextField(blank=True, null=True) # 描述
    style = models.CharField(max_length=20) # 样式
    star = models.IntegerField() # 星级
    family = models.IntegerField(choices=FAMILY_CHOICES) # 家族，使用质数表示，如果有组合家族可以直接用乘积表示
    p_type = models.CharField(max_length=1, choices=HLK_CHOICES) # h--海; l--陆; k--空; o--其它

    @others
@doc

这个model是其他Fish,Deco,Adorn,FishTank的父类。</t>
<t tx="newlife.20101224111641.1976">class Meta:
    abstract = True


</t>
<t tx="newlife.20101224111641.1977">class Fish(Product):
    color = models.CharField(max_length=3, choices=FISH_COLOR_CHOICES)
    almanac_name = models.CharField(max_length=20) # 图鉴名称
    almanac_description = models.TextField(blank=True,null=True) # 图鉴描述
    is_show = models.BooleanField(default=False) # 是否显示
    is_almanac = models.BooleanField(default=False) # 是否是图鉴内容

    @others
</t>
<t tx="newlife.20101224111641.1978">def update_cache(self):
    key = CACHE_KEY_FISH % (self.style, self.color)
    cache.set(key, self)

</t>
<t tx="newlife.20101224111641.1979">def delete_cache(self):
    key = CACHE_KEY_FISH % (self.style, self.color)
    cache.delete(key)

</t>
<t tx="newlife.20101224111641.1980">def save(self):
    super(Fish, self).save()
    self.update_cache()

</t>
<t tx="newlife.20101224111641.1981">def delete(self):
    self.delete_cache()
    super(Fish, self).delete()

</t>
<t tx="newlife.20101224111641.1982">#base_style
def _base_style(self):
    return '%s_%s' % (self.style, self.color)
</t>
<t tx="newlife.20101224111641.1983">base_style = property(_base_style)

# 获取最大的变形次数  
def get_deform_levels(self):
    from apps.members.helper import get_deform_levels

    deform_levels = get_deform_levels(self.star)
    return deform_levels

</t>
<t tx="newlife.20101224111641.1984">class Meta:
    db_table = 'ppy_fish'


</t>
<t tx="newlife.20101224111641.1985">class Deco(Product):
    speed_up = models.FloatField() # 成长速度加成，0.1--表示10%...; 0--表示只是装饰

    @others
</t>
<t tx="newlife.20101224111641.1986">def update_cache(self):
    key = CACHE_KEY_DECO % (self.style)
    cache.set(key, self)

</t>
<t tx="newlife.20101224111641.1987">def delete_cache(self):
    key = CACHE_KEY_DECO % (self.style)
    cache.delete(key)

</t>
<t tx="newlife.20101224111641.1988">def save(self):
    super(Deco, self).save()
    self.update_cache()

</t>
<t tx="newlife.20101224111641.1989">def delete(self):
    self.delete_cache()
    super(Deco, self).delete()

</t>
<t tx="newlife.20101224111641.1990">class Meta:
    db_table = 'ppy_deco'


</t>
<t tx="newlife.20101224111641.1991">class Adorn(Product):
    a_type = models.CharField(max_length=1, choices=ADORN_TYPE_CHOICES) # 'n'--龙窝背景,'e'--蛋窝背景,'a'--饰品

    @others
</t>
<t tx="newlife.20101224111641.1992">def update_cache(self):
    key = CACHE_KEY_ADORN % (self.style)
    cache.set(key, self)

</t>
<t tx="newlife.20101224111641.1993">def delete_cache(self):
    key = CACHE_KEY_ADORN % (self.style)
    cache.delete(key)

</t>
<t tx="newlife.20101224111641.1994">def save(self):
    super(Adorn, self).save()
    self.update_cache()

</t>
<t tx="newlife.20101224111641.1995">def delete(self):
    self.delete_cache()
    super(Adorn, self).delete()

</t>
<t tx="newlife.20101224111641.1996">class Meta:
    db_table = 'ppy_adorn'


</t>
<t tx="newlife.20101224111641.1997">class FishTank(Product):
    capacity = models.IntegerField() # 容量

    @others
</t>
<t tx="newlife.20101224111641.1998">def update_cache(self):
    key = CACHE_KEY_TANK % (self.style)
    cache.set(key, self)

</t>
<t tx="newlife.20101224111641.1999">def delete_cache(self):
    key = CACHE_KEY_TANK % (self.style)
    cache.delete(key)

</t>
<t tx="newlife.20101224111641.2000">def save(self):
    super(FishTank, self).save()
    self.update_cache()

</t>
<t tx="newlife.20101224111641.2001">def delete(self):
    self.delete_cache()
    super(FishTank, self).delete()

</t>
<t tx="newlife.20101224111641.2002">class Meta:
    db_table = 'ppy_fishtank'


</t>
<t tx="newlife.20110104172722.2064">@language python
@tabwidth -4
@others
@ignore</t>
<t tx="newlife.20110104172722.2065"># -*- coding: utf-8 -*-

from datetime import timedelta, datetime
from django.core.cache import cache
from global_constants import DEFAULT_PET_TIME
from apps.system.helper import login_member
from apps.members.cache import *
from apps.members.helper import *
from apps.shops.cache import get_shop_product
from apps.tasks.helper import check_done_task, update_my_normal_task

</t>
<t tx="newlife.20110104172722.2066">#获取背包龙
def getDragonsInBagAMF(request, skey):
    member = login_member(request, skey)
    fish_list = []

    my_fish_ids_in_bag = get_my_fish_ids_in_bag(member.id)
    my_fishes = get_my_fishes(member.id, my_fish_ids_in_bag)
    my_fishes = calculate_my_fishes_in_bag(my_fishes)
    for my_fish in my_fishes:
        temp = {
                'id':my_fish.id,
                'name':my_fish.get_display_name(),
                'style':my_fish.get_display_style(),
                'star':my_fish.star,
                'family':my_fish.family,
                'is_highest_level':my_fish.is_highest_level(),
                'hungry':my_fish.hungry,
                'level':my_fish.level,
                'next_deformed_level': my_fish.next_deform_level(),
                'exp':my_fish.exp,
                'cd_time':my_fish.get_dispatch_rest_time(),
                'power':my_fish.get_power(),
                'max_exp':60,
                'can_be_potion':my_fish.can_be_used_potion(),
                'property': get_fish_property(my_fish.star, my_fish.level, my_fish.color),
                'has_finished':has_finished_fish(member.id, my_fish.style, my_fish.star),
                }
        fish_list.append(temp)
    dragon_position = [DEFAULT_SYS_MAX_BAGS, member.shell_bags, member.pearl_bags]
    fish_list.sort(lambda x,y: -1*cmp(x['power'], y['power']))
    return {'list':fish_list,
            'dragon_position':dragon_position,
            'task_list':'',
            'rewards':'',}

</t>
<t tx="newlife.20110104172722.2067">#点击升级
def upgradeDragonAMF(request, skey, my_fish_id):
    member = login_member(request, skey)

    my_fish_id = int(my_fish_id)
    my_fish = get_my_fish(member.id, my_fish_id)
    if not my_fish:
        return {'error':'fish does not exist', 'rewards':'', 'task_list':''}
    open_new_almanac = False
    get_exp = 0
    open_all = False
    rewards = ''
    task_list = ''
    reward_incubate = ''
    task_incubate = ''
    reward_upgrade = ''
    task_upgrade = ''
    reward_exchange = ''
    task_exchange = ''

    if my_fish.has_deformed:
        # 蛋变龙需要移动到鱼缸中
        if my_fish.level == 1:
            my_fish_ids_in_bag = get_my_fish_ids_in_bag(member.id)
            if len(my_fish_ids_in_bag) &gt;= member.current_bags():
                return {'error':'out of bags', 'rewards':'', 'task_list':''}
            my_fish_tank = get_my_fish_tank(member.id, my_fish.my_fish_tank_id)
            if not my_fish_tank:
                return {'error':'fish tank does not exist', 'rewards':'', 'task_list':''}

            my_fish_ids_in_tank = get_my_fish_ids_in_tank(member.id, my_fish_tank.id)
            my_fish.has_deformed = False
            my_fish.style = '_'.join([my_fish.base_style, str(my_fish.color), str(my_fish.level+1)])
            my_fish.my_fish_tank_id = 0
            my_fish.exp = 0.0
            my_fish.hungry = 0
            my_fish.last_power_time = datetime.now() - timedelta(0, 18000)
            my_fish.save()
            # 更新用户鱼缸中和塑料袋中的缓存
            if my_fish.id in my_fish_ids_in_tank:
                my_fish_ids_in_tank.remove(my_fish.id)
            update_my_fish_ids_in_tank(member.id, my_fish_tank.id, my_fish_ids_in_tank)
            if my_fish.id not in my_fish_ids_in_bag:
                my_fish_ids_in_bag.append(my_fish.id)
            update_my_fish_ids_in_bag(member.id, my_fish_ids_in_bag)
            reward, task = check_done_task(member, 't009', my_fish.style, 1)
            if reward:
                reward_incubate = reward
                task_incubate = task

        else:
            my_fish.has_deformed = False
            my_fish.style = '_'.join([my_fish.base_style, str(my_fish.color), str(my_fish.level+1)])
            my_fish.exp = 0.0
            my_fish.last_power_time = datetime.now() - timedelta(0, 18000)
            my_fish.save()
            reward, task = check_done_task(member, 't015', my_fish.style, 1, my_fish.family, my_fish.p_type, my_fish.star)
            if reward:
                reward_upgrade = reward
                task_upgrade = task

        fish_info = {
                'id':my_fish.id,
                'name':my_fish.get_display_name(),
                'style':my_fish.get_display_style(),
                'star':my_fish.star,
                'family':my_fish.family,
                'is_highest_level':my_fish.is_highest_level(),
                'hungry':my_fish.hungry,
                'level':my_fish.level,
                'next_deformed_level': my_fish.next_deform_level(),
                'exp':my_fish.exp,
                'max_exp':60,
                'power':my_fish.get_power(),
                'can_be_potion':my_fish.can_be_used_potion(),
                'property': get_fish_property(my_fish.star, my_fish.level, my_fish.color),
                'has_finished':has_finished_fish(member.id, my_fish.style, my_fish.star),
                'almanac_name':my_fish.almanac_name,
                }
        # 处理图鉴
        if isopen_new_almanac(member, my_fish):
            open_new_almanac = True
            get_exp, open_all = update_member_almanac_exp(member, my_fish)

        reward_new, task_new = check_done_task(member, 't022', my_fish.style, 1)
        mark_first = cache.get("MARK_FIRST", 0)
        if mark_first == 0:
            cache.set("MARK_FIRST", 1)
            my_fishes = get_my_all_fishes(member)
            for my_fish in my_fishes:
                reward_old, task_old = check_done_task(member, 't022', my_fish.style, 1)
                if reward_old:
                    reward_new = reward_old
                    task_new = task_old
        if reward_new:
            reward_exchange = reward_new
            task_exchange = task_new

    #do task
    reward_almanac = ''
    reward_all_almanac = ''

    if open_new_almanac:
        reward_almanac, task_almanac = check_done_task(member, 't019', my_fish.style,
                1, my_fish.family, my_fish.p_type, my_fish.star)

    if open_all:
        reward_all_almanac, task_all_almanac = check_done_task(member, 't020', my_fish.base_style, 1)

    if reward_almanac:
        #开图鉴
        rewards = reward_almanac
        task_list = update_my_normal_task(member.id, task_almanac)
    elif reward_all_almanac:
        #开全图鉴
        rewards = reward_all_almanac
        task_list = update_my_normal_task(member.id, task_all_almanac)
    elif reward_incubate:
        #孵蛋
        rewards = reward_incubate
        task_list = update_my_normal_task(member.id, task_incubate)
    elif reward_upgrade:
        #进化
        rewards = reward_upgrade
        task_list = update_my_normal_task(member.id, task_upgrade)
        #兑换
    elif reward_exchange:
        rewards = reward_exchange
        task_dict = {task_exchange.style_1:task_exchange.num_1,
                     task_exchange.style_2:task_exchange.num_2,
                     task_exchange.style_3:task_exchange.num_3,
                     } 
        #兑换任务完成，删除任务要求的龙
        my_fishes = get_my_all_fishes(member)
        for k, v in task_dict.items():
            temp = [ my_fish for my_fish in my_fishes if k and my_fish.style == k ]
            if temp:
                for my_fish in temp[:v]:
                    if my_fish.my_fish_tank_id == 0:
                        delete_a_member_fish_in_bag(member, my_fish.id)
                    elif my_fish.my_fish_tank_id &gt; 0:
                        delete_a_member_fish_in_tank(member, my_fish.my_fish_tank_id, my_fish.id)

        task_list = update_my_normal_task(member.id, task_exchange)
    if task_list and task_list["type"] == "t022":
        cache.delete("MARK_FIRST")

    level, remain_exp, next_level_exp = get_almanac_level_info(member.id)   
    ret = {'level':level,
            'remain_exp':remain_exp,
            'next_level_exp':next_level_exp,
            'shells':member.shells,
            'open_new_almanac':open_new_almanac,
            'my_fish':fish_info,
            'get_exp':get_exp,
            'open_all':open_all,
            'rewards':rewards,
            'task_list':task_list,
            }
    return ret

</t>
<t tx="newlife.20110104172722.2068">#移动龙到龙窝
def moveDragonToTankAMF(request, skey, my_fish_id, my_tank_id):
    member = login_member(request, skey)

    my_fish_id = int(my_fish_id)
    my_tank_id = int(my_tank_id)
    my_fish = get_my_fish(member.id, my_fish_id)
    if not my_fish:
        return {'error':'fish does not exist', 'rewards':'', 'task_list':''}
    my_fish_tank = get_my_fish_tank(member.id, my_tank_id)
    if not my_fish_tank:
        return {'error':'fish tank does not exist', 'rewards':'', 'task_list':''}
    #蛋应放到蛋窝，龙放到龙窝
    if my_fish.level&gt;1 and not my_fish_tank.is_dragon_nest:
        return {'error':'dragon can not put into egg nest', 'rewards':'', 'task_list':''}
    elif my_fish.level==1 and not my_fish_tank.is_egg_nest:
        return {'error':'dragon egg can not put into dragon nest', 'rewards':'', 'task_list':''}

    my_fish_ids_in_bag = get_my_fish_ids_in_bag(member.id)
    my_fish_ids_in_tank = get_my_fish_ids_in_tank(member.id, my_tank_id)
    my_deco_ids_in_tank = get_my_deco_ids_in_tank(member.id, my_tank_id)
    my_fish = calculate_my_fishes_in_bag([my_fish])[0]
    # 鱼缸已经满了
    if my_fish_tank.capacity &lt;= (len(my_deco_ids_in_tank)+len(my_fish_ids_in_tank)):
        return {'error':'out of capacity', 'rewards':'', 'task_list':''}
    # 移动鱼
    my_fish.my_fish_tank_id = my_fish_tank.id
    my_fish.save()
    # 更新用户鱼缸中和塑料袋中鱼的缓存
    if my_fish.id in my_fish_ids_in_bag:
        my_fish_ids_in_bag.remove(my_fish.id)
    update_my_fish_ids_in_bag(member.id, my_fish_ids_in_bag)
    if my_fish.id not in my_fish_ids_in_tank:
        my_fish_ids_in_tank.append(my_fish.id)
    update_my_fish_ids_in_tank(member.id, my_fish_tank.id, my_fish_ids_in_tank)

    #do task
    task_list = ''
    if my_fish.level==1:
        rewards, my_task = check_done_task(member,'t004',my_fish.style, 1, my_fish.family, my_fish.p_type, my_fish.star)
        if rewards:
            task_list = update_my_normal_task(member.id, my_task)
    else:
        rewards, my_task = check_done_task(member,'t005',my_fish.style, 1, my_fish.family, my_fish.p_type, my_fish.star)
        if rewards:
            task_list = update_my_normal_task(member.id, my_task)
    return {'status':'success',
            'rewards':rewards,
            'task_list':task_list,}

</t>
<t tx="newlife.20110104172722.2069">#移动龙到背包
def moveDragonToBagAMF(request, skey, my_fish_id):
    member = login_member(request, skey)

    my_fish_id = int(my_fish_id)
    my_fish = get_my_fish(member.id, my_fish_id)
    if not my_fish:
        return {'error':'fish does not exist', 'rewards':'', 'task_list':''}
    # 判断用户背包是否已经满了
    my_fish_ids_in_bag = get_my_fish_ids_in_bag(member.id)
    if len(my_fish_ids_in_bag) &gt;= member.current_bags():
        return {'error':'out of bags', 'rewards':'', 'task_list':''}

    my_fish_tank = get_my_fish_tank(member.id, my_fish.my_fish_tank_id)
    if not my_fish_tank:
        return {'error':'fish tank does not exist', 'rewards':'', 'task_list':''}
    my_fish = caculate_my_fish_in_tank(member.id, my_fish_tank, my_fish)
    my_fish_ids_in_tank = get_my_fish_ids_in_tank(member.id, my_fish_tank.id)
    my_fish.my_fish_tank_id = 0
    my_fish.save()
    # 更新用户鱼缸中和塑料袋中的缓存
    if my_fish.id in my_fish_ids_in_tank:
        my_fish_ids_in_tank.remove(my_fish.id)
    update_my_fish_ids_in_tank(member.id, my_fish_tank.id, my_fish_ids_in_tank)
    if my_fish.id not in my_fish_ids_in_bag:
        my_fish_ids_in_bag.append(my_fish.id)
    update_my_fish_ids_in_bag(member.id, my_fish_ids_in_bag)

    #do task
    task_list = ''
    if my_fish.level==1:
        rewards, my_task = check_done_task(member,'t004',my_fish.style, 1, my_fish.family, my_fish.p_type, my_fish.star)
        if rewards:
            task_list = update_my_normal_task(member.id, my_task)
    else:
        rewards, my_task = check_done_task(member,'t005',my_fish.style, 1, my_fish.family, my_fish.p_type, my_fish.star)
        if rewards:
            task_list = update_my_normal_task(member.id, my_task)
    return {'status':'success',
            'rewards':rewards,
            'task_list':task_list,}

</t>
<t tx="newlife.20110104172722.2070">#卖出龙
def saleDragonAMF(request, skey, my_fish_id):
    member = login_member(request, skey)

    my_fish_id = int(my_fish_id)
    # 兑换用户的鱼   
    my_fish = get_my_fish(member.id, my_fish_id)
    if my_fish is None:
        return {'error':'fish does not exist', 'rewards':'', 'task_list':''}

    level, remain_exp, next_level_exp = get_almanac_level_info(member.id)
    if level == 4:
        if my_fish.style != 'd4_l_2':
            return {'error':'can not sale', 'rewards':'', 'task_list':''}

    if level &lt; 4:
        return {'error':'can not sale', 'rewards':'', 'task_list':''}

    get_shells = my_fish.sell_price()
    if my_fish.my_fish_tank_id == 0:
        delete_a_member_fish_in_bag(member, my_fish.id)
    elif my_fish.my_fish_tank_id &gt; 0:
        delete_a_member_fish_in_tank(member, my_fish.my_fish_tank_id, my_fish.id)
    else:
        return {'error':'can not sale', 'rewards':'', 'task_list':''}
    member.shells += get_shells
    member.save()

    #do task
    rewards, my_task = check_done_task(member, 't010', my_fish.style, 1)
    if rewards:
        task_list = update_my_normal_task(member.id, my_task)
    else:
        task_list = ''
    return {'shells':member.shells,
            'get_shells':get_shells,
            'rewards':rewards,
            'task_list':task_list,}

</t>
<t tx="newlife.20110104172722.2071"># 买背包格数
def buyDragonPositionAMF(request, skey, type):
    member = login_member(request, skey)

    max_pearl_bags, max_shell_bags = DEFAULT_MEMBER_MAX_BAGS.split('_')
    task_list = ''
    if type == 'pearl':
        if member.pearl_bags &gt;= max_pearl_bags:
            return {'error':'pearl position full', 'rewards':'', 'task_list':''}
        sell_pearls = int(pow(member.pearl_bags+1, 0.8)*10)
        if member.pearls &lt; sell_pearls:
            return {'error':'pearl limited', 'rewards':'', 'task_list':''}
        member.pearl_bags += 1
        member.pearls -= sell_pearls
        member.save()

        #do task
        rewards, my_task = check_done_task(member, 't012', '')
        if rewards:
            task_list = update_my_normal_task(member.id, my_task)
    elif type == 'shell':
        if member.shell_bags &gt;= max_shell_bags:
            return {'error':'shell position full', 'rewards':'', 'task_list':''}
        sell_shells = int(pow(member.shell_bags+1, 2)*50)
        if member.shells &lt; sell_shells:
            return {'error':'shell limited', 'rewards':'', 'task_list':''}
        member.shell_bags += 1
        member.shells -= sell_shells
        member.save()

        #do task
        rewards, my_task = check_done_task(member, 't012', '')
        if rewards:
            task_list = update_my_normal_task(member.id, my_task)
    else:
        return {'error':'parameter error', 'rewards':'', 'task_list':''}

    return {'status':'success', 
            'shells':member.shells, 
            'pearls':member.pearls,
            'rewards':rewards,
            'task_list':task_list}

</t>
<t tx="newlife.20110104172722.2072">#使用成长药水
def growthPotionAMF(request, skey, my_fish_id, style):
    member = login_member(request, skey)

    my_fish_id = int(my_fish_id)
    level, remain_exp, next_level_exp = get_almanac_level_info(member.id)
    # 取得当前目标鱼    
    my_fish = get_my_fish(member.id, my_fish_id)
    # 鱼不在缸里
    if my_fish.my_fish_tank_id&lt;=0:
        return {'error':'data error(-10000)', 'rewards':'', 'task_list':''}
    #需要变形了
    if my_fish.has_deformed:
        return {'error':'need deformed', 'rewards':'', 'task_list':''}
    # 已经对这条鱼使用过道具
    if level &gt; 3 and not my_fish.can_be_used_potion():
        return {'error':'already used', 'rewards':'', 'task_list':''}
    # 取得用户当前的道具
    my_item = get_or_create_my_item(member.id, style)
    if not (my_fish and my_item):
        return {'error': 'data error(-10001)', 'rewards':'', 'task_list':''}
    # 道具类型错误
    if my_item.item_type != 'GPO':
        return {'error':'data error(-10002)', 'rewards':'', 'task_list':''}
    # 道具不够
    if my_item.total_num &lt;= 0:
        product = get_shop_product(my_item.style)
        return {'error':'not enough item',
                'price':product.price,
                'name':my_item.name,
                'rewards':'',
                'task_list':'',
               }

    #减道具,设置道具使用时间
    now = datetime.now()
    my_item.total_num -= 1
    my_item.last_used = now
    my_item.save()

    #给鱼加成长
    my_fish = use_physic_for_fish(member, my_fish, my_item)
    # 处理图鉴
    open_new_almanac = False
    open_all = False
    get_exp = 0
    if isopen_new_almanac(member, my_fish):
        open_new_almanac = True
        get_exp, open_all = update_member_almanac_exp(member, my_fish)

    fish_info = {
            'id':my_fish.id,
            'name':my_fish.get_display_name(),
            'style':my_fish.get_display_style(),
            'star':my_fish.star,
            'family':my_fish.family,
            'is_highest_level':my_fish.is_highest_level(),
            'hungry':my_fish.hungry,
            'level':my_fish.level,
            'next_deformed_level': my_fish.next_deform_level(),
            'exp':my_fish.exp,
            'max_exp':60,
            'cd_time':my_fish.get_dispatch_rest_time(),
            'power':my_fish.get_power(),
            'has_deformed':my_fish.has_deformed,
            'can_be_potion':my_fish.can_be_used_potion(),
            'property': get_fish_property(my_fish.star, my_fish.level, my_fish.color),
            'has_finished':has_finished_fish(member.id, my_fish.style, my_fish.star),
            'almanac_name':my_fish.almanac_name,
            }
    #do task
    reward_almanac = ''
    task_list = ''
    reward_all_almanac = ''
    if open_new_almanac:
        reward_almanac, task_almanac = check_done_task(member, 't019', my_fish.style,
                1, my_fish.family, my_fish.p_type, my_fish.star)

    if open_all:
        reward_all_almanac, task_all_almanac = check_done_task(member, 't020', my_fish.base_style, 1) 

    if reward_almanac:
        rewards = reward_almanac
        task_list = update_my_normal_task(member.id, task_almanac)
    elif reward_all_almanac:
        rewards = reward_all_almanac
        task_list = update_my_normal_task(member.id, task_all_almanac)
    else:
        rewards, my_task = check_done_task(member, 't002', style, 1)
        if rewards:
            task_list = update_my_normal_task(member.id, my_task)

    level, remain_exp, next_level_exp = get_almanac_level_info(member.id)
    return {'level':level,
            'remain_exp':remain_exp,
            'next_level_exp':next_level_exp,
            'open_new_almanac':open_new_almanac,
            'shells':member.shells,
            'my_dragon':fish_info,
            'get_exp':get_exp,
            'open_all':open_all,
            'rewards':rewards,
            'task_list':task_list,
            }

</t>
<t tx="newlife.20110104172722.2073">def dragonPowerAMF(request, skey, my_fish_id, style): 
    member = login_member(request, skey)

    my_fish_id = int(my_fish_id)
    # 取得当前目标鱼    
    my_fish = get_my_fish(member.id, my_fish_id)
    # 取得用户当前的道具
    my_item = get_or_create_my_item(member.id, style)
    if not (my_fish and my_item):
        return {'error': 'data error(-10001)', 'rewards':'', 'task_list':''}
    # 道具类型错误
    if my_item.item_type != 'POW':
        return {'error':'data error(-10002)', 'rewards':'', 'task_list':''}
    if my_fish.level == 1:
        return {'error':'not use item', 'rewards':'', 'task_list':''}
    # 道具不够
    if my_item.total_num &lt;= 0:
        product = get_shop_product(my_item.style)
        return {'error':'not enough item',
                'price':product.price,
                'name':my_item.name,
                'rewards':'',
                'task_list':'',
                }

    #减道具,设置道具使用时间
    my_item.total_num -= 1
    my_item.last_used = datetime.now()
    my_item.save()

    #给鱼加体力
    my_fish.last_power_time = my_fish.last_power_time - timedelta(hours=DRAGON_MAX_POWER) 
    my_fish.save()

    #do task
    rewards, my_task = check_done_task(member, 't002', style, 1)
    if rewards:
        task_list = update_my_normal_task(member.id, my_task)
    else:
        task_list = ''
    return {'status':'success',
            'rewards':rewards,
            'task_list':task_list}

</t>
<t tx="newlife.20110104172722.2074">#给玩家恢复体力道具
def memberPowerAMF(request, skey, style): 
    member = login_member(request, skey)

    # 取得用户当前的道具
    my_item = get_or_create_my_item(member.id, style)
    if not my_item:
        return {'error': 'data error(-10001)', 'rewards':'', 'task_list':''}
    # 道具类型错误
    if my_item.item_type != 'POW':
        return {'error':'data error(-10002)', 'rewards':'', 'task_list':''}
    # 道具不够
    if my_item.total_num &lt;= 0:
        product = get_shop_product(my_item.style)
        return {'error':'not enough item',
                'price':product.price,
                'name':my_item.name,
                'rewards':'',
                'task_list':'',
                }
    level, remain_exp, next_level_exp = get_almanac_level_info(member.id)
    if level in [1, 2, 3, 4]:
        power = member.get_power(is_grow=False)
    else:
        power = member.get_power()

    if power == MEMBER_MAX_POWER:
        return {'error':'power is full',
                'rewards':'',
                'task_list':'',}

    #减道具,设置道具使用时间
    my_item.total_num -= 1
    my_item.last_used = datetime.now()
    my_item.save()

    #给玩家加体力
    member.last_power_time = datetime.now()
    member.power = MEMBER_MAX_POWER
    member.save()

    #do task
    rewards, my_task = check_done_task(member, 't002', style, 1)
    if rewards:
            task_list = update_my_normal_task(member.id, my_task)
    else:
        task_list = ''
    return {'status':'success',
            'power':member.get_power(),
            'rewards':rewards,
            'task_list':task_list}

</t>
</tnodes>
</leo_file>
