<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet ekr_test?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="newlife.20101116132724.1290"><vh>@chapters</vh></v>
<v t="newlife.20101116132724.1289"><vh>Error reporting via e-mail</vh></v>
</vnodes>
<tnodes>
<t tx="newlife.20101116132724.1289">Error reporting via e-mail
通过邮件发送错误报告

When you’re running a public site you should always turn off the DEBUG setting. That will make your server run much faster, and will also prevent malicious users from seeing details of your application that can be revealed by the error pages.

当我们行一个开放的站点，我们需要设置DEBUG 为False，这样会使服务器运行的更快，也会阻止恶毒的用户通过看到错误信息来攻击你的站点。

However, running with DEBUG set to False means you’ll never see errors generated by your site – everyone will just see your public error pages. You need to keep track of errors that occur in deployed sites, so Django can be configured to email you details of those errors.

可是，运行时DEBUG设置为False意味这你永远不会看到你的站点产生的错误信息，每个人都看到公开的错误页面。我们需要追踪已经部署的站点产生的错误信息，因此Django可以设置来给通过邮件发给你这些错误的细节。

Server errors
服务器错误

When DEBUG is False, Django will e-mail the users listed in the ADMINS setting whenever your code raises an unhandled exception and results in an internal server error (HTTP status code 500). This gives the administrators immediate notification of any errors. The ADMINS will get a description of the error, a complete Python traceback, and details about the HTTP request that caused the error.

当DEBUG设置为False，Django会发信给在"ADMINS"设置中的所有用户，当你的代码产生没有处理的异常并且导致内部服务器错误。这样管理员可以及时的得到错误通知。管理员会得到错误的详细描述，完整的python堆栈和导致错误的http请求。

Note

In order to send e-mail, Django requires a few settings telling it how to connect to your mail server. At the very least, you’ll need to specify EMAIL_HOST and possibly EMAIL_HOST_USER and EMAIL_HOST_PASSWORD, though other settings may be also required depending on your mail server’s configuration. Consult the Django settings documentation for a full list of email-related settings.
By default, Django will send email from root@localhost. However, some mail providers reject all email from this address. To use a different sender address, modify the SERVER_EMAIL setting.

注意
为了发email，django需要一些简单的设置来告诉他如何连接你的邮件服务器。至少，你需要指定一个EMAIL_HOST，EMAIL_HOST_USER，EMAIL_HOST_PASSWORD，还有其他设置或许需要，这取决于你的邮件服务器的配置。




To disable this behavior, just remove all entries from the ADMINS setting.
不想发信，直接删除setting里ADMINS这行就可以

404 errors
404错误
Django can also be configured to email errors about broken links (404 “page not found” errors). Django sends emails about 404 errors when:
DEBUG is False
SEND_BROKEN_LINK_EMAILS is True
Django也可以设置来发送404错误，需要DEBUG为False，SEND_BROKEN_LINK_EMAILS 是 True。。

Your MIDDLEWARE_CLASSES setting includes CommonMiddleware (which it does by default).

If those conditions are met, Django will e-mail the users listed in the MANAGERS setting whenever your code raises a 404 and the request has a referer. (It doesn’t bother to e-mail for 404s that don’t have a referer – those are usually just people typing in broken URLs or broken Web ‘bots).

You can tell Django to stop reporting particular 404s by tweaking the IGNORABLE_404_ENDS and IGNORABLE_404_STARTS settings. Both should be a tuple of strings. For example:

IGNORABLE_404_ENDS = ('.php', '.cgi')
IGNORABLE_404_STARTS = ('/phpmyadmin/',)
In this example, a 404 to any URL ending with .php or .cgi will not be reported. Neither will any URL starting with /phpmyadmin/.

The best way to disable this behavior is to set SEND_BROKEN_LINK_EMAILS to False.

See also
You can also set up custom error reporting by writing a custom piece of exception middleware. If you do write custom error handling, it's a good idea to emulate Django's built-in error handling and only report/log errors if DEBUG is False.</t>
<t tx="newlife.20101116132724.1290"></t>
</tnodes>
</leo_file>
