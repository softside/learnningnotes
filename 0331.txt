分析自己的情况：
书读百遍其义自现，代码写的多，bug就会多。我书读了很多，但是就是写不出一行代码，或者写出来的还是非常奇怪充斥着低级错误的代码。这就是熟练度不够的缘故。

原文：
第二阶段，写代码。
书读百遍其义自现，代码写的多，bug就会多。开场诗念完就讲讲如何写代码。这其实是非常难的一步，有不少朋友书读了很多，但是就是写不出一行代码，或者写出来的还是非常奇怪充斥着低级错误的代码。这就是熟练度不够的缘故。
平时喝茶的时间拿出来，想想代码该如何设计；平时泡妞的时间拿出来，想想这个函数有没有更好的实现；看到winzip、迅雷、QQ，想想如果自己写该如何实现功能。不仅要想，还要动手做一做。

如果你是做Windows编程，这里推荐一下codeproject.com，这个网站上的项目设计了Windows开发的方方面面，比如GDI如 何操作，数据库，控件菜单窗口消息循环等等，都比较短小精干，而且都包含了整个项目代码下载（而不仅仅是某个片段），下载以后编译调试一下，会对自己提高 帮助很大。

现在坊间也有一些step by step的书籍，教你如何一步步实现某个功能，这种书可以根据书评销量选一本然后照着实践编程。

第三阶段，看高人编程。

这一步针对读者已经工作而且公司中有高手存在的情况。跟高手拉好关系，然后坐在一边看他编程，一般有些人不喜欢别人看，但是如果你表现出很仰慕的表情，问题应该不大。一般比较靠谱的软件公司对于新人都会指定一个导师，如果幸运的话，你就看你的导师如何编程好了。
实这是学徒到大师中很关键的一步，有个词叫”传帮带“，就是师傅手把手的教。其实编程也是一门手艺，如果没看过师傅真实的工作状态，想变成高手要比较困难一些。
看高人编程看什么，看他如何写代码，如何思考，用了哪些工具、快捷键，遇到问题怎么调试怎么跟踪的？这些都是书本上很少见，但是工程实践中又非常有用的东西。

第四阶段，分享知识。
自己水平够不够，一做分享就知道。
不少公司都会定期举行技术分享会这类活动，或者有些地方社区也会搞搞技术分享。如果你觉得自己学的差不多了，就试着把自己知道的讲出来，分享给其他人。
这样做有几个好处，一个是增加你对知识的了解。我做过不少ppt，当自己想说点什么的时候才知道自己有多深浅哪个地方还欠缺，这个办法万试万灵。在 问答环节，你还可以与其他人互动，其他人的问题未必你都懂，这时候就可以继续深入学习。另外可以增加你自己的技术知名度，是一个很好的广告效应。
如果没有类似的技术分享怎么办？

test
